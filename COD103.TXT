OBJECT Codeunit 103 Cust. Entry-Edit
{
  OBJECT-PROPERTIES
  {
    Date=08/28/20;
    Time=12:00:00 PM;
    Version List=NAVW114.17;
  }
  PROPERTIES
  {
    TableNo=21;
    Permissions=TableData 21=m,
                TableData 379=m;
    OnRun=BEGIN
            OnBeforeOnRun(Rec,CustLedgEntry,DtldCustLedgEntry);

            CustLedgEntry := Rec;
            CustLedgEntry.LOCKTABLE;
            CustLedgEntry.FIND;
            CustLedgEntry."On Hold" := "On Hold";
            IF CustLedgEntry.Open THEN BEGIN
              CustLedgEntry."Due Date" := "Due Date";
              DtldCustLedgEntry.SETCURRENTKEY("Cust. Ledger Entry No.");
              DtldCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgEntry."Entry No.");
              DtldCustLedgEntry.MODIFYALL("Initial Entry Due Date","Due Date");
              CustLedgEntry."Pmt. Discount Date" := "Pmt. Discount Date";
              CustLedgEntry."Applies-to ID" := "Applies-to ID";
              CustLedgEntry.VALIDATE("Payment Method Code","Payment Method Code");
              CustLedgEntry.VALIDATE("Remaining Pmt. Disc. Possible","Remaining Pmt. Disc. Possible");
              CustLedgEntry."Pmt. Disc. Tolerance Date" := "Pmt. Disc. Tolerance Date";
              CustLedgEntry.VALIDATE("Max. Payment Tolerance","Max. Payment Tolerance");
              CustLedgEntry.VALIDATE("Accepted Payment Tolerance","Accepted Payment Tolerance");
              CustLedgEntry.VALIDATE("Accepted Pmt. Disc. Tolerance","Accepted Pmt. Disc. Tolerance");
              CustLedgEntry.VALIDATE("Amount to Apply","Amount to Apply");
              CustLedgEntry.VALIDATE("Applying Entry","Applying Entry");
              CustLedgEntry.VALIDATE("Applies-to Ext. Doc. No.","Applies-to Ext. Doc. No.");
              CustLedgEntry.VALIDATE("Message to Recipient","Message to Recipient");
              CustLedgEntry.VALIDATE("Recipient Bank Account","Recipient Bank Account");
              CustLedgEntry."Direct Debit Mandate ID" := "Direct Debit Mandate ID";
            END;
            CustLedgEntry.VALIDATE("Exported to Payment File","Exported to Payment File");
            OnBeforeCustLedgEntryModify(CustLedgEntry,Rec);
            CustLedgEntry.TESTFIELD("Entry No.","Entry No.");
            CustLedgEntry.MODIFY;
            Rec := CustLedgEntry;
          END;

  }
  CODE
  {
    VAR
      CustLedgEntry@1000 : Record 21;
      DtldCustLedgEntry@1001 : Record 379;
      CustomerNamesUpdateQst@1002 : TextConst '@@@="%1 = number of entries";ENU=%1 customer ledger entries with empty Customer Name found. Do you want to copy the name on customer cards to these customer ledger entries?';

    PROCEDURE UpdateCustomerNamesInLedgerEntries@2();
    VAR
      Customer@1001 : Record 18;
      ConfirmManagement@1002 : Codeunit 27;
      Counter@1000 : Integer;
    BEGIN
      CustLedgEntry.RESET;
      CustLedgEntry.SETRANGE("Customer Name",'');
      IF CustLedgEntry.ISEMPTY THEN
        EXIT;

      Counter := CustLedgEntry.COUNT;
      IF NOT ConfirmManagement.ConfirmProcess(STRSUBSTNO(CustomerNamesUpdateQst,Counter),TRUE) THEN
        EXIT;

      IF CustLedgEntry.FINDSET(TRUE,FALSE) THEN
        REPEAT
          IF Customer.GET(CustLedgEntry."Customer No.") THEN BEGIN
            CustLedgEntry."Customer Name" := Customer.Name;
            CustLedgEntry.MODIFY;
          END;
        UNTIL CustLedgEntry.NEXT = 0;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCustLedgEntryModify@1(VAR CustLedgEntry@1000 : Record 21;FromCustLedgEntry@1001 : Record 21);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeOnRun@3(VAR CustLedgerEntryRec@1000 : Record 21;VAR CustLedgerEntry@1001 : Record 21;VAR DetailedCustLedgEntry@1002 : Record 379);
    BEGIN
    END;

    BEGIN
    END.
  }
}

