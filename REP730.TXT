OBJECT Report 730 Copy Item
{
  OBJECT-PROPERTIES
  {
    Date=12/01/21;
    Time=12:00:00 PM;
    Version List=NAVW114.31;
  }
  PROPERTIES
  {
    CaptionML=ENU=Copy Item;
    ProcessingOnly=Yes;
    OnInitReport=BEGIN
                   NumberOfCopies := 1;
                 END;

    OnPreReport=VAR
                  i@1000 : Integer;
                BEGIN
                  CheckTargetItemNo;

                  IF NOT SourceItem.GET(SourceItem."No.") THEN
                    ERROR(SourceItemDoesNotExistErr,SourceItem."No.");

                  IF (TargetItemNo = '') AND (TargetNoSeries = '') THEN
                    ERROR(SpecifyTargetItemNoErr);

                  InvtSetup.GET;

                  FOR i := 1 TO NumberOfCopies DO
                    CopyItem(i);

                  CopySuccessful := TRUE;
                END;

    OnPostReport=BEGIN
                   OnAfterPostReport(TargetItemNo,SourceItem."No.");
                 END;

  }
  DATASET
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   SourceItem := TempItem;
                   SourceItemNumber := SourceItem."No.";
                   InvtSetup.GET;
                   TargetNoSeries := InvtSetup."Item Nos.";

                   OnAfterOpenPage;
                 END;

    }
    CONTROLS
    {
      { 26  ;0   ;Container ;
                  ContainerType=ContentArea }

      { 25  ;1   ;Group     ;
                  CaptionML=ENU=Options }

      { 36  ;2   ;Field     ;
                  Name=SourceItemNo;
                  Lookup=Yes;
                  CaptionML=ENU=Source Item No.;
                  ToolTipML=ENU=Specifies the number of the item that you want to copy the data from.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=SourceItemNumber;
                  TableRelation=Item;
                  Editable=FALSE }

      { 33  ;2   ;Field     ;
                  Name=TargetItemNo;
                  CaptionML=ENU=Target Item No.;
                  ToolTipML=ENU=Specifies the number of the new item that you want to copy the data to. \\To generate the new item number from a number series, fill in the Target No. Series field instead.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=TargetItemNo;
                  OnValidate=BEGIN
                               IF TargetItemNo <> '' THEN
                                 TargetNoSeries := '';
                             END;
                              }

      { 4   ;2   ;Field     ;
                  Name=TargetNoSeries;
                  AssistEdit=Yes;
                  CaptionML=ENU=Target No. Series;
                  ToolTipML=ENU=Specifies the number series that is used to assign a number to the new item.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=TargetNoSeries;
                  Editable=FALSE;
                  OnAssistEdit=BEGIN
                                 InvtSetup.GET;
                                 InvtSetup.TESTFIELD("Item Nos.");
                                 NoSeriesMgt.SelectSeries(InvtSetup."Item Nos.",SourceItem."No. Series",TargetNoSeries);
                                 TargetItemNo := '';
                               END;
                                }

      { 2   ;2   ;Field     ;
                  Name=NumberOfCopies;
                  CaptionML=ENU=Number of Copies;
                  ToolTipML=ENU=Specifies the number of new items that you want to create.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=NumberOfCopies;
                  MinValue=1 }

      { 24  ;2   ;Group     ;
                  CaptionML=ENU=General }

      { 23  ;3   ;Field     ;
                  Name=GeneralItemInformation;
                  CaptionML=ENU=General Item Information;
                  ToolTipML=ENU=Specifies if the selected data type if also copied to the new item.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CopyGenItemInfo }

      { 22  ;3   ;Field     ;
                  Name=UnitsOfMeasure;
                  CaptionML=ENU=Units of measure;
                  ToolTipML=ENU=Specifies if the selected data type if also copied to the new item.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CopyUnitOfMeasure }

      { 21  ;3   ;Field     ;
                  Name=Dimensions;
                  CaptionML=ENU=Dimensions;
                  ToolTipML=ENU=Specifies if the selected data type if also copied to the new item.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CopyDimensions }

      { 20  ;3   ;Field     ;
                  Name=Picture;
                  CaptionML=ENU=Picture;
                  ToolTipML=ENU=Specifies if the selected data type if also copied to the new item.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CopyPic }

      { 19  ;3   ;Field     ;
                  Name=Comments;
                  CaptionML=ENU=Comments;
                  ToolTipML=ENU=Specifies if the selected data type if also copied to the new item.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CopyComments }

      { 18  ;2   ;Group     ;
                  CaptionML=ENU=Sale }

      { 17  ;3   ;Field     ;
                  Name=SalesPrices;
                  CaptionML=ENU=Sales Prices;
                  ToolTipML=ENU=Specifies if the selected data type if also copied to the new item.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CopySalesPrices }

      { 16  ;3   ;Field     ;
                  Name=SalesLineDisc;
                  CaptionML=ENU=Sales Line Disc.;
                  ToolTipML=ENU=Specifies if the selected data type if also copied to the new item.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CopySalesLineDisc }

      { 15  ;2   ;Group     ;
                  CaptionML=ENU=Purchase }

      { 14  ;3   ;Field     ;
                  Name=PurchasePrices;
                  CaptionML=ENU=Purchase Prices;
                  ToolTipML=ENU=Specifies if the selected data type if also copied to the new item.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CopyPurchPrices }

      { 13  ;3   ;Field     ;
                  Name=PurchaseLineDisc;
                  CaptionML=ENU=Purchase Line Disc.;
                  ToolTipML=ENU=Specifies if the selected data type if also copied to the new item.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CopyPurchLineDisc }

      { 12  ;2   ;Group     ;
                  CaptionML=ENU=Service }

      { 11  ;3   ;Field     ;
                  Name=Troubleshooting;
                  CaptionML=ENU=Troubleshooting;
                  ToolTipML=ENU=Specifies if the selected data type if also copied to the new item.;
                  ApplicationArea=#Service;
                  SourceExpr=CopyTroubleshooting }

      { 10  ;3   ;Field     ;
                  Name=ResourceSkills;
                  CaptionML=ENU=Resource Skills;
                  ToolTipML=ENU=Specifies if the selected data type if also copied to the new item.;
                  ApplicationArea=#Service;
                  SourceExpr=CopyResourceSkills }

      { 9   ;2   ;Group     ;
                  CaptionML=ENU=Extended }

      { 8   ;3   ;Field     ;
                  Name=ItemVariants;
                  CaptionML=ENU=Item Variants;
                  ToolTipML=ENU=Specifies if the selected data type if also copied to the new item.;
                  ApplicationArea=#Planning;
                  SourceExpr=CopyVariants }

      { 7   ;3   ;Field     ;
                  Name=Translations;
                  CaptionML=ENU=Translations;
                  ToolTipML=ENU=Specifies if the selected data type if also copied to the new item.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CopyTranslations }

      { 6   ;3   ;Field     ;
                  Name=ExtendedTexts;
                  CaptionML=ENU=Extended Text;
                  ToolTipML=ENU=Specifies if the selected data type if also copied to the new item.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CopyExtTxt }

      { 5   ;3   ;Field     ;
                  Name=BOMComponents;
                  CaptionML=ENU=BOM Components;
                  ToolTipML=ENU=Specifies if the selected data type if also copied to the new item.;
                  ApplicationArea=#Assembly,#Manufacturing;
                  SourceExpr=CopyBOM }

      { 3   ;3   ;Field     ;
                  Name=ItemVendors;
                  CaptionML=ENU=Item Vendors;
                  ToolTipML=ENU=Specifies if the selected data type if also copied to the new item.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CopyItemVendor }

      { 1   ;3   ;Field     ;
                  Name=Attributes;
                  CaptionML=ENU=Attributes;
                  ToolTipML=ENU=Specifies if the selected data type if also copied to the new item.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CopyAttributes }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      SourceItem@1000 : Record 27;
      TempItem@1020 : TEMPORARY Record 27;
      InvtSetup@1021 : Record 313;
      NoSeriesMgt@1004 : Codeunit 396;
      CopyGenItemInfo@1022 : Boolean;
      CopyComments@1023 : Boolean;
      CopyPic@1024 : Boolean;
      CopyUnitOfMeasure@1025 : Boolean;
      CopyVariants@1026 : Boolean;
      CopyTranslations@1027 : Boolean;
      CopyExtTxt@1028 : Boolean;
      CopyBOM@1029 : Boolean;
      CopyItemVendor@1034 : Boolean;
      CopyDimensions@1071 : Boolean;
      CopyTroubleshooting@1073 : Boolean;
      CopyResourceSkills@1075 : Boolean;
      CopySalesPrices@1009 : Boolean;
      CopySalesLineDisc@1010 : Boolean;
      CopyPurchPrices@1011 : Boolean;
      CopyPurchLineDisc@1012 : Boolean;
      CopyAttributes@1002 : Boolean;
      NumberOfCopies@1006 : Integer;
      CopySuccessful@1045 : Boolean;
      SourceItemDoesNotExistErr@1052 : TextConst '@@@=%1 - item number.;ENU=Source item number %1 does not exist.';
      SpecifyTargetItemNoErr@1053 : TextConst 'ENU=You must specify the target item number.';
      TargetItemDoesNotExistErr@1055 : TextConst '@@@=%1 - item number.;ENU=Target item number %1 already exists.';
      SourceItemNumber@1001 : Code[20];
      TargetNoSeries@1064 : Code[20];
      TargetItemNoTxt@1007 : TextConst 'ENU=Target Item No.';
      TargetItemNo@1008 : Code[20];
      FirstItemNo@1013 : Code[20];
      LastItemNo@1003 : Code[20];

    PROCEDURE CopyItem@8(CopyCounter@1001 : Integer);
    VAR
      TargetItem@1002 : Record 27;
    BEGIN
      InsertTargetItem(TargetItem,CopyCounter);

      IF NOT (CopySalesLineDisc OR CopyPurchLineDisc) THEN BEGIN
        TargetItem."Item Disc. Group" := '';
        TargetItem.MODIFY;
      END;

      CopyItemPicture(SourceItem,TargetItem);
      CopyItemComments(SourceItem."No.",TargetItem."No.");
      CopyItemUnisOfMeasure(SourceItem,TargetItem);
      CopyItemVariants(SourceItem."No.",TargetItem."No.");
      CopyItemTranslations(SourceItem."No.",TargetItem."No.");
      CopyExtendedTexts(SourceItem."No.",TargetItem);
      CopyBOMComponents(SourceItem."No.",TargetItem."No.");
      CopyItemVendors(SourceItem."No.",TargetItem."No.");
      CopyItemDimensions(SourceItem,TargetItem);
      CopyTroubleshootingSetup(SourceItem."No.",TargetItem."No.");
      CopyItemResourceSkills(SourceItem."No.",TargetItem."No.");
      CopyItemSalesPrices(SourceItem."No.",TargetItem."No.");
      CopySalesLineDiscounts(SourceItem."No.",TargetItem."No.");
      CopyPurchasePrices(SourceItem."No.",TargetItem."No.");
      CopyPurchaseLineDiscounts(SourceItem."No.",TargetItem."No.");
      CopyItemAttributes(SourceItem."No.",TargetItem."No.");

      OnAfterCopyItem(SourceItem,TargetItem);
    END;

    PROCEDURE SetItem@4(VAR Item2@1000 : Record 27);
    BEGIN
      TempItem := Item2;
    END;

    [External]
    PROCEDURE IsItemCopied@7(VAR NewFirstItemNo@1001 : Code[20];VAR NewLastItemNo@1000 : Code[20]) : Boolean;
    BEGIN
      NewFirstItemNo := FirstItemNo;
      NewLastItemNo := LastItemNo;
      EXIT(CopySuccessful);
    END;

    LOCAL PROCEDURE SetTargetItemNo@232(VAR TargetItem@1000 : Record 27;CopyCounter@1004 : Integer);
    BEGIN
      WITH TargetItem DO BEGIN
        IF TargetNoSeries <> '' THEN BEGIN
          OnBeforeInitSeries(SourceItem,InvtSetup);
          InvtSetup.TESTFIELD("Item Nos.");
          "No." := '';
          NoSeriesMgt.InitSeries(TargetNoSeries,'',0D,"No.","No. Series");
        END ELSE BEGIN
          NoSeriesMgt.TestManual(InvtSetup."Item Nos.");

          IF CopyCounter > 1 THEN
            TargetItemNo := INCSTR(TargetItemNo);
          "No." := TargetItemNo;
        END;

        CheckExistingItem("No.");

        IF CopyCounter = 1 THEN
          FirstItemNo := "No.";
        LastItemNo := "No.";
      END;
    END;

    LOCAL PROCEDURE InsertTargetItem@233(VAR TargetItem@1001 : Record 27;CopyCounter@1003 : Integer);
    BEGIN
      WITH TargetItem DO BEGIN
        TRANSFERFIELDS(SourceItem);

        SetTargetItemNo(TargetItem,CopyCounter);

        "Last Date Modified" := TODAY;
        "Created From Nonstock Item" := FALSE;
        INSERT;
      END;
    END;

    LOCAL PROCEDURE CheckTargetItemNo@6();
    VAR
      TextManagement@1000 : Codeunit 41;
    BEGIN
      IF (NumberOfCopies > 1) AND (TargetItemNo <> '') THEN
        TextManagement.EvaluateIncStr(TargetItemNo,TargetItemNoTxt);
    END;

    LOCAL PROCEDURE CheckExistingItem@16(ItemNo@1000 : Code[20]);
    VAR
      Item@1001 : Record 27;
    BEGIN
      IF Item.GET(ItemNo) THEN
        ERROR(TargetItemDoesNotExistErr,ItemNo);
    END;

    LOCAL PROCEDURE CopyItemPicture@262(FromItem@1000 : Record 27;VAR ToItem@1001 : Record 27);
    BEGIN
      IF CopyPic THEN BEGIN
        ToItem.Picture := FromItem.Picture;
        ToItem.MODIFY;
      END ELSE BEGIN
        CLEAR(ToItem.Picture);
        ToItem.MODIFY;
      END;
    END;

    LOCAL PROCEDURE CopyItemRelatedTable@2(TableId@1002 : Integer;FieldNo@1003 : Integer;FromItemNo@1001 : Code[20];ToItemNo@1000 : Code[20]);
    VAR
      SourceRecRef@1004 : RecordRef;
      TargetRecRef@1005 : RecordRef;
      SourceFieldRef@1006 : FieldRef;
      TargetFieldRef@1007 : FieldRef;
    BEGIN
      SourceRecRef.OPEN(TableId);
      SourceFieldRef := SourceRecRef.FIELD(FieldNo);
      SourceFieldRef.SETRANGE(FromItemNo);
      IF SourceRecRef.FINDSET THEN
        REPEAT
          TargetRecRef := SourceRecRef.DUPLICATE;
          TargetFieldRef := TargetRecRef.FIELD(FieldNo);
          TargetFieldRef.VALUE(ToItemNo);
          TargetRecRef.INSERT;
        UNTIL SourceRecRef.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyItemRelatedTableFromRecRef@5(VAR SourceRecRef@1004 : RecordRef;FieldNo@1003 : Integer;FromItemNo@1001 : Code[20];ToItemNo@1000 : Code[20]);
    VAR
      TargetRecRef@1005 : RecordRef;
      SourceFieldRef@1006 : FieldRef;
      TargetFieldRef@1007 : FieldRef;
    BEGIN
      SourceFieldRef := SourceRecRef.FIELD(FieldNo);
      SourceFieldRef.SETRANGE(FromItemNo);
      IF SourceRecRef.FINDSET THEN
        REPEAT
          TargetRecRef := SourceRecRef.DUPLICATE;
          TargetFieldRef := TargetRecRef.FIELD(FieldNo);
          TargetFieldRef.VALUE(ToItemNo);
          TargetRecRef.INSERT;
        UNTIL SourceRecRef.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyItemComments@230(FromItemNo@1002 : Code[20];ToItemNo@1001 : Code[20]);
    VAR
      CommentLine@1000 : Record 97;
      RecRef@1004 : RecordRef;
    BEGIN
      IF NOT CopyComments THEN
        EXIT;

      CommentLine.SETRANGE("Table Name",CommentLine."Table Name"::Item);

      RecRef.GETTABLE(CommentLine);
      CopyItemRelatedTableFromRecRef(RecRef,CommentLine.FIELDNO("No."),FromItemNo,ToItemNo);
    END;

    LOCAL PROCEDURE CopyItemUnisOfMeasure@235(FromItem@1001 : Record 27;VAR ToItem@1000 : Record 27);
    VAR
      ItemUnitOfMeasure@1002 : Record 5404;
      RecRef@1003 : RecordRef;
    BEGIN
      IF CopyUnitOfMeasure THEN BEGIN
        ItemUnitOfMeasure.SETRANGE("Item No.",FromItem."No.");
        RecRef.GETTABLE(ItemUnitOfMeasure);
        CopyItemRelatedTableFromRecRef(RecRef,ItemUnitOfMeasure.FIELDNO("Item No."),FromItem."No.",ToItem."No.");
      END ELSE
        IF CopyGenItemInfo THEN BEGIN
          ToItem."Base Unit of Measure" := '';
          ToItem."Sales Unit of Measure" := '';
          ToItem."Purch. Unit of Measure" := '';
          ToItem."Put-away Unit of Measure Code" := '';
          ToItem.MODIFY;
        END;
    END;

    LOCAL PROCEDURE CopyItemVariants@238(FromItemNo@1001 : Code[20];ToItemNo@1000 : Code[20]);
    VAR
      ItemVariant@1002 : Record 5401;
    BEGIN
      IF NOT CopyVariants THEN
        EXIT;

      CopyItemRelatedTable(DATABASE::"Item Variant",ItemVariant.FIELDNO("Item No."),FromItemNo,ToItemNo);
    END;

    LOCAL PROCEDURE CopyItemTranslations@239(FromItemNo@1001 : Code[20];ToItemNo@1000 : Code[20]);
    VAR
      ItemTranslation@1002 : Record 30;
      RecRef@1003 : RecordRef;
    BEGIN
      IF NOT CopyTranslations THEN
        EXIT;

      ItemTranslation.SETRANGE("Item No.",FromItemNo);
      IF NOT CopyVariants THEN
        ItemTranslation.SETRANGE("Variant Code",'');

      RecRef.GETTABLE(ItemTranslation);
      CopyItemRelatedTableFromRecRef(RecRef,ItemTranslation.FIELDNO("Item No."),FromItemNo,ToItemNo);
    END;

    LOCAL PROCEDURE CopyExtendedTexts@241(FromItemNo@1001 : Code[20];VAR TargetItem@1000 : Record 27);
    VAR
      ExtendedTextHeader@1002 : Record 279;
      ExtendedTextLine@1003 : Record 280;
      NewExtendedTextHeader@1005 : Record 279;
      NewExtendedTextLine@1004 : Record 280;
    BEGIN
      IF NOT CopyExtTxt THEN
        EXIT;

      ExtendedTextHeader.SETRANGE("Table Name",ExtendedTextHeader."Table Name"::Item);
      ExtendedTextHeader.SETRANGE("No.",FromItemNo);
      IF ExtendedTextHeader.FINDSET THEN
        REPEAT
          ExtendedTextLine.SETRANGE("Table Name",ExtendedTextHeader."Table Name");
          ExtendedTextLine.SETRANGE("No.",ExtendedTextHeader."No.");
          ExtendedTextLine.SETRANGE("Language Code",ExtendedTextHeader."Language Code");
          ExtendedTextLine.SETRANGE("Text No.",ExtendedTextHeader."Text No.");
          IF ExtendedTextLine.FINDSET THEN
            REPEAT
              NewExtendedTextLine.TRANSFERFIELDS(ExtendedTextLine);
              NewExtendedTextLine."No." := TargetItem."No.";
              NewExtendedTextLine.INSERT;
            UNTIL ExtendedTextLine.NEXT = 0;

          NewExtendedTextHeader.TRANSFERFIELDS(ExtendedTextHeader);
          NewExtendedTextHeader."No." := TargetItem."No.";
          NewExtendedTextHeader.INSERT;
        UNTIL ExtendedTextHeader.NEXT = 0;

      OnAfterCopyExtendedTexts(SourceItem,TargetItem);
    END;

    LOCAL PROCEDURE CopyBOMComponents@1014(FromItemNo@1001 : Code[20];ToItemNo@1000 : Code[20]);
    VAR
      BOMComponent@1002 : Record 90;
    BEGIN
      IF NOT CopyBOM THEN
        EXIT;

      CopyItemRelatedTable(DATABASE::"BOM Component",BOMComponent.FIELDNO("Parent Item No."),FromItemNo,ToItemNo);
    END;

    LOCAL PROCEDURE CopyItemVendors@244(FromItemNo@1002 : Code[20];ToItemNo@1001 : Code[20]);
    VAR
      ItemVendor@1000 : Record 99;
    BEGIN
      IF NOT CopyItemVendor THEN
        EXIT;

      CopyItemRelatedTable(DATABASE::"Item Vendor",ItemVendor.FIELDNO("Item No."),FromItemNo,ToItemNo);
    END;

    LOCAL PROCEDURE CopyItemDimensions@245(FromItem@1001 : Record 27;VAR ToItem@1000 : Record 27);
    VAR
      DefaultDim@1002 : Record 352;
      NewDefaultDim@1003 : Record 352;
    BEGIN
      IF CopyDimensions THEN BEGIN
        DefaultDim.SETRANGE("Table ID",DATABASE::Item);
        DefaultDim.SETRANGE("No.",FromItem."No.");
        IF DefaultDim.FINDSET THEN
          REPEAT
            NewDefaultDim.TRANSFERFIELDS(DefaultDim);
            NewDefaultDim."No." := ToItem."No.";
            NewDefaultDim.INSERT;
          UNTIL DefaultDim.NEXT = 0;
        ToItem."Global Dimension 1 Code" := FromItem."Global Dimension 1 Code";
        ToItem."Global Dimension 2 Code" := FromItem."Global Dimension 2 Code";
        ToItem.MODIFY;
      END ELSE
        IF CopyGenItemInfo THEN BEGIN
          ToItem."Global Dimension 1 Code" := '';
          ToItem."Global Dimension 2 Code" := '';
          ToItem.MODIFY;
        END;
    END;

    LOCAL PROCEDURE CopyTroubleshootingSetup@247(FromItemNo@1002 : Code[20];ToItemNo@1001 : Code[20]);
    VAR
      TroubleshootingSetup@1000 : Record 5945;
      RecRef@1003 : RecordRef;
    BEGIN
      IF NOT CopyTroubleshooting THEN
        EXIT;

      TroubleshootingSetup.SETRANGE(Type,TroubleshootingSetup.Type::Item);

      RecRef.GETTABLE(TroubleshootingSetup);
      CopyItemRelatedTableFromRecRef(RecRef,TroubleshootingSetup.FIELDNO("No."),FromItemNo,ToItemNo);
    END;

    LOCAL PROCEDURE CopyItemResourceSkills@248(FromItemNo@1002 : Code[20];ToItemNo@1001 : Code[20]);
    VAR
      ResourceSkill@1000 : Record 5956;
      RecRef@1003 : RecordRef;
    BEGIN
      IF NOT CopyResourceSkills THEN
        EXIT;

      ResourceSkill.SETRANGE(Type,ResourceSkill.Type::Item);

      RecRef.GETTABLE(ResourceSkill);
      CopyItemRelatedTableFromRecRef(RecRef,ResourceSkill.FIELDNO("No."),FromItemNo,ToItemNo);
    END;

    LOCAL PROCEDURE CopyItemSalesPrices@1022(FromItemNo@1001 : Code[20];ToItemNo@1000 : Code[20]);
    VAR
      SalesPrice@1002 : Record 7002;
    BEGIN
      IF NOT CopySalesPrices THEN
        EXIT;

      CopyItemRelatedTable(DATABASE::"Sales Price",SalesPrice.FIELDNO("Item No."),FromItemNo,ToItemNo);
    END;

    LOCAL PROCEDURE CopySalesLineDiscounts@253(FromItemNo@1001 : Code[20];ToItemNo@1000 : Code[20]);
    VAR
      SalesLineDiscount@1002 : Record 7004;
      RecRef@1003 : RecordRef;
    BEGIN
      IF NOT CopySalesLineDisc THEN
        EXIT;

      SalesLineDiscount.SETRANGE(Type,SalesLineDiscount.Type::Item);

      RecRef.GETTABLE(SalesLineDiscount);
      CopyItemRelatedTableFromRecRef(RecRef,SalesLineDiscount.FIELDNO(Code),FromItemNo,ToItemNo);
    END;

    LOCAL PROCEDURE CopyPurchasePrices@257(FromItemNo@1002 : Code[20];ToItemNo@1001 : Code[20]);
    VAR
      PurchasePrice@1000 : Record 7012;
    BEGIN
      IF NOT CopyPurchPrices THEN
        EXIT;

      CopyItemRelatedTable(DATABASE::"Purchase Price",PurchasePrice.FIELDNO("Item No."),FromItemNo,ToItemNo);
    END;

    LOCAL PROCEDURE CopyPurchaseLineDiscounts@259(FromItemNo@1002 : Code[20];ToItemNo@1001 : Code[20]);
    VAR
      PurchLineDiscount@1000 : Record 7014;
    BEGIN
      IF NOT CopyPurchLineDisc THEN
        EXIT;

      CopyItemRelatedTable(DATABASE::"Purchase Line Discount",PurchLineDiscount.FIELDNO("Item No."),FromItemNo,ToItemNo);
    END;

    LOCAL PROCEDURE CopyItemAttributes@229(FromItemNo@1001 : Code[20];ToItemNo@1002 : Code[20]);
    VAR
      ItemAttributeValueMapping@1000 : Record 7505;
      RecRef@1003 : RecordRef;
    BEGIN
      IF NOT CopyAttributes THEN
        EXIT;

      ItemAttributeValueMapping.SETRANGE("Table ID",DATABASE::Item);

      RecRef.GETTABLE(ItemAttributeValueMapping);
      CopyItemRelatedTableFromRecRef(RecRef,ItemAttributeValueMapping.FIELDNO("No."),FromItemNo,ToItemNo);
    END;

    [Integration(DEFAULT,TRUE)]
    LOCAL PROCEDURE OnAfterOpenPage@242();
    BEGIN
    END;

    [Integration(DEFAULT,TRUE)]
    LOCAL PROCEDURE OnAfterPostReport@234(ToItemNo@1000 : Code[20];FromItemNo@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyExtendedTexts@231(VAR SourceItem@1000 : Record 27;VAR TargetItem@1001 : Record 27);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCopyItem@1(SourceItem@1001 : Record 27;VAR TargetItem@1000 : Record 27);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInitSeries@249(VAR Item@1000 : Record 27;VAR InventorySetup@1001 : Record 313);
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

