OBJECT Table 79 Company Information
{
  OBJECT-PROPERTIES
  {
    Date=12/01/21;
    Time=12:00:00 PM;
    Version List=NAVW114.31,NAVNA14.31;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
               IF PictureUpdated THEN
                 "Picture - Last Mod. Date Time" := "Last Modified Date Time";
             END;

    OnModify=BEGIN
               "Last Modified Date Time" := CURRENTDATETIME;
               IF PictureUpdated THEN
                 "Picture - Last Mod. Date Time" := "Last Modified Date Time";
             END;

    CaptionML=ENU=Company Information;
  }
  FIELDS
  {
    { 1   ;   ;Primary Key         ;Code10        ;CaptionML=ENU=Primary Key }
    { 2   ;   ;Name                ;Text100       ;CaptionML=ENU=Name }
    { 3   ;   ;Name 2              ;Text50        ;CaptionML=ENU=Name 2 }
    { 4   ;   ;Address             ;Text100       ;CaptionML=ENU=Address }
    { 5   ;   ;Address 2           ;Text50        ;CaptionML=ENU=Address 2 }
    { 6   ;   ;City                ;Text30        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=City }
    { 7   ;   ;Phone No.           ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. }
    { 8   ;   ;Phone No. 2         ;Text30        ;ExtendedDatatype=Phone No.;
                                                   CaptionML=ENU=Phone No. 2 }
    { 9   ;   ;Telex No.           ;Text30        ;CaptionML=ENU=Telex No. }
    { 10  ;   ;Fax No.             ;Text30        ;CaptionML=ENU=Fax No. }
    { 11  ;   ;Giro No.            ;Text20        ;CaptionML=ENU=Giro No. }
    { 12  ;   ;Bank Name           ;Text100       ;CaptionML=ENU=Bank Name }
    { 13  ;   ;Bank Branch No.     ;Text20        ;CaptionML=ENU=Bank Branch No. }
    { 14  ;   ;Bank Account No.    ;Text30        ;CaptionML=ENU=Bank Account No. }
    { 15  ;   ;Payment Routing No. ;Text20        ;CaptionML=ENU=Payment Routing No. }
    { 17  ;   ;Customs Permit No.  ;Text10        ;CaptionML=ENU=Customs Permit No. }
    { 18  ;   ;Customs Permit Date ;Date          ;CaptionML=ENU=Customs Permit Date }
    { 19  ;   ;VAT Registration No.;Text20        ;OnValidate=VAR
                                                                VATRegNoFormat@1005 : Record 381;
                                                                VATRegistrationLog@1004 : Record 249;
                                                                VATRegNoSrvConfig@1002 : Record 248;
                                                                VATRegistrationLogMgt@1003 : Codeunit 249;
                                                                ResultRecordRef@1001 : RecordRef;
                                                              BEGIN
                                                                "VAT Registration No." := UPPERCASE("VAT Registration No.");
                                                                IF "VAT Registration No." = xRec."VAT Registration No." THEN
                                                                  EXIT;
                                                                IF NOT VATRegNoFormat.Test("VAT Registration No.","Country/Region Code",'',DATABASE::"Company Information") THEN
                                                                  EXIT;
                                                                IF "Country/Region Code" = '' THEN
                                                                  EXIT;
                                                                IF VATRegNoSrvConfig.VATRegNoSrvIsEnabled THEN BEGIN
                                                                  VATRegistrationLogMgt.ValidateVATRegNoWithVIES(ResultRecordRef,Rec,"Primary Key",
                                                                    VATRegistrationLog."Account Type"::"Company Information","Country/Region Code");
                                                                  ResultRecordRef.SETTABLE(Rec);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Tax Registration No. }
    { 20  ;   ;Registration No.    ;Text20        ;CaptionML=ENU=Registration No. }
    { 21  ;   ;Telex Answer Back   ;Text20        ;CaptionML=ENU=Telex Answer Back }
    { 22  ;   ;Ship-to Name        ;Text100       ;CaptionML=ENU=Ship-to Name }
    { 23  ;   ;Ship-to Name 2      ;Text50        ;CaptionML=ENU=Ship-to Name 2 }
    { 24  ;   ;Ship-to Address     ;Text100       ;CaptionML=ENU=Ship-to Address }
    { 25  ;   ;Ship-to Address 2   ;Text50        ;CaptionML=ENU=Ship-to Address 2 }
    { 26  ;   ;Ship-to City        ;Text30        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".City
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".City WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidateCity(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to City }
    { 27  ;   ;Ship-to Contact     ;Text100       ;CaptionML=ENU=Ship-to Contact }
    { 28  ;   ;Location Code       ;Code10        ;TableRelation=Location WHERE (Use As In-Transit=CONST(No));
                                                   CaptionML=ENU=Location Code }
    { 29  ;   ;Picture             ;BLOB          ;OnValidate=BEGIN
                                                                PictureUpdated := TRUE;
                                                              END;

                                                   CaptionML=ENU=Picture;
                                                   SubType=Bitmap }
    { 30  ;   ;Post Code           ;Code20        ;TableRelation=IF (Country/Region Code=CONST()) "Post Code".Code
                                                                 ELSE IF (Country/Region Code=FILTER(<>'')) "Post Code".Code WHERE (Country/Region Code=FIELD(Country/Region Code));
                                                   OnValidate=VAR
                                                                O365SalesInitialSetup@1020000 : Record 2110;
                                                                CountryRegionCode@1020001 : Code[10];
                                                              BEGIN
                                                                IF O365SalesInitialSetup.GET AND O365SalesInitialSetup."Is initialized" THEN BEGIN
                                                                  CountryRegionCode := "Country/Region Code";
                                                                  PostCode.ValidatePostCode(City,"Post Code",County,CountryRegionCode,(CurrFieldNo <> 0) AND GUIALLOWED);
                                                                  EXIT;
                                                                END;

                                                                PostCode.ValidatePostCode(City,"Post Code",County,"Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   OnLookup=BEGIN
                                                              PostCode.LookupPostCode(City,"Post Code",County,"Country/Region Code");
                                                            END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=ZIP Code }
    { 31  ;   ;County              ;Text30        ;CaptionML=ENU=State;
                                                   CaptionClass='5,1,' + "Country/Region Code" }
    { 32  ;   ;Ship-to Post Code   ;Code20        ;TableRelation=IF (Ship-to Country/Region Code=CONST()) "Post Code".Code
                                                                 ELSE IF (Ship-to Country/Region Code=FILTER(<>'')) "Post Code".Code WHERE (Country/Region Code=FIELD(Ship-to Country/Region Code));
                                                   OnValidate=BEGIN
                                                                PostCode.ValidatePostCode(
                                                                  "Ship-to City","Ship-to Post Code","Ship-to County","Ship-to Country/Region Code",(CurrFieldNo <> 0) AND GUIALLOWED);
                                                              END;

                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Ship-to ZIP Code }
    { 33  ;   ;Ship-to County      ;Text30        ;CaptionML=ENU=Ship-to State;
                                                   CaptionClass='5,1,' + "Ship-to Country/Region Code" }
    { 34  ;   ;E-Mail              ;Text80        ;OnValidate=VAR
                                                                MailManagement@1000 : Codeunit 9520;
                                                              BEGIN
                                                                MailManagement.ValidateEmailAddressField("E-Mail");
                                                              END;

                                                   ExtendedDatatype=E-Mail;
                                                   CaptionML=ENU=Email }
    { 35  ;   ;Home Page           ;Text80        ;ExtendedDatatype=URL;
                                                   CaptionML=ENU=Home Page }
    { 36  ;   ;Country/Region Code ;Code10        ;TableRelation=Country/Region;
                                                   OnValidate=BEGIN
                                                                PostCode.CheckClearPostCodeCityCounty(City,"Post Code",County,"Country/Region Code",xRec."Country/Region Code");
                                                              END;

                                                   CaptionML=ENU=Country/Region Code }
    { 37  ;   ;Ship-to Country/Region Code;Code10 ;TableRelation=Country/Region;
                                                   CaptionML=ENU=Ship-to Country/Region Code }
    { 38  ;   ;IBAN                ;Code50        ;OnValidate=BEGIN
                                                                CheckIBAN(IBAN);
                                                              END;

                                                   CaptionML=ENU=IBAN }
    { 39  ;   ;SWIFT Code          ;Code20        ;TableRelation="SWIFT Code";
                                                   ValidateTableRelation=No;
                                                   CaptionML=ENU=SWIFT Code }
    { 40  ;   ;Industrial Classification;Text30   ;CaptionML=ENU=Industrial Classification }
    { 41  ;   ;IC Partner Code     ;Code20        ;AccessByPermission=TableData 410=R;
                                                   CaptionML=ENU=IC Partner Code }
    { 42  ;   ;IC Inbox Type       ;Option        ;InitValue=Database;
                                                   OnValidate=BEGIN
                                                                IF "IC Inbox Type" = "IC Inbox Type"::Database THEN
                                                                  "IC Inbox Details" := '';
                                                              END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=ENU=IC Inbox Type;
                                                   OptionCaptionML=ENU=File Location,Database;
                                                   OptionString=File Location,Database }
    { 43  ;   ;IC Inbox Details    ;Text250       ;OnLookup=VAR
                                                              FileMgt@1000 : Codeunit 419;
                                                              FileName@1002 : Text;
                                                              FileName2@1003 : Text;
                                                              Path@1004 : Text;
                                                            BEGIN
                                                              TESTFIELD("IC Partner Code");
                                                              CASE "IC Inbox Type" OF
                                                                "IC Inbox Type"::"File Location":
                                                                  BEGIN
                                                                    IF "IC Inbox Details" = '' THEN
                                                                      FileName := STRSUBSTNO('%1.xml',"IC Partner Code")
                                                                    ELSE
                                                                      FileName := "IC Inbox Details" + STRSUBSTNO('\%1.xml',"IC Partner Code");

                                                                    FileName2 := FileMgt.SaveFileDialog(Text001,FileName,'');
                                                                    IF FileName <> FileName2 THEN BEGIN
                                                                      Path := FileMgt.GetDirectoryName(FileName2);
                                                                      IF Path <> '' THEN
                                                                        "IC Inbox Details" := COPYSTR(Path,1,250);
                                                                    END;
                                                                  END;
                                                              END;
                                                            END;

                                                   AccessByPermission=TableData 410=R;
                                                   CaptionML=ENU=IC Inbox Details }
    { 44  ;   ;Auto. Send Transactions;Boolean    ;AccessByPermission=TableData 410=R;
                                                   CaptionML=ENU=Auto. Send Transactions }
    { 46  ;   ;System Indicator    ;Option        ;CaptionML=ENU=System Indicator;
                                                   OptionCaptionML=ENU=None,Custom Text,Company Information,Company,Database,Company+Database;
                                                   OptionString=None,Custom Text,Company Information,Company,Database,Company+Database }
    { 47  ;   ;Custom System Indicator Text;Text250;
                                                   CaptionML=ENU=Custom System Indicator Text }
    { 48  ;   ;System Indicator Style;Option      ;CaptionML=ENU=System Indicator Style;
                                                   OptionCaptionML=ENU=Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9;
                                                   OptionString=Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9 }
    { 50  ;   ;Allow Blank Payment Info.;Boolean  ;CaptionML=ENU=Allow Blank Payment Info. }
    { 51  ;   ;Contact Person      ;Text50        ;CaptionML=ENU=Contact Person }
    { 90  ;   ;GLN                 ;Code13        ;OnValidate=VAR
                                                                GLNCalculator@1000 : Codeunit 1607;
                                                              BEGIN
                                                                IF GLN <> '' THEN
                                                                  IF NOT GLNCalculator.IsValidCheckDigit13(GLN) THEN
                                                                    ERROR(GLNCheckDigitErr,FIELDCAPTION(GLN));
                                                              END;

                                                   CaptionML=ENU=GLN;
                                                   Numeric=Yes }
    { 92  ;   ;EORI Number         ;Text40        ;CaptionML=ENU=EORI Number }
    { 95  ;   ;Use GLN in Electronic Document;Boolean;
                                                   CaptionML=ENU=Use GLN in Electronic Documents }
    { 96  ;   ;Picture - Last Mod. Date Time;DateTime;
                                                   CaptionML=ENU=Picture - Last Mod. Date Time;
                                                   Editable=No }
    { 98  ;   ;Last Modified Date Time;DateTime   ;CaptionML=ENU=Last Modified Date Time;
                                                   Editable=No }
    { 99  ;   ;Created DateTime    ;DateTime      ;CaptionML=ENU=Created DateTime;
                                                   Editable=No }
    { 100 ;   ;Demo Company        ;Boolean       ;CaptionML=ENU=Demo Company;
                                                   Editable=No }
    { 200 ;   ;Alternative Language Code;Code10   ;TableRelation=Language;
                                                   CaptionML=ENU=Alternative Language Code }
    { 300 ;   ;Brand Color Value   ;Code10        ;OnValidate=VAR
                                                                O365BrandColor@1000 : Record 2121;
                                                              BEGIN
                                                                O365BrandColor.FindColor(O365BrandColor,"Brand Color Value");
                                                                VALIDATE("Brand Color Code",O365BrandColor.Code);
                                                              END;

                                                   CaptionML=ENU=Brand Color Value }
    { 301 ;   ;Brand Color Code    ;Code20        ;TableRelation="O365 Brand Color";
                                                   OnValidate=BEGIN
                                                                SetBrandColorValue;
                                                              END;

                                                   CaptionML=ENU=Brand Color Code }
    { 5700;   ;Responsibility Center;Code10       ;TableRelation="Responsibility Center".Code;
                                                   ValidateTableRelation=Yes;
                                                   CaptionML=ENU=Responsibility Center }
    { 5791;   ;Check-Avail. Period Calc.;DateFormula;
                                                   AccessByPermission=TableData 27=R;
                                                   CaptionML=ENU=Check-Avail. Period Calc. }
    { 5792;   ;Check-Avail. Time Bucket;Option    ;AccessByPermission=TableData 27=R;
                                                   CaptionML=ENU=Check-Avail. Time Bucket;
                                                   OptionCaptionML=ENU=Day,Week,Month,Quarter,Year;
                                                   OptionString=Day,Week,Month,Quarter,Year }
    { 7600;   ;Base Calendar Code  ;Code10        ;TableRelation="Base Calendar";
                                                   CaptionML=ENU=Base Calendar Code }
    { 7601;   ;Cal. Convergence Time Frame;DateFormula;
                                                   InitValue=1Y;
                                                   AccessByPermission=TableData 7600=R;
                                                   CaptionML=ENU=Cal. Convergence Time Frame }
    { 7602;   ;Show Chart On RoleCenter;Boolean   ;CaptionML=ENU=Show Chart On RoleCenter }
    { 7603;   ;Sync with O365 Bus. profile;Boolean;OnValidate=VAR
                                                                GraphIntBusinessProfile@1001 : Codeunit 5442;
                                                              BEGIN
                                                                IF "Sync with O365 Bus. profile" THEN
                                                                  IF IsSyncEnabledForOtherCompany THEN
                                                                    ERROR(SyncAlreadyEnabledErr);

                                                                IF "Sync with O365 Bus. profile" THEN
                                                                  CODEUNIT.RUN(CODEUNIT::"Graph Data Setup")
                                                                ELSE
                                                                  GraphIntBusinessProfile.UpdateCompanyBusinessProfileId('');
                                                              END;

                                                   CaptionML=ENU=Sync with O365 Bus. profile }
    { 8000;   ;Id                  ;GUID          ;CaptionML=ENU=Id }
    { 10005;  ;Ship-to UPS Zone    ;Code2         ;CaptionML=ENU=Ship-to UPS Zone }
    { 10006;  ;UPS Shipper ID      ;Text15        ;CaptionML=ENU=UPS Shipper ID }
    { 10010;  ;Tax Area Code       ;Code20        ;TableRelation="Tax Area";
                                                   CaptionML=ENU=Tax Area Code }
    { 10015;  ;Tax Exemption No.   ;Text30        ;CaptionML=ENU=Tax Exemption No. }
    { 10016;  ;Federal ID No.      ;Text30        ;CaptionML=ENU=Federal ID No. }
    { 10017;  ;QST Registration No.;Text20        ;CaptionML=ENU=QST Registration No. }
    { 10021;  ;Provincial Tax Area Code;Code20    ;TableRelation="Tax Area" WHERE (Country/Region=CONST(CA));
                                                   CaptionML=ENU=Provincial Tax Area Code }
    { 10022;  ;Software Identification Code;Code10;CaptionML=ENU=Software Identification Code }
    { 10023;  ;RFC No.             ;Code12        ;OnValidate=BEGIN
                                                                IF STRLEN("RFC No.") <> 12 THEN
                                                                  ERROR(Text10000,"RFC No.");
                                                              END;

                                                   CaptionML=ENU=RFC No. }
    { 10024;  ;CURP No.            ;Code18        ;OnValidate=BEGIN
                                                                IF STRLEN("CURP No.") <> 18 THEN
                                                                  ERROR(Text10001,"CURP No.");
                                                              END;

                                                   CaptionML=ENU=CURP No. }
    { 10025;  ;State Inscription   ;Text30        ;CaptionML=ENU=State Inscription }
    { 10026;  ;Tax Scheme          ;Text250       ;CaptionML=ENU=Tax Scheme }
    { 27000;  ;SAT Tax Regime Classification;Code10;
                                                   TableRelation="SAT Tax Scheme";
                                                   CaptionML=ENU=SAT Tax Regime Classification }
    { 27001;  ;SAT Postal Code     ;Code10        ;CaptionML=ENU=SAT ZIP Code }
    { 27002;  ;SCT Permission Type ;Code10        ;TableRelation="SAT Permission Type";
                                                   CaptionML=ENU=SCT Permission Type }
    { 27003;  ;SCT Permission Number;Code20       ;CaptionML=ENU=SCT Permission Number }
  }
  KEYS
  {
    {    ;Primary Key                             ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      PostCode@1000 : Record 225;
      Text000@1001 : TextConst 'ENU=The number that you entered may not be a valid International Bank Account Number (IBAN). Do you want to continue?';
      Text001@1002 : TextConst 'ENU=File Location for IC files';
      Text002@1003 : TextConst 'ENU=Before you can use Online Map, you must fill in the Online Map Setup window.\See Setting Up Online Map in Help.';
      Text10000@1020000 : TextConst 'ENU=%1 is not a valid RFC No.';
      Text10001@1020001 : TextConst 'ENU=%1 is not a valid CURP No.';
      NoPaymentInfoQst@1005 : TextConst '@@@="%1 = Company Information";ENU=No payment information is provided in %1. Do you want to update it now?';
      NoPaymentInfoMsg@1004 : TextConst 'ENU=No payment information is provided in %1. Review the report.';
      GLNCheckDigitErr@1006 : TextConst 'ENU=The %1 is not valid.';
      DevBetaModeTxt@1007 : TextConst '@@@={Locked};ENU=DEV_BETA';
      SyncAlreadyEnabledErr@1008 : TextConst 'ENU=Office 365 Business profile synchronization is already enabled for another company in the system.';
      ContactUsFullTxt@1010 : TextConst '@@@="%1 = phone number, %2 = email";ENU=Questions? Contact us at %1 or %2.';
      ContactUsShortTxt@1009 : TextConst '@@@="%1 = phone number or email";ENU=Questions? Contact us at %1.';
      PictureUpdated@1011 : Boolean;
      AlTelemetryCategoryTxt@1012 : TextConst '@@@={Locked};ENU=AL CompanyInfo';
      EmptyCountryRegionErr@1013 : TextConst '@@@={Locked};ENU=Country/Region code is not set, falling back to application default: %1.';

    [External]
    PROCEDURE CheckIBAN@1(IBANCode@1000 : Code[100]);
    VAR
      Modulus97@1001 : Integer;
      I@1002 : Integer;
    BEGIN
      IF IBANCode = '' THEN
        EXIT;
      IBANCode := DELCHR(IBANCode);
      Modulus97 := 97;
      IF (STRLEN(IBANCode) <= 5) OR (STRLEN(IBANCode) > 34) THEN
        IBANError;
      IF IsDigit(IBANCode[1]) OR IsDigit(IBANCode[2]) THEN
        IBANError;
      ConvertIBAN(IBANCode);
      WHILE STRLEN(IBANCode) > 6 DO
        IBANCode := CalcModulus(COPYSTR(IBANCode,1,6),Modulus97) + COPYSTR(IBANCode,7);
      EVALUATE(I,IBANCode);
      IF (I MOD Modulus97) <> 1 THEN
        IBANError;
    END;

    LOCAL PROCEDURE ConvertIBAN@4(VAR IBANCode@1000 : Code[100]);
    VAR
      I@1002 : Integer;
    BEGIN
      IBANCode := COPYSTR(IBANCode,5) + COPYSTR(IBANCode,1,4);
      I := 0;
      WHILE I < STRLEN(IBANCode) DO BEGIN
        I := I + 1;
        IF ConvertLetter(IBANCode,COPYSTR(IBANCode,I,1),I) THEN
          I := 0;
      END;
    END;

    LOCAL PROCEDURE CalcModulus@3(Number@1000 : Code[10];Modulus97@1001 : Integer) : Code[10];
    VAR
      I@1002 : Integer;
    BEGIN
      EVALUATE(I,Number);
      I := I MOD Modulus97;
      IF I = 0 THEN
        EXIT('');
      EXIT(FORMAT(I));
    END;

    LOCAL PROCEDURE ConvertLetter@5(VAR IBANCode@1000 : Code[100];Letter@1001 : Code[1];LetterPlace@1002 : Integer) : Boolean;
    VAR
      Letter2@1003 : Code[2];
      LetterCharInt@1004 : Integer;
    BEGIN
      // CFR assumes letter to number conversion where A = 10, B = 11, ... , Y = 34, Z = 35
      // We must ignore country alphabet feature like Estonian
      LetterCharInt := Letter[1];
      IF LetterCharInt IN [65..90] THEN BEGIN
        Letter2 := FORMAT(LetterCharInt - 55,9);
        IF LetterPlace = 1 THEN
          IBANCode := Letter2 + COPYSTR(IBANCode,2)
        ELSE BEGIN
          IF LetterPlace = STRLEN(IBANCode) THEN
            IBANCode := COPYSTR(IBANCode,1,LetterPlace - 1) + Letter2
          ELSE
            IBANCode :=
              COPYSTR(IBANCode,1,LetterPlace - 1) + Letter2 + COPYSTR(IBANCode,LetterPlace + 1);
        END;
        EXIT(TRUE);
      END;
      IF IsDigit(Letter[1]) THEN
        EXIT(FALSE);

      IBANError;
    END;

    LOCAL PROCEDURE IsDigit@26(LetterChar@1000 : Char) : Boolean;
    VAR
      Letter@1001 : Code[1];
    BEGIN
      Letter[1] := LetterChar;
      EXIT((Letter >= '0') AND (Letter <= '9'))
    END;

    LOCAL PROCEDURE IBANError@12();
    VAR
      ConfirmManagement@1000 : Codeunit 27;
    BEGIN
      IF NOT ConfirmManagement.ConfirmProcess(Text000,TRUE) THEN
        ERROR('');
    END;

    [External]
    PROCEDURE DisplayMap@7();
    VAR
      MapPoint@1001 : Record 800;
      MapMgt@1000 : Codeunit 802;
    BEGIN
      IF MapPoint.FINDFIRST THEN
        MapMgt.MakeSelection(DATABASE::"Company Information",GETPOSITION)
      ELSE
        MESSAGE(Text002);
    END;

    LOCAL PROCEDURE IsPaymentInfoAvailble@10() : Boolean;
    BEGIN
      EXIT(
        (("Giro No." + IBAN + "Bank Name" + "Bank Branch No." + "Bank Account No." + "SWIFT Code") <> '') OR
        "Allow Blank Payment Info.");
    END;

    [External]
    PROCEDURE GetRegistrationNumber@14() : Text;
    BEGIN
      EXIT("Registration No.");
    END;

    [External]
    PROCEDURE GetRegistrationNumberLbl@15() : Text;
    BEGIN
      EXIT(FIELDCAPTION("Registration No."));
    END;

    [External]
    PROCEDURE GetVATRegistrationNumber@13() : Text;
    BEGIN
      EXIT("VAT Registration No.");
    END;

    [External]
    PROCEDURE GetVATRegistrationNumberLbl@11() : Text;
    BEGIN
      IF Name = '' THEN // Is the record loaded?
        GET;
      IF "VAT Registration No." = '' THEN
        EXIT('');
      EXIT(FIELDCAPTION("VAT Registration No."));
    END;

    [External]
    PROCEDURE GetLegalOffice@16() : Text;
    BEGIN
      EXIT('');
    END;

    [External]
    PROCEDURE GetLegalOfficeLbl@17() : Text;
    BEGIN
      EXIT('');
    END;

    [External]
    PROCEDURE GetCustomGiro@20() : Text;
    BEGIN
      EXIT('');
    END;

    [External]
    PROCEDURE GetCustomGiroLbl@19() : Text;
    BEGIN
      EXIT('');
    END;

    [External]
    PROCEDURE VerifyAndSetPaymentInfo@6();
    VAR
      ConfirmManagement@1001 : Codeunit 27;
      CompanyInformationPage@1000 : Page 1;
    BEGIN
      GET;
      IF IsPaymentInfoAvailble THEN
        EXIT;
      IF ConfirmManagement.ConfirmProcess(STRSUBSTNO(NoPaymentInfoQst,TABLECAPTION),TRUE) THEN BEGIN
        CompanyInformationPage.SETRECORD(Rec);
        CompanyInformationPage.EDITABLE(TRUE);
        IF CompanyInformationPage.RUNMODAL = ACTION::OK THEN
          CompanyInformationPage.GETRECORD(Rec);
      END;
      IF NOT IsPaymentInfoAvailble THEN
        MESSAGE(NoPaymentInfoMsg,TABLECAPTION);
    END;

    [External]
    PROCEDURE GetSystemIndicator@8(VAR Text@1000 : Text[250];VAR Style@1001 : 'Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9');
    BEGIN
      Style := "System Indicator Style";
      CASE "System Indicator" OF
        "System Indicator"::None:
          Text := '';
        "System Indicator"::"Custom Text":
          Text := "Custom System Indicator Text";
        "System Indicator"::"Company Information":
          Text := Name;
        "System Indicator"::Company:
          Text := COMPANYNAME;
        "System Indicator"::Database:
          Text := GetDatabaseIndicatorText(FALSE);
        "System Indicator"::"Company+Database":
          Text := GetDatabaseIndicatorText(TRUE);
      END;
      OnAfterGetSystemIndicator(Text,Style)
    END;

    LOCAL PROCEDURE GetDatabaseIndicatorText@9(IncludeCompany@1003 : Boolean) : Text[250];
    VAR
      ActiveSession@1000 : Record 2000000110;
      Text@1002 : Text[1024];
    BEGIN
      ActiveSession.SETRANGE("Server Instance ID",SERVICEINSTANCEID);
      ActiveSession.SETRANGE("Session ID",SESSIONID);
      ActiveSession.FINDFIRST;
      Text := ActiveSession."Database Name" + ' - ' + ActiveSession."Server Computer Name";
      IF IncludeCompany THEN
        Text := COMPANYNAME + ' - ' + Text;
      IF STRLEN(Text) > 250 THEN
        EXIT(COPYSTR(Text,1,247) + '...');
      EXIT(Text)
    END;

    [External]
    PROCEDURE GetCountryRegionCode@2(CountryRegionCode@1000 : Code[10]) : Code[10];
    BEGIN
      CASE CountryRegionCode OF
        '',"Country/Region Code":
          EXIT("Country/Region Code");
        ELSE
          EXIT(CountryRegionCode);
      END;
    END;

    [External]
    PROCEDURE GetCompanyCountryRegionCode@25() : Code[10];
    VAR
      MediaResourcesMgt@1000 : Codeunit 9755;
      CountryRegionCode@1001 : Code[10];
    BEGIN
      IF "Country/Region Code" <> '' THEN
        EXIT("Country/Region Code");

      CountryRegionCode := UPPERCASE(MediaResourcesMgt.ReadTextFromMediaResource('ApplicationCountry'));

      SENDTRACETAG(
        '00007HP',
        AlTelemetryCategoryTxt,
        VERBOSITY::Normal,
        STRSUBSTNO(EmptyCountryRegionErr,CountryRegionCode),
        DATACLASSIFICATION::SystemMetadata);

      EXIT(CountryRegionCode);
    END;

    [External]
    PROCEDURE GetDevBetaModeTxt@18() : Text[250];
    BEGIN
      EXIT(DevBetaModeTxt);
    END;

    PROCEDURE IsCanada@1020000() : Boolean;
    BEGIN
      IF GET THEN
        IF "Country/Region Code" <> '' THEN
          EXIT("Country/Region Code" = 'CA');

      // Missing data from company setup, fallback to lcy code
      EXIT(InferIsCanadaFromCurrency);
    END;

    PROCEDURE InferIsCanadaFromCurrency@1030000() : Boolean;
    VAR
      GeneralLedgerSetup@1030000 : Record 98;
    BEGIN
      IF GeneralLedgerSetup.GET AND (GeneralLedgerSetup."LCY Code" = 'CAD') THEN BEGIN
        IF WRITEPERMISSION THEN
          IF GET AND ("Country/Region Code" = '') THEN BEGIN
            VALIDATE("Country/Region Code",'CA');
            MODIFY(TRUE);
          END;
        EXIT(TRUE);
      END;

      EXIT(FALSE)
    END;

    [External]
    PROCEDURE GetContactUsText@23() : Text;
    BEGIN
      IF ("Phone No." <> '') AND ("E-Mail" <> '') THEN
        EXIT(STRSUBSTNO(ContactUsFullTxt,"Phone No.","E-Mail"));

      IF "Phone No." <> '' THEN
        EXIT(STRSUBSTNO(ContactUsShortTxt,"Phone No."));

      IF "E-Mail" <> '' THEN
        EXIT(STRSUBSTNO(ContactUsShortTxt,"E-Mail"));

      EXIT('');
    END;

    [External]
    PROCEDURE IsSyncEnabledForOtherCompany@21() SyncEnabled : Boolean;
    VAR
      CompanyInformation@1000 : Record 79;
      Company@1001 : Record 2000000006;
    BEGIN
      Company.SETFILTER(Name,'<>%1',COMPANYNAME);
      IF Company.FINDSET THEN BEGIN
        REPEAT
          CompanyInformation.CHANGECOMPANY(Company.Name);
          IF CompanyInformation.GET THEN
            SyncEnabled := CompanyInformation."Sync with O365 Bus. profile";
        UNTIL (Company.NEXT = 0) OR SyncEnabled;
      END;
    END;

    LOCAL PROCEDURE SetBrandColorValue@22();
    VAR
      O365BrandColor@1000 : Record 2121;
    BEGIN
      IF "Brand Color Code" <> '' THEN BEGIN
        O365BrandColor.GET("Brand Color Code");
        "Brand Color Value" := O365BrandColor."Color Value";
      END ELSE
        "Brand Color Value" := '';
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterGetSystemIndicator@24(VAR Text@1000 : Text[250];VAR Style@1001 : 'Standard,Accent1,Accent2,Accent3,Accent4,Accent5,Accent6,Accent7,Accent8,Accent9');
    BEGIN
    END;

    PROCEDURE CheckIfMissingMXEInvRequiredFields@1310000() : Boolean;
    BEGIN
      GET;
      EXIT(("CURP No." = '') AND ("State Inscription" = '') AND
        ("Tax Scheme" = '') AND ("Post Code" = '') AND ("RFC No." = ''));
    END;

    BEGIN
    END.
  }
}

