OBJECT Table 1610 Office Add-in
{
  OBJECT-PROPERTIES
  {
    Date=03/24/19;
    Time=12:00:00 PM;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    CaptionML=ENU=Office Add-in;
  }
  FIELDS
  {
    { 1   ;   ;Application ID      ;GUID          ;CaptionML=ENU=Application ID }
    { 2   ;   ;Name                ;Text50        ;CaptionML=ENU=Name }
    { 3   ;   ;Description         ;Text250       ;CaptionML=ENU=Description }
    { 5   ;   ;Version             ;Text20        ;CaptionML=ENU=Version }
    { 6   ;   ;Manifest Codeunit   ;Integer       ;CaptionML=ENU=Manifest Codeunit }
    { 10  ;   ;Deployment Date     ;Date          ;CaptionML=ENU=Deployment Date }
    { 12  ;   ;Default Manifest    ;BLOB          ;CaptionML=ENU=Default Manifest }
    { 13  ;   ;Manifest            ;BLOB          ;CaptionML=ENU=Manifest }
    { 14  ;   ;Breaking            ;Boolean       ;CaptionML=ENU=Breaking }
  }
  KEYS
  {
    {    ;Application ID                          ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {

    [External]
    PROCEDURE GetAddins@1() : Boolean;
    VAR
      AddinManifestManagement@1000 : Codeunit 1652;
    BEGIN
      IF ISEMPTY THEN
        AddinManifestManagement.CreateDefaultAddins(Rec);

      EXIT(FINDSET);
    END;

    [External]
    PROCEDURE GetDefaultManifestText@1001() ManifestText : Text;
    VAR
      ManifestInStream@1000 : InStream;
    BEGIN
      CALCFIELDS("Default Manifest");
      "Default Manifest".CREATEINSTREAM(ManifestInStream,TEXTENCODING::UTF8);
      ManifestInStream.READ(ManifestText);
    END;

    [External]
    PROCEDURE SetDefaultManifestText@1003(ManifestText@1000 : Text);
    VAR
      ManifestOutStream@1001 : OutStream;
    BEGIN
      CLEAR("Default Manifest");
      "Default Manifest".CREATEOUTSTREAM(ManifestOutStream,TEXTENCODING::UTF8);
      ManifestOutStream.WRITETEXT(ManifestText);
    END;

    [External]
    PROCEDURE IsAdminDeployed@1005() : Boolean;
    BEGIN
      EXIT(FORMAT("Deployment Date") <> '');
    END;

    [Internal]
    PROCEDURE IsBreakingChange@1013(UserVersion@1000 : Text) IsBreaking : Boolean;
    VAR
      Components@1003 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      UserComponents@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Array";
      Separator@1002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      TempString@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
      i@1006 : Integer;
    BEGIN
      Separator := '.';
      TempString := UserVersion;
      UserComponents := TempString.Split(Separator.ToCharArray);
      TempString := Version;
      Components := TempString.Split(Separator.ToCharArray);

      FOR i := 0 TO 2 DO
        IsBreaking := IsBreaking OR (FORMAT(UserComponents.GetValue(i)) <> FORMAT(Components.GetValue(i)));
    END;

    BEGIN
    END.
  }
}

