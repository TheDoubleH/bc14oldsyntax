OBJECT Report 5880 Calc. Phys. Invt. Order Lines
{
  OBJECT-PROPERTIES
  {
    Date=09/22/19;
    Time=12:00:00 PM;
    Version List=NAVW114.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Calc. Phys. Invt. Order Lines;
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 8129;    ;DataItem;                    ;
               DataItemTable=Table27;
               OnPreDataItem=BEGIN
                               PhysInvtOrderHeader.TESTFIELD("No.");
                               PhysInvtOrderHeader.TESTFIELD(Status,PhysInvtOrderHeader.Status::Open);

                               PhysInvtOrderHeader.LOCKTABLE;
                               PhysInvtOrderLine.LOCKTABLE;

                               PhysInvtOrderLine.RESET;
                               PhysInvtOrderLine.SETRANGE("Document No.",PhysInvtOrderHeader."No.");
                               IF PhysInvtOrderLine.FINDLAST THEN
                                 NextLineNo := PhysInvtOrderLine."Line No." + 10000
                               ELSE
                                 NextLineNo := 10000;

                               IF NOT HideValidationDialog THEN
                                 Window.OPEN(CalculatingLinesMsg + ItemNoMsg);

                               LineCount := 0;
                               ItemsBlocked := FALSE;

                               IF PhysInvtOrderHeader."Location Code" <> '' THEN
                                 SETRANGE("Location Filter",PhysInvtOrderHeader."Location Code");
                             END;

               OnAfterGetRecord=VAR
                                  Bin@1000 : Record 7354;
                                  IsHandled@1001 : Boolean;
                                BEGIN
                                  IF NOT HideValidationDialog THEN
                                    Window.UPDATE(1,"No.");

                                  LastItemNo := '';
                                  LastVariantCode := '';
                                  LastLocationCode := '';

                                  IF NOT Blocked THEN BEGIN
                                    ItemLedgEntry.RESET;
                                    ItemLedgEntry.SETCURRENTKEY(
                                      "Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date");
                                    ItemLedgEntry.SETRANGE("Item No.","No.");
                                    IF GETFILTER("Variant Filter") <> '' THEN
                                      COPYFILTER("Variant Filter",ItemLedgEntry."Variant Code");
                                    IF GETFILTER("Location Filter") <> '' THEN
                                      COPYFILTER("Location Filter",ItemLedgEntry."Location Code");
                                    IF GETFILTER("Date Filter") <> '' THEN
                                      COPYFILTER("Date Filter",ItemLedgEntry."Posting Date");
                                    IF ItemLedgEntry.FIND('-') THEN
                                      REPEAT
                                        IF (LastItemNo <> ItemLedgEntry."Item No.") OR
                                           (LastVariantCode <> ItemLedgEntry."Variant Code") OR
                                           (LastLocationCode <> ItemLedgEntry."Location Code")
                                        THEN BEGIN
                                          LastItemNo := ItemLedgEntry."Item No.";
                                          LastVariantCode := ItemLedgEntry."Variant Code";
                                          LastLocationCode := ItemLedgEntry."Location Code";

                                          IF PhysInvtTrackingMgt.LocationIsBinMandatory(ItemLedgEntry."Location Code") THEN BEGIN
                                            LastBinCode := '';
                                            WhseEntry.RESET;
                                            WhseEntry.SETCURRENTKEY("Item No.","Variant Code","Location Code","Bin Code");
                                            WhseEntry.SETRANGE("Item No.",ItemLedgEntry."Item No.");
                                            WhseEntry.SETRANGE("Variant Code",ItemLedgEntry."Variant Code");
                                            WhseEntry.SETRANGE("Location Code",ItemLedgEntry."Location Code");
                                            IF GETFILTER("Bin Filter") <> '' THEN
                                              COPYFILTER("Bin Filter",WhseEntry."Bin Code");
                                            IF WhseEntry.FIND('-') THEN
                                              REPEAT
                                                IF LastBinCode <> WhseEntry."Bin Code" THEN BEGIN
                                                  LastBinCode := WhseEntry."Bin Code";
                                                  Bin.SETRANGE("Location Code",WhseEntry."Location Code");
                                                  Bin.SETRANGE(Code,WhseEntry."Bin Code");
                                                  IsHandled := FALSE;
                                                  OnBeforeCreateNewPhysInvtOrderLineForWhseEntry(
                                                    Item,WhseEntry,ItemLedgEntry,PhysInvtOrderHeader,PhysInvtOrderLine,ErrorText,
                                                    NextLineNo,InvtCountCode,CycleSourceType,CalcQtyExpected,LastItemLedgEntryNo,LineCount,IsHandled);
                                                  IF NOT IsHandled THEN
                                                    IF (NOT Bin.ISEMPTY) AND
                                                       (PhysInvtOrderHeader.GetSamePhysInvtOrderLine(
                                                          ItemLedgEntry."Item No.",ItemLedgEntry."Variant Code",
                                                          ItemLedgEntry."Location Code",
                                                          WhseEntry."Bin Code",
                                                          ErrorText,
                                                          PhysInvtOrderLine) = 0)
                                                    THEN
                                                      CreateNewPhysInvtOrderLine;
                                                END;
                                              UNTIL WhseEntry.NEXT = 0;
                                          END ELSE
                                            IF PhysInvtOrderHeader.GetSamePhysInvtOrderLine(
                                                 ItemLedgEntry."Item No.",ItemLedgEntry."Variant Code",
                                                 ItemLedgEntry."Location Code",
                                                 '',// without BIN Code
                                                 ErrorText,
                                                 PhysInvtOrderLine) = 0
                                            THEN BEGIN
                                              WhseEntry.INIT;
                                              CreateNewPhysInvtOrderLine;
                                            END;
                                        END;
                                      UNTIL ItemLedgEntry.NEXT = 0;
                                  END ELSE
                                    ItemsBlocked := TRUE;
                                END;

               OnPostDataItem=BEGIN
                                IF NOT HideValidationDialog THEN BEGIN
                                  Window.CLOSE;
                                  IF ItemsBlocked THEN
                                    MESSAGE(BlockedItemMsg);
                                  MESSAGE(
                                    STRSUBSTNO(LinesCreatedMsg,LineCount));
                                END;
                              END;

               ReqFilterFields=No.,Inventory Posting Group,Gen. Prod. Posting Group,Variant Filter,Location Filter,Bin Filter,Date Filter }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 3   ;2   ;Field     ;
                  CaptionML=ENU=Calculate Qty. Expected;
                  ToolTipML=ENU=Specifies if you want the program to calculate and insert the contents of the field quantity expected for new created physical inventory order lines.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=CalcQtyExpected }

      { 1   ;2   ;Field     ;
                  CaptionML=ENU=Items Not on Inventory;
                  ToolTipML=ENU=Specifies if journal lines should be created for items that are not on inventory, that is, items where the value in the Qty. (Calculated) field is 0.;
                  ApplicationArea=#Basic,#Suite;
                  SourceExpr=ZeroQty }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      CalculatingLinesMsg@1000 : TextConst 'ENU=Calculating the order lines...\\';
      ItemNoMsg@1001 : TextConst '@@@="%1 = Item No.";ENU=Item No.  #1##################';
      LinesCreatedMsg@1002 : TextConst '@@@="%1 = counter";ENU=%1 new lines have been created.';
      BlockedItemMsg@1023 : TextConst 'ENU=There is at least one blocked item that was skipped.';
      PhysInvtOrderHeader@1003 : Record 5875;
      PhysInvtOrderLine@1004 : Record 5876;
      ItemLedgEntry@1005 : Record 32;
      WhseEntry@1006 : Record 7312;
      PhysInvtTrackingMgt@1007 : Codeunit 5889;
      Window@1008 : Dialog;
      ErrorText@1009 : Text[250];
      CycleSourceType@1010 : ' ,Item,SKU';
      InvtCountCode@1011 : Code[10];
      LastItemNo@1012 : Code[20];
      LastVariantCode@1013 : Code[10];
      LastLocationCode@1014 : Code[10];
      LastBinCode@1015 : Code[20];
      QtyExp@1016 : Decimal;
      LastItemLedgEntryNo@1017 : Integer;
      NextLineNo@1018 : Integer;
      LineCount@1019 : Integer;
      HideValidationDialog@1020 : Boolean;
      ZeroQty@1021 : Boolean;
      CalcQtyExpected@1022 : Boolean;
      ItemsBlocked@1024 : Boolean;

    [External]
    PROCEDURE SetPhysInvtOrderHeader@1000(NewPhysInvtOrderHeader@1000 : Record 5875);
    BEGIN
      PhysInvtOrderHeader := NewPhysInvtOrderHeader;
    END;

    [External]
    PROCEDURE InitializeRequest@2(ZeroQty2@1000 : Boolean;CalcQtyExpected2@1001 : Boolean);
    BEGIN
      ZeroQty := ZeroQty2;
      CalcQtyExpected := CalcQtyExpected2;
    END;

    [External]
    PROCEDURE InitializeInvtCount@3(InvtCountCode2@1000 : Code[10];CycleSourceType2@1001 : ' ,Item,SKU');
    BEGIN
      InvtCountCode := InvtCountCode2;
      CycleSourceType := CycleSourceType2;
    END;

    [External]
    PROCEDURE SetHideValidationDialog@4(NewHideValidationDialog@1000 : Boolean);
    BEGIN
      HideValidationDialog := NewHideValidationDialog;
    END;

    [External]
    PROCEDURE CreateNewPhysInvtOrderLine@5();
    BEGIN
      PhysInvtOrderLine.PrepareLine(
        PhysInvtOrderHeader."No.",NextLineNo,
        ItemLedgEntry."Item No.",ItemLedgEntry."Variant Code",ItemLedgEntry."Location Code",WhseEntry."Bin Code",
        InvtCountCode,CycleSourceType);
      PhysInvtOrderLine.CalcQtyAndLastItemLedgExpected(QtyExp,LastItemLedgEntryNo);
      IF (QtyExp <> 0) OR ZeroQty THEN BEGIN
        PhysInvtOrderLine.INSERT(TRUE);
        PhysInvtOrderLine.CreateDim(DATABASE::Item,PhysInvtOrderLine."Item No.");
        IF CalcQtyExpected THEN
          PhysInvtOrderLine.CalcQtyAndTrackLinesExpected;
        OnBeforePhysInvtOrderLineModify(PhysInvtOrderLine,CalcQtyExpected);
        PhysInvtOrderLine.MODIFY;
        NextLineNo := NextLineNo + 10000;
        LineCount := LineCount + 1;
      END;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeCreateNewPhysInvtOrderLineForWhseEntry@8(Item@1000 : Record 27;WarehouseEntry@1001 : Record 7312;ItemLedgerEntry@1002 : Record 32;PhysInvtOrderHeader@1004 : Record 5875;VAR PhysInvtOrderLine@1003 : Record 5876;VAR ErrorText@1007 : Text[250];VAR NextLineNo@1008 : Integer;InvtCountCode@1005 : Code[10];CycleSourceType@1006 : ' ,Item,SKU';CalcQtyExpected@1009 : Boolean;VAR LastItemLedgEntryNo@1010 : Integer;VAR LineCount@1011 : Integer;VAR IsHandled@1012 : Boolean);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforePhysInvtOrderLineModify@1(VAR PhysInvtOrderLine@1000 : Record 5876;CalcQtyExpected@1001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

