OBJECT Table 9009 Permission Set Buffer
{
  OBJECT-PROPERTIES
  {
    Date=10/02/20;
    Time=12:00:00 PM;
    Version List=NAVW114.18;
  }
  PROPERTIES
  {
    DataPerCompany=No;
    ReplicateData=No;
    CaptionML=ENU=Permission Set Buffer;
  }
  FIELDS
  {
    { 1   ;   ;Scope               ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Scope;
                                                   OptionCaptionML=ENU=System,Tenant;
                                                   OptionString=System,Tenant }
    { 2   ;   ;App ID              ;GUID          ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=App ID }
    { 3   ;   ;Role ID             ;Code20        ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Role ID }
    { 4   ;   ;Name                ;Text30        ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Name }
    { 5   ;   ;App Name            ;Text250       ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=App Name }
    { 6   ;   ;Type                ;Option        ;DataClassification=SystemMetadata;
                                                   CaptionML=ENU=Type;
                                                   OptionCaptionML=ENU=User-Defined,Extension,System;
                                                   OptionString=User-Defined,Extension,System }
  }
  KEYS
  {
    {    ;Type,Role ID                            ;Clustered=Yes }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      IsTempErr@1000 : TextConst '@@@=%1 table caption;ENU=%1 should only be used as a temperory record.';
      CannotRenameTenantPermissionSetHavingUsageErr@1001 : TextConst 'ENU=You cannot rename a tenant permission set until it is used elsewhere, for example, in permission settings for a user or user group.';

    [External]
    PROCEDURE SetType@7();
    BEGIN
      Type := GetType(Scope,"App ID");
    END;

    [External]
    PROCEDURE GetType@1(ScopeOpt@1000 : Option;AppID@1001 : GUID) : Integer;
    BEGIN
      CASE TRUE OF
        (ScopeOpt = Scope::Tenant) AND ISNULLGUID(AppID):
          EXIT(Type::"User-Defined");
        ScopeOpt = Scope::Tenant:
          EXIT(Type::Extension);
        ELSE
          EXIT(Type::System);
      END;
    END;

    [External]
    PROCEDURE FillRecordBuffer@4();
    VAR
      AggregatePermissionSet@1000 : Record 2000000167;
      RoleIDFilter@1001 : Text;
    BEGIN
      IF NOT ISTEMPORARY THEN
        ERROR(IsTempErr,TABLECAPTION);

      RoleIDFilter := GETFILTER("Role ID");
      SETRANGE("Role ID");
      DELETEALL;
      IF RoleIDFilter <> '' THEN
        SETFILTER("Role ID",RoleIDFilter);

      IF AggregatePermissionSet.FINDSET THEN
        REPEAT
          // do not show permission sets for hidden extensions
          IF STRPOS(UPPERCASE(AggregatePermissionSet."App Name"),UPPERCASE('_Exclude_')) <> 1 THEN BEGIN
            INIT;
            "App ID" := AggregatePermissionSet."App ID";
            "Role ID" := AggregatePermissionSet."Role ID";
            Name := AggregatePermissionSet.Name;
            "App Name" := AggregatePermissionSet."App Name";
            Scope := AggregatePermissionSet.Scope;
            SetType;
            INSERT;
          END;
        UNTIL AggregatePermissionSet.NEXT = 0;
    END;

    PROCEDURE RenameTenantPermissionSet@11();
    VAR
      TenantPermissionSet@1001 : Record 2000000165;
      AccessControl@1002 : Record 2000000053;
      PermissionPagesMgt@1000 : Codeunit 9001;
    BEGIN
      IF xRec."Role ID" = '' THEN
        EXIT;
      IF xRec."Role ID" = "Role ID" THEN
        EXIT;
      PermissionPagesMgt.DisallowEditingPermissionSetsForNonAdminUsers;
      IF Type = Type::"User-Defined" THEN BEGIN
        AccessControl.SETRANGE("App ID",xRec."App ID");
        AccessControl.SETRANGE("Role ID",xRec."Role ID");
        IF NOT AccessControl.ISEMPTY THEN
          ERROR(CannotRenameTenantPermissionSetHavingUsageErr);

        TenantPermissionSet.GET(xRec."App ID",xRec."Role ID");
        TenantPermissionSet.RENAME(xRec."App ID","Role ID");
      END;
    END;

    BEGIN
    END.
  }
}

