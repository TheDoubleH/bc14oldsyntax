OBJECT Codeunit 5064 Email Logging Dispatcher
{
  OBJECT-PROPERTIES
  {
    Date=03/26/21;
    Time=12:00:00 PM;
    Version List=NAVW114.24;
  }
  PROPERTIES
  {
    TableNo=472;
    OnRun=VAR
            MarketingSetup@1003 : Record 5079;
            StorageFolder@1001 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder";
            QueueFolder@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder";
            WebCredentials@1002 : DotNet "'Microsoft.Exchange.WebServices, Version=15.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Exchange.WebServices.Data.WebCredentials";
          BEGIN
            IF ISNULLGUID(ID) THEN
              EXIT;

            SetErrorContext(Text101);
            CheckSetup(MarketingSetup);

            SetErrorContext(Text102);
            IF MarketingSetup."Exchange Account User Name" <> '' THEN
              MarketingSetup.CreateExchangeAccountCredentials(WebCredentials);

            IF NOT ExchangeWebServicesServer.Initialize2010(MarketingSetup."Autodiscovery E-Mail Address",
                 MarketingSetup."Exchange Service URL",WebCredentials,FALSE)
            THEN
              ERROR(Text001);

            SetErrorContext(Text103);
            IF NOT ExchangeWebServicesServer.GetEmailFolder(MarketingSetup.GetQueueFolderUID,QueueFolder) THEN
              ERROR(Text002,MarketingSetup."Queue Folder Path");

            SetErrorContext(Text104);
            IF NOT ExchangeWebServicesServer.GetEmailFolder(MarketingSetup.GetStorageFolderUID,StorageFolder) THEN
              ERROR(Text002,MarketingSetup."Storage Folder Path");

            RunEMailBatch(MarketingSetup."Email Batch Size",QueueFolder,StorageFolder);
          END;

  }
  CODE
  {
    VAR
      ExchangeWebServicesServer@1012 : Codeunit 5321;
      Text001@1001 : TextConst 'ENU=Autodiscovery of exchange service failed.';
      Text002@1000 : TextConst 'ENU=The %1 folder does not exist. Verify that the path to the folder is correct in the Marketing Setup window.';
      Text003@1003 : TextConst 'ENU=The queue or storage folder has not been initialized. Enter the folder path in the Marketing Setup window.';
      Text101@1004 : TextConst 'ENU=Validating setup';
      Text102@1005 : TextConst 'ENU=Initialization and autodiscovery of Exchange web service is in progress';
      Text103@1006 : TextConst 'ENU=Opening queue folder';
      Text104@1007 : TextConst 'ENU=Opening storage folder';
      Text105@1008 : TextConst 'ENU=Reading email messages';
      Text106@1009 : TextConst 'ENU=Checking next email message';
      Text107@1010 : TextConst 'ENU=Logging email messages';
      Text108@1011 : TextConst 'ENU=Deleting email message from queue';
      ErrorContext@1002 : Text;
      Text109@1014 : TextConst 'ENU=The interaction template for email messages has not been specified in the Interaction Template Setup window.';
      Text110@1013 : TextConst 'ENU=An interaction template for email messages has been specified in the Interaction Template Setup window, but the template does not exist.';
      MessageMovedTxt@1015 : TextConst 'ENU=The email message has been moved.';
      MessageCopiedTxt@1016 : TextConst 'ENU=The email message has been copied.';
      MessageDeletedTxt@1017 : TextConst 'ENU=The email message has been deleted.';
      CannotMoveMessageTxt@1018 : TextConst 'ENU=Cannot move the email message.';
      CannotCopyMessageTxt@1019 : TextConst 'ENU=Cannot copy the email message.';
      CannotDeleteMessageTxt@1020 : TextConst 'ENU=Cannot delete the email message.';
      CannotMoveMessageDetailedTxt@1021 : TextConst '@@@="%1 - Error message text; %2 - Callstack";ENU=Cannot move the email message. %1\\%2';
      CannotCopyMessageDetailedTxt@1022 : TextConst '@@@="%1 - Error message text; %2 - Callstack";ENU=Cannot copy the email message. %1\\%2';
      CannotDeleteMessageDetailedTxt@1023 : TextConst '@@@="%1 - Error message text; %2 - Callstack";ENU=Cannot delete the email message. %1\\%2';
      MessageAlreadyDeletedTxt@1024 : TextConst 'ENU=The email message has already been deleted.';
      MessageNotDeletedTxt@1025 : TextConst 'ENU=The email message has not been deleted.';
      MessageNotLoggedErr@1026 : TextConst '@@@=%1 - exception message;ENU=The email has not been logged because it could not be moved. %1.';
      CannotDeleteMessageErr@1027 : TextConst 'ENU=Cannot delete the email message.';
      EmailLoggingTelemetryCategoryTxt@1028 : TextConst 'ENU=AL Email Logging';
      NoLinkCommentMessageTxt@1029 : TextConst 'ENU=There is no link to the email because the email could not be copied.';
      NoLinkAttachmentMessageTxt@1030 : TextConst 'ENU=There is no link to the email because it could not be copied from the queue to the storage folder.';
      TextFileExtentionTxt@1031 : TextConst 'ENU=TXT';

    PROCEDURE CheckSetup@18(VAR MarketingSetup@1001 : Record 5079);
    VAR
      ErrorMsg@1000 : Text;
    BEGIN
      IF NOT CheckInteractionTemplateSetup(ErrorMsg) THEN
        ERROR(ErrorMsg);

      MarketingSetup.GET;
      IF NOT (MarketingSetup."Queue Folder UID".HASVALUE AND MarketingSetup."Storage Folder UID".HASVALUE) THEN
        ERROR(Text003);

      MarketingSetup.TESTFIELD("Autodiscovery E-Mail Address");
    END;

    [Internal]
    PROCEDURE RunEMailBatch@2(BatchSize@1000 : Integer;VAR QueueFolder@1009 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder";VAR StorageFolder@1008 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder");
    VAR
      QueueFindResults@1004 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IFindEmailsResults";
      QueueMessage@1002 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";
      StorageMessage@1007 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";
      QueueEnumerator@1003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      EmailsLeftInBatch@1005 : Integer;
      PageSize@1001 : Integer;
      RescanQueueFolder@1006 : Boolean;
      EmailMovedToStorage@1010 : Boolean;
    BEGIN
      EmailsLeftInBatch := BatchSize;
      REPEAT
        SetErrorContext(Text105);

        PageSize := 50;
        IF (BatchSize <> 0) AND (EmailsLeftInBatch < PageSize) THEN
          PageSize := EmailsLeftInBatch;
        // Keep using zero offset, since all processed messages are deleted from the queue folder
        QueueFindResults := QueueFolder.FindEmailMessages(PageSize,0);
        QueueEnumerator := QueueFindResults.GetEnumerator;
        WHILE QueueEnumerator.MoveNext DO BEGIN
          QueueMessage := QueueEnumerator.Current;
          RescanQueueFolder := ProcessMessage(QueueMessage,QueueFolder,StorageFolder,StorageMessage);
          SetErrorContext(Text108);
          EmailMovedToStorage := FALSE;
          IF NOT ISNULL(StorageMessage) THEN
            EmailMovedToStorage := QueueMessage.Id = StorageMessage.Id;
          IF NOT EmailMovedToStorage THEN
            QueueMessage.Delete;
          IF RescanQueueFolder THEN BEGIN
            QueueFolder.UpdateFolder;
            QueueFindResults := QueueFolder.FindEmailMessages(PageSize,0);
            QueueEnumerator := QueueFindResults.GetEnumerator;
          END;
          RescanQueueFolder := FALSE;
        END;
        EmailsLeftInBatch := EmailsLeftInBatch - PageSize;
        QueueFolder.UpdateFolder;
      UNTIL (NOT QueueFindResults.MoreAvailable) OR ((BatchSize <> 0) AND (EmailsLeftInBatch <= 0));
    END;

    LOCAL PROCEDURE DeleteMessage@13(VAR QueueMessage@1001 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";VAR QueueFolder@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder");
    VAR
      FoundMessage@1002 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";
      MessageId@1003 : Text;
    BEGIN
      MessageId := QueueMessage.Id;
      IF NOT TryDeleteMessage(QueueMessage) THEN BEGIN
        SENDTRACETAG('0000C40',EmailLoggingTelemetryCategoryTxt,VERBOSITY::Warning,
          CannotDeleteMessageTxt,DATACLASSIFICATION::SystemMetadata);
        QueueFolder.UpdateFolder;
        FoundMessage := QueueFolder.FindEmail(MessageId);
        IF NOT ISNULL(FoundMessage) THEN BEGIN
          SENDTRACETAG('0000C41',EmailLoggingTelemetryCategoryTxt,VERBOSITY::Error,
            MessageNotDeletedTxt,DATACLASSIFICATION::SystemMetadata);
          ERROR(CannotDeleteMessageErr);
        END;
        SENDTRACETAG('0000C42',EmailLoggingTelemetryCategoryTxt,VERBOSITY::Normal,
          MessageAlreadyDeletedTxt,DATACLASSIFICATION::SystemMetadata);
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryDeleteMessage@14(VAR QueueMessage@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage");
    BEGIN
      QueueMessage.Delete;
    END;

    [External]
    PROCEDURE GetErrorContext@1() : Text;
    BEGIN
      EXIT(ErrorContext);
    END;

    [External]
    PROCEDURE SetErrorContext@5(NewContext@1000 : Text);
    BEGIN
      ErrorContext := NewContext;
    END;

    [External]
    PROCEDURE ItemLinkedFromAttachment@10(MessageId@1002 : Text;VAR Attachment@1000 : Record 5062) : Boolean;
    BEGIN
      Attachment.SETRANGE("Email Message Checksum",Attachment.Checksum(MessageId));
      IF NOT Attachment.FINDSET THEN
        EXIT(FALSE);
      REPEAT
        IF Attachment.GetMessageID = MessageId THEN
          EXIT(TRUE);
      UNTIL (Attachment.NEXT = 0);
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE AttachmentRecordAlreadyExists@17(AttachmentNo@1002 : Text;VAR Attachment@1003 : Record 5062) : Boolean;
    VAR
      No@1001 : Integer;
    BEGIN
      IF EVALUATE(No,AttachmentNo) THEN
        EXIT(Attachment.GET(No));
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE SalespersonRecipients@12(Message@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";VAR SegLine@1001 : Record 5077) : Boolean;
    VAR
      RecepientEnumerator@1002 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      Recepient@1004 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailAddress";
      RecepientAddress@1007 : Text;
    BEGIN
      RecepientEnumerator := Message.Recipients.GetEnumerator;
      WHILE RecepientEnumerator.MoveNext DO BEGIN
        Recepient := RecepientEnumerator.Current;
        RecepientAddress := Recepient.Address;
        IF IsSalesperson(RecepientAddress,SegLine."Salesperson Code") THEN BEGIN
          SegLine.INSERT;
          SegLine."Line No." := SegLine."Line No." + 1;
        END;
      END;
      EXIT(NOT SegLine.ISEMPTY);
    END;

    LOCAL PROCEDURE ContactRecipients@11(Message@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";VAR SegLine@1001 : Record 5077) : Boolean;
    VAR
      RecepientEnumerator@1004 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      RecepientAddress@1007 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailAddress";
    BEGIN
      RecepientEnumerator := Message.Recipients.GetEnumerator;
      WHILE RecepientEnumerator.MoveNext DO BEGIN
        RecepientAddress := RecepientEnumerator.Current;
        IF IsContact(RecepientAddress.Address,SegLine) THEN BEGIN
          SegLine.INSERT;
          SegLine."Line No." := SegLine."Line No." + 1;
        END;
      END;
      EXIT(NOT SegLine.ISEMPTY);
    END;

    LOCAL PROCEDURE IsMessageToLog@3(QueueMessage@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";VAR SegLine@1003 : Record 5077;VAR Attachment@1001 : Record 5062) : Boolean;
    VAR
      Sender@1004 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailAddress";
    BEGIN
      IF QueueMessage.IsSensitive THEN
        EXIT(FALSE);

      Sender := QueueMessage.SenderAddress;
      IF Sender.IsEmpty OR (QueueMessage.RecipientsCount = 0) THEN
        EXIT(FALSE);

      IF AttachmentRecordAlreadyExists(QueueMessage.NavAttachmentNo,Attachment) THEN
        EXIT(TRUE);

      IF NOT GetInboundOutboundInteraction(Sender.Address,SegLine,QueueMessage) THEN
        EXIT(FALSE);

      EXIT(NOT SegLine.ISEMPTY);
    END;

    PROCEDURE UpdateSegLine@15(VAR SegLine@1000 : Record 5077;Emails@1001 : Code[10];Subject@1002 : Text;DateSent@1005 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";DateReceived@1006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";AttachmentNo@1003 : Integer);
    VAR
      LineDate@1007 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTime";
      DateTimeKind@1008 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.DateTimeKind";
      InformationFlow@1004 : Integer;
    BEGIN
      InformationFlow := SegLine."Information Flow";
      SegLine.VALIDATE("Interaction Template Code",Emails);
      SegLine."Information Flow" := InformationFlow;
      SegLine."Correspondence Type" := SegLine."Correspondence Type"::Email;
      SegLine.Description := COPYSTR(Subject,1,MAXSTRLEN(SegLine.Description));

      IF SegLine."Information Flow" = SegLine."Information Flow"::Outbound THEN BEGIN
        LineDate := DateSent;
        SegLine."Initiated By" := SegLine."Initiated By"::Us;
      END ELSE BEGIN
        LineDate := DateReceived;
        SegLine."Initiated By" := SegLine."Initiated By"::Them;
      END;

      // The date received from Exchange is UTC and to record the UTC date and time
      // using the AL functions requires datetime to be of the local date time kind.
      LineDate := LineDate.DateTime(LineDate.Ticks,DateTimeKind.Local);
      SegLine.Date := DT2DATE(LineDate);
      SegLine."Time of Interaction" := DT2TIME(LineDate);

      SegLine.Subject := COPYSTR(Subject,1,MAXSTRLEN(SegLine.Subject));
      SegLine."Attachment No." := AttachmentNo;
      SegLine.MODIFY;
    END;

    LOCAL PROCEDURE LogMessageAsInteraction@4(QueueMessage@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";StorageFolder@1001 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder";VAR SegLine@1002 : Record 5077;VAR Attachment@1006 : Record 5062;VAR StorageMessage@1010 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage");
    VAR
      ErrorMessage@1003 : Text;
    BEGIN
      IF NOT LogMessageAsInteractionAndMoveToStorage(QueueMessage,StorageFolder,SegLine,Attachment,StorageMessage,ErrorMessage) THEN
        ERROR(MessageNotLoggedErr,ErrorMessage);
      COMMIT;
    END;

    LOCAL PROCEDURE LogMessageAsInteractionAndMoveToStorage@22(QueueMessage@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";StorageFolder@1001 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder";VAR SegLine@1002 : Record 5077;VAR Attachment@1006 : Record 5062;VAR StorageMessage@1010 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";VAR ErrorMessage@1008 : Text) : Boolean;
    VAR
      InteractLogEntry@1009 : Record 5065;
      InteractionTemplateSetup@1011 : Record 5122;
      EntryNumbers@1012 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      Subject@1003 : Text;
      AttachmentNo@1005 : Integer;
      NextInteractLogEntryNo@1013 : Integer;
      EmailMovedToStorage@1004 : Boolean;
      EmailMoveError@1014 : Text;
    BEGIN
      IF NOT SegLine.ISEMPTY THEN BEGIN
        Subject := QueueMessage.Subject;

        Attachment.RESET;
        Attachment.LOCKTABLE;
        IF Attachment.FINDLAST THEN
          AttachmentNo := Attachment."No." + 1
        ELSE
          AttachmentNo := 1;

        Attachment.INIT;
        Attachment."No." := AttachmentNo;
        Attachment.INSERT;

        InteractionTemplateSetup.GET;
        SegLine.RESET;
        SegLine.FINDSET(TRUE);
        REPEAT
          UpdateSegLine(
            SegLine,InteractionTemplateSetup."E-Mails",Subject,QueueMessage.DateTimeSent,QueueMessage.DateTimeReceived,
            Attachment."No.");
        UNTIL SegLine.NEXT = 0;

        InteractLogEntry.LOCKTABLE;
        IF InteractLogEntry.FINDLAST THEN
          NextInteractLogEntryNo := InteractLogEntry."Entry No.";
        EntryNumbers := EntryNumbers.List;
        IF SegLine.FINDSET THEN
          REPEAT
            NextInteractLogEntryNo := NextInteractLogEntryNo + 1;
            InsertInteractionLogEntry(SegLine,NextInteractLogEntryNo);
            EntryNumbers.Add(NextInteractLogEntryNo);
          UNTIL SegLine.NEXT = 0;
      END;

      IF Attachment."No." <> 0 THEN BEGIN
        IF TryMoveMessage(QueueMessage,StorageFolder,EmailMovedToStorage) THEN
          IF EmailMovedToStorage THEN BEGIN
            SENDTRACETAG('0000ETD',EmailLoggingTelemetryCategoryTxt,VERBOSITY::Normal,
              MessageMovedTxt,DATACLASSIFICATION::SystemMetadata);
            StorageMessage := QueueMessage;
            LinkAttachmentToMessage(Attachment,StorageMessage);
            EXIT(TRUE);
          END;
        EmailMoveError := GETLASTERRORTEXT;
        SENDTRACETAG('0000ETE',EmailLoggingTelemetryCategoryTxt,VERBOSITY::Warning,
          CannotMoveMessageTxt,DATACLASSIFICATION::SystemMetadata);
        IF EmailMoveError <> '' THEN
          SENDTRACETAG('0000ETF',EmailLoggingTelemetryCategoryTxt,VERBOSITY::Normal,
            STRSUBSTNO(CannotMoveMessageDetailedTxt,EmailMoveError,GETLASTERRORCALLSTACK),DATACLASSIFICATION::CustomerContent);

        IF TryCopyMessage(QueueMessage,StorageFolder,StorageMessage) THEN BEGIN
          SENDTRACETAG('0000ETG',EmailLoggingTelemetryCategoryTxt,VERBOSITY::Normal,
            MessageCopiedTxt,DATACLASSIFICATION::SystemMetadata);
          LinkAttachmentToMessage(Attachment,StorageMessage);
          EXIT(TRUE);
        END;
        SENDTRACETAG('0000ETH',EmailLoggingTelemetryCategoryTxt,VERBOSITY::Warning,
          CannotCopyMessageTxt,DATACLASSIFICATION::SystemMetadata);
        SENDTRACETAG('0000ETI',EmailLoggingTelemetryCategoryTxt,VERBOSITY::Normal,
          STRSUBSTNO(CannotCopyMessageDetailedTxt,GETLASTERRORTEXT,GETLASTERRORCALLSTACK),DATACLASSIFICATION::CustomerContent);

        IF TryDeleteMessage(QueueMessage) THEN BEGIN
          SENDTRACETAG('0000ETJ',EmailLoggingTelemetryCategoryTxt,VERBOSITY::Normal,
            MessageDeletedTxt,DATACLASSIFICATION::SystemMetadata);
          AddNoLinkContent(Attachment);
          AddNoLinkComment(EntryNumbers);
          EXIT(TRUE);
        END;
        SENDTRACETAG('0000ETK',EmailLoggingTelemetryCategoryTxt,VERBOSITY::Warning,
          CannotDeleteMessageTxt,DATACLASSIFICATION::SystemMetadata);
        SENDTRACETAG('0000ETL',EmailLoggingTelemetryCategoryTxt,VERBOSITY::Normal,
          STRSUBSTNO(CannotDeleteMessageDetailedTxt,GETLASTERRORTEXT,GETLASTERRORCALLSTACK),DATACLASSIFICATION::CustomerContent);

        ErrorMessage := EmailMoveError;
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE LinkAttachmentToMessage@23(VAR Attachment@1001 : Record 5062;VAR StorageMessage@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage");
    VAR
      OutStream@1002 : OutStream;
      EMailMessageUrl@1003 : Text;
    BEGIN
      Attachment.LinkToMessage(StorageMessage.Id,StorageMessage.EntryId,TRUE);
      StorageMessage.NavAttachmentNo := FORMAT(Attachment."No.");
      StorageMessage.Update;

      Attachment."Email Message Url".CREATEOUTSTREAM(OutStream);
      EMailMessageUrl := StorageMessage.LinkUrl;
      IF EMailMessageUrl <> '' THEN
        OutStream.WRITE(EMailMessageUrl);
      Attachment.MODIFY;

      COMMIT;
    END;

    LOCAL PROCEDURE AddNoLinkContent@24(VAR Attachment@1000 : Record 5062);
    BEGIN
      Attachment."Storage Type" := Attachment."Storage Type"::Embedded;
      Attachment."Read Only" := TRUE;
      Attachment."File Extension" := TextFileExtentionTxt;
      Attachment.Write(NoLinkAttachmentMessageTxt);
      Attachment.MODIFY;
    END;

    LOCAL PROCEDURE AddNoLinkComment@25(VAR LogEntryNumbers@1000 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1");
    VAR
      InterLogEntryCommentLine@1001 : Record 5123;
      EntryNo@1002 : Integer;
      LineNo@1003 : Integer;
    BEGIN
      FOREACH EntryNo IN LogEntryNumbers DO BEGIN
        InterLogEntryCommentLine.SETRANGE("Entry No.",EntryNo);
        IF InterLogEntryCommentLine.FINDLAST THEN
          LineNo := InterLogEntryCommentLine."Line No." + 10000
        ELSE
          LineNo := 10000;
        InterLogEntryCommentLine.INIT;
        InterLogEntryCommentLine."Entry No." := EntryNo;
        InterLogEntryCommentLine."Line No." := LineNo;
        InterLogEntryCommentLine.Date := WORKDATE;
        InterLogEntryCommentLine.Comment := COPYSTR(NoLinkCommentMessageTxt,1,MAXSTRLEN(InterLogEntryCommentLine.Comment));
        InterLogEntryCommentLine.INSERT;
      END;
    END;

    [TryFunction]
    LOCAL PROCEDURE TryMoveMessage@27(VAR QueueMessage@1001 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";VAR StorageFolder@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder";VAR Moved@1002 : Boolean);
    BEGIN
      Moved := QueueMessage.MoveToFolder(StorageFolder);
    END;

    [TryFunction]
    LOCAL PROCEDURE TryCopyMessage@28(VAR QueueMessage@1001 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";VAR StorageFolder@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder";VAR StorageMessage@1003 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage");
    BEGIN
      StorageMessage := QueueMessage.CopyToFolder(StorageFolder);
    END;

    [External]
    PROCEDURE InsertInteractionLogEntry@7(SegLine@1000 : Record 5077;EntryNo@1001 : Integer);
    VAR
      InteractLogEntry@1002 : Record 5065;
    BEGIN
      InteractLogEntry.INIT;
      InteractLogEntry."Entry No." := EntryNo;
      InteractLogEntry."Correspondence Type" := InteractLogEntry."Correspondence Type"::Email;
      InteractLogEntry.CopyFromSegment(SegLine);
      InteractLogEntry."E-Mail Logged" := TRUE;
      InteractLogEntry.INSERT;
      OnAfterInsertInteractionLogEntry;
    END;

    [External]
    PROCEDURE IsSalesperson@16(Email@1000 : Text;VAR SalespersonCode@1001 : Code[20]) : Boolean;
    VAR
      Salesperson@1002 : Record 13;
    BEGIN
      IF Email = '' THEN
        EXIT(FALSE);

      IF STRLEN(Email) > MAXSTRLEN(Salesperson."Search E-Mail") THEN
        EXIT(FALSE);

      Salesperson.SETCURRENTKEY("Search E-Mail");
      Salesperson.SETRANGE("Search E-Mail",Email);
      IF Salesperson.FINDFIRST THEN BEGIN
        SalespersonCode := Salesperson.Code;
        EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    [External]
    PROCEDURE IsContact@19(EMail@1002 : Text;VAR SegLine@1000 : Record 5077) : Boolean;
    VAR
      Cont@1003 : Record 5050;
      ContAltAddress@1004 : Record 5051;
    BEGIN
      IF EMail = '' THEN
        EXIT(FALSE);

      IF STRLEN(EMail) > MAXSTRLEN(Cont."Search E-Mail") THEN
        EXIT(FALSE);

      Cont.SETCURRENTKEY("Search E-Mail");
      Cont.SETRANGE("Search E-Mail",EMail);
      IF Cont.FINDFIRST THEN BEGIN
        SegLine."Contact No." := Cont."No.";
        SegLine."Contact Company No." := Cont."Company No.";
        SegLine."Contact Alt. Address Code" := '';
        EXIT(TRUE);
      END;

      IF STRLEN(EMail) > MAXSTRLEN(ContAltAddress."Search E-Mail") THEN
        EXIT(FALSE);

      ContAltAddress.SETCURRENTKEY("Search E-Mail");
      ContAltAddress.SETRANGE("Search E-Mail",EMail);
      IF ContAltAddress.FINDFIRST THEN BEGIN
        SegLine."Contact No." := ContAltAddress."Contact No.";
        Cont.GET(ContAltAddress."Contact No.");
        SegLine."Contact Company No." := Cont."Company No.";
        SegLine."Contact Alt. Address Code" := ContAltAddress.Code;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE ProcessMessage@20(QueueMessage@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";QueueFolder@1007 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder";VAR StorageFolder@1002 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder";VAR StorageMessage@1004 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage") SimilarEmailsFound : Boolean;
    VAR
      TempSegLine@1001 : TEMPORARY Record 5077;
      Attachment@1003 : Record 5062;
    BEGIN
      TempSegLine.DELETEALL;
      TempSegLine.INIT;

      Attachment.INIT;
      Attachment.RESET;
      SimilarEmailsFound := FALSE;
      SetErrorContext(Text106);
      IF IsMessageToLog(QueueMessage,TempSegLine,Attachment) THEN BEGIN
        SetErrorContext(Text107);
        LogMessageAsInteraction(QueueMessage,StorageFolder,TempSegLine,Attachment,StorageMessage);
        IF NOT ISNULL(StorageMessage) THEN
          SimilarEmailsFound := ProcessSimilarMessages(StorageMessage,QueueFolder,StorageFolder,QueueMessage.Id);
      END;
    END;

    [External]
    PROCEDURE CheckInteractionTemplateSetup@21(VAR ErrorMsg@1000 : Text) : Boolean;
    VAR
      InteractionTemplateSetup@1001 : Record 5122;
      InteractionTemplate@1002 : Record 5064;
    BEGIN
      // Emails cannot be automatically logged unless the field Emails on Interaction Template Setup is set.
      InteractionTemplateSetup.GET;
      IF InteractionTemplateSetup."E-Mails" = '' THEN BEGIN
        ErrorMsg := Text109;
        EXIT(FALSE);
      END;

      // Since we have no guarantees that the Interaction Template for Emails exists, we check for it here.
      InteractionTemplate.SETFILTER(Code,'=%1',InteractionTemplateSetup."E-Mails");
      IF NOT InteractionTemplate.FINDFIRST THEN BEGIN
        ErrorMsg := Text110;
        EXIT(FALSE);
      END;

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ProcessSimilarMessages@8(VAR PrimaryStorageMessage@1018 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";VAR QueueFolder@1002 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder";VAR StorageFolder@1003 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailFolder";PrimaryQueueMessageId@1008 : Text) FolderUpdateNeeded : Boolean;
    VAR
      TempSegLine@1004 : TEMPORARY Record 5077;
      Attachment@1001 : Record 5062;
      FindResults@1007 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IFindEmailsResults";
      Enumerator@1006 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.IEnumerator";
      TargetMessage@1000 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";
      Sender@1011 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailAddress";
      StorageMessage@1012 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage";
      MessageId@1015 : Text;
      FolderOffset@1005 : Integer;
      EmailLogged@1010 : Boolean;
      EmailMovedToStorage@1009 : Boolean;
    BEGIN
      QueueFolder.UseSampleEmailAsFilter(PrimaryStorageMessage);
      FolderOffset := 0;
      REPEAT
        FindResults := QueueFolder.FindEmailMessages(50,FolderOffset);
        IF FindResults.TotalCount > 0 THEN BEGIN
          Enumerator := FindResults.GetEnumerator;
          WHILE Enumerator.MoveNext DO BEGIN
            TempSegLine.DELETEALL;
            TempSegLine.INIT;
            TargetMessage := Enumerator.Current;
            EmailLogged := FALSE;
            EmailMovedToStorage := FALSE;
            IF TargetMessage.Id <> PrimaryQueueMessageId THEN BEGIN
              Sender := TargetMessage.SenderAddress;
              IF (PrimaryStorageMessage.Subject = TargetMessage.Subject) AND
                 (PrimaryStorageMessage.Body = TargetMessage.Body)
              THEN BEGIN
                IF ExchangeWebServicesServer.CompareEmailAttachments(PrimaryStorageMessage,TargetMessage) THEN BEGIN
                  MessageId := PrimaryStorageMessage.Id;
                  IF ItemLinkedFromAttachment(MessageId,Attachment) THEN BEGIN
                    IF NOT TryDeleteMessage(PrimaryStorageMessage) THEN;
                    LogMessageAsInteraction(TargetMessage,StorageFolder,TempSegLine,Attachment,StorageMessage);
                    IF NOT ISNULL(StorageMessage) THEN BEGIN
                      PrimaryStorageMessage := StorageMessage;
                      EmailMovedToStorage := TargetMessage.Id = PrimaryStorageMessage.Id;
                    END;
                    IF NOT EmailMovedToStorage THEN
                      DeleteMessage(TargetMessage,QueueFolder);
                    EmailLogged := TRUE;
                  END;
                END
              END;
              IF NOT EmailLogged THEN
                IF AttachmentRecordAlreadyExists(TargetMessage.NavAttachmentNo,Attachment) THEN BEGIN
                  LogMessageAsInteraction(TargetMessage,StorageFolder,TempSegLine,Attachment,StorageMessage);
                  IF NOT ISNULL(StorageMessage) THEN BEGIN
                    PrimaryStorageMessage := StorageMessage;
                    EmailMovedToStorage := TargetMessage.Id = PrimaryStorageMessage.Id;
                  END;
                  IF NOT EmailMovedToStorage THEN
                    DeleteMessage(TargetMessage,QueueFolder);
                  EmailLogged := TRUE;
                END;
              IF EmailLogged THEN
                FolderUpdateNeeded := TRUE;
            END;
          END;
          IF FolderUpdateNeeded THEN
            FolderOffset := 0
          ELSE
            FolderOffset := FindResults.NextPageOffset;
        END;
      UNTIL NOT FindResults.MoreAvailable;
    END;

    LOCAL PROCEDURE GetInboundOutboundInteraction@26(SenderAddress@1000 : Text;VAR SegLine@1001 : Record 5077;VAR QueueMessage@1002 : DotNet "'Microsoft.Dynamics.Nav.EwsWrapper'.Microsoft.Dynamics.Nav.Exchange.IEmailMessage") : Boolean;
    BEGIN
      OnBeforeGetInboundOutboundInteraction(SenderAddress,SegLine);
      // Check if in- or out-bound and store sender and recipients in segment line(s)
      IF IsSalesperson(SenderAddress,SegLine."Salesperson Code") THEN BEGIN
        SegLine."Information Flow" := SegLine."Information Flow"::Outbound;
        IF NOT ContactRecipients(QueueMessage,SegLine) THEN
          EXIT(FALSE);
      END ELSE BEGIN
        IF IsContact(SenderAddress,SegLine) THEN BEGIN
          SegLine."Information Flow" := SegLine."Information Flow"::Inbound;
          IF NOT SalespersonRecipients(QueueMessage,SegLine) THEN
            EXIT(FALSE);
        END ELSE
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterInsertInteractionLogEntry@6();
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetInboundOutboundInteraction@9(SenderAddress@1000 : Text;VAR SegmentLine@1001 : Record 5077);
    BEGIN
    END;

    BEGIN
    END.
  }
}

