OBJECT Page 97 Purchase Quote Subform
{
  OBJECT-PROPERTIES
  {
    Date=04/29/22;
    Time=12:00:00 PM;
    Version List=NAVW114.36,NAVNA14.36;
  }
  PROPERTIES
  {
    CaptionML=ENU=Lines;
    MultipleNewLines=Yes;
    LinksAllowed=No;
    SourceTable=Table39;
    DelayedInsert=Yes;
    SourceTableView=WHERE(Document Type=FILTER(Quote));
    PageType=ListPart;
    AutoSplitKey=Yes;
    OnInit=VAR
             ApplicationAreaMgmtFacade@1001 : Codeunit 9179;
           BEGIN
             PurchasesPayablesSetup.GET;
             TempOptionLookupBuffer.FillBuffer(TempOptionLookupBuffer."Lookup Type"::Purchases);
             IsFoundation := ApplicationAreaMgmtFacade.IsFoundationEnabled;
             Currency.InitRoundingPrecision;
           END;

    OnOpenPage=VAR
                 TaxGroup@1020000 : Record 321;
               BEGIN
                 TaxGroupCodeVisible := NOT TaxGroup.ISEMPTY;
                 SetDimensionsVisibility;
               END;

    OnFindRecord=BEGIN
                   DocumentTotals.PurchaseCheckAndClearTotals(Rec,xRec,TotalPurchaseLine,VATAmount,InvoiceDiscountAmount,InvoiceDiscountPct);
                   EXIT(FIND(Which));
                 END;

    OnAfterGetRecord=BEGIN
                       ShowShortcutDimCode(ShortcutDimCode);
                       UpdateTypeText;
                       SetItemChargeFieldsStyle;
                     END;

    OnNewRecord=BEGIN
                  InitType;
                  // Default to Item for the first line and to previous line type for the others
                  IF ApplicationAreaMgmtFacade.IsFoundationEnabled THEN
                    IF xRec."Document No." = '' THEN
                      Type := Type::Item;

                  CLEAR(ShortcutDimCode);
                  UpdateTypeText;
                END;

    OnModifyRecord=BEGIN
                     DocumentTotals.PurchaseCheckIfDocumentChanged(Rec,xRec);
                   END;

    OnDeleteRecord=VAR
                     ReservePurchLine@1000 : Codeunit 99000834;
                   BEGIN
                     IF (Quantity <> 0) AND ItemExists("No.") THEN BEGIN
                       COMMIT;
                       IF NOT ReservePurchLine.DeleteLineConfirm(Rec) THEN
                         EXIT(FALSE);
                       ReservePurchLine.DeleteLine(Rec);
                     END;
                     DocumentTotals.PurchaseDocTotalsNotUpToDate;
                   END;

    OnAfterGetCurrRecord=BEGIN
                           GetTotalsPurchaseHeader;
                           CalculateTotals;
                           UpdateEditableOnRow;
                           UpdateTypeText;
                           SetItemChargeFieldsStyle;
                         END;

    ActionList=ACTIONS
    {
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 19      ;1   ;Action    ;
                      Name=SelectMultiItems;
                      AccessByPermission=TableData 27=R;
                      Ellipsis=Yes;
                      CaptionML=ENU=Select items;
                      ToolTipML=ENU=Add two or more items from the full list of your inventory items.;
                      ApplicationArea=#Basic,#Suite;
                      Image=NewItem;
                      OnAction=BEGIN
                                 SelectMultipleItems;
                               END;
                                }
      { 1906587504;1 ;ActionGroup;
                      CaptionML=ENU=F&unctions;
                      Image=Action }
      { 1901991404;2 ;Action    ;
                      AccessByPermission=TableData 90=R;
                      CaptionML=ENU=E&xplode BOM;
                      ToolTipML=ENU=Insert new lines for the components on the bill of materials, for example to sell the parent item as a kit. CAUTION: The line for the parent item will be deleted and represented by a description only. To undo, you must delete the component lines and add a line the parent item again.;
                      ApplicationArea=#Suite;
                      Image=ExplodeBOM;
                      OnAction=BEGIN
                                 ExplodeBOM;
                               END;
                                }
      { 1900295904;2 ;Action    ;
                      AccessByPermission=TableData 279=R;
                      CaptionML=ENU=Insert &Ext. Text;
                      ToolTipML=ENU=Insert the extended item description that is set up for the item that is being processed on the line.;
                      ApplicationArea=#Suite;
                      Image=Text;
                      OnAction=BEGIN
                                 InsertExtendedText(TRUE);
                               END;
                                }
      { 1907935204;1 ;ActionGroup;
                      CaptionML=ENU=&Line;
                      Image=Line }
      { 1903134404;2 ;ActionGroup;
                      CaptionML=ENU=Item Availability by;
                      Image=ItemAvailability }
      { 5       ;3   ;Action    ;
                      CaptionML=ENU=Event;
                      ToolTipML=ENU=View how the actual and the projected available balance of an item will develop over time according to supply and demand events.;
                      ApplicationArea=#Basic,#Suite;
                      Image=Event;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromPurchLine(Rec,ItemAvailFormsMgt.ByEvent)
                               END;
                                }
      { 1900609704;3 ;Action    ;
                      CaptionML=ENU=Period;
                      ToolTipML=ENU=View the projected quantity of the item over time according to time periods, such as day, week, or month.;
                      ApplicationArea=#Basic,#Suite;
                      Image=Period;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromPurchLine(Rec,ItemAvailFormsMgt.ByPeriod)
                               END;
                                }
      { 1904945204;3 ;Action    ;
                      CaptionML=ENU=Variant;
                      ToolTipML=ENU=View or edit the item's variants. Instead of setting up each color of an item as a separate item, you can set up the various colors as variants of the item.;
                      ApplicationArea=#Planning;
                      Image=ItemVariant;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromPurchLine(Rec,ItemAvailFormsMgt.ByVariant)
                               END;
                                }
      { 1902740304;3 ;Action    ;
                      AccessByPermission=TableData 14=R;
                      CaptionML=ENU=Location;
                      ToolTipML=ENU=View the actual and projected quantity of the item per location.;
                      ApplicationArea=#Location;
                      Image=Warehouse;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromPurchLine(Rec,ItemAvailFormsMgt.ByLocation)
                               END;
                                }
      { 3       ;3   ;Action    ;
                      AccessByPermission=TableData 5870=R;
                      CaptionML=ENU=BOM Level;
                      ToolTipML=ENU=View availability figures for items on bills of materials that show how many units of a parent item you can make based on the availability of child items.;
                      ApplicationArea=#Assembly;
                      Image=BOMLevel;
                      OnAction=BEGIN
                                 ItemAvailFormsMgt.ShowItemAvailFromPurchLine(Rec,ItemAvailFormsMgt.ByBOM)
                               END;
                                }
      { 1901033504;2 ;Action    ;
                      AccessByPermission=TableData 348=R;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=ENU=Dimensions;
                      ToolTipML=ENU=View or edit dimensions, such as area, project, or department, that you can assign to sales and purchase documents to distribute costs and analyze transaction history.;
                      ApplicationArea=#Suite;
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDimensions;
                               END;
                                }
      { 1901288104;2 ;Action    ;
                      CaptionML=ENU=Co&mments;
                      ToolTipML=ENU=View or add comments for the record.;
                      ApplicationArea=#Comments;
                      Image=ViewComments;
                      OnAction=BEGIN
                                 ShowLineComments;
                               END;
                                }
      { 1907184504;2 ;Action    ;
                      Name=ItemChargeAssignment;
                      AccessByPermission=TableData 5800=R;
                      CaptionML=ENU=Item Charge &Assignment;
                      ToolTipML=ENU=Assign additional direct costs, for example for freight, to the item on the line.;
                      ApplicationArea=#ItemCharges;
                      Image=ItemCosts;
                      OnAction=BEGIN
                                 ShowItemChargeAssgnt;
                                 SetItemChargeFieldsStyle;
                               END;
                                }
      { 1905987604;2 ;Action    ;
                      Name=Item Tracking Lines;
                      ShortCutKey=Shift+Ctrl+I;
                      CaptionML=ENU=Item &Tracking Lines;
                      ToolTipML=ENU=View or edit serial numbers and lot numbers that are assigned to the item on the document or journal line.;
                      ApplicationArea=#ItemTracking;
                      Image=ItemTrackingLines;
                      OnAction=BEGIN
                                 OpenItemTrackingLines;
                               END;
                                }
      { 15      ;2   ;Action    ;
                      Name=DocAttach;
                      CaptionML=ENU=Attachments;
                      ToolTipML=ENU=Add a file as an attachment. You can attach images as well as documents.;
                      ApplicationArea=#All;
                      Image=Attach;
                      OnAction=VAR
                                 DocumentAttachmentDetails@1000 : Page 1173;
                                 RecRef@1001 : RecordRef;
                               BEGIN
                                 RecRef.GETTABLE(Rec);
                                 DocumentAttachmentDetails.OpenForRecRef(RecRef);
                                 DocumentAttachmentDetails.RUNMODAL;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 1   ;1   ;Group     ;
                GroupType=Repeater }

    { 2   ;2   ;Field     ;
                ToolTipML=ENU=Specifies the line type.;
                ApplicationArea=#Advanced;
                SourceExpr=Type;
                OnValidate=BEGIN
                             NoOnAfterValidate;

                             UpdateEditableOnRow;
                             UpdateTypeText;
                             DeltaUpdateTotals;
                           END;
                            }

    { 67  ;2   ;Field     ;
                Name=FilteredTypeField;
                CaptionML=ENU=Type;
                ToolTipML=ENU=Specifies the type of entity that will be posted for this purchase line, such as Item or G/L Account.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=TypeAsText;
                TableRelation="Option Lookup Buffer"."Option Caption" WHERE (Lookup Type=CONST(Purchases));
                Visible=IsFoundation;
                Editable=CurrPageIsEditable;
                LookupPageID=Option Lookup List;
                OnValidate=BEGIN
                             IF TempOptionLookupBuffer.AutoCompleteOption(TypeAsText,TempOptionLookupBuffer."Lookup Type"::Purchases) THEN
                               VALIDATE(Type,TempOptionLookupBuffer.ID);
                             TempOptionLookupBuffer.ValidateOption(TypeAsText);
                             UpdateEditableOnRow;
                             UpdateTypeText;
                             DeltaUpdateTotals;
                           END;
                            }

    { 4   ;2   ;Field     ;
                ToolTipML=ENU=Specifies the number of a general ledger account, item, additional cost, or fixed asset, depending on what you selected in the Type field.;
                ApplicationArea=#Suite;
                SourceExpr="No.";
                OnValidate=BEGIN
                             ShowShortcutDimCode(ShortcutDimCode);
                             NoOnAfterValidate;

                             UpdateTypeText;
                             DeltaUpdateTotals;

                             CurrPage.UPDATE;
                           END;

                ShowMandatory=NOT IsCommentLine }

    { 36  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the cross-referenced item number. If you enter a cross reference between yours and your vendor's or customer's item number, then this number will override the standard item number when you enter the cross-reference number on a sales or purchase document.;
                ApplicationArea=#Suite;
                SourceExpr="Cross-Reference No.";
                Visible=FALSE;
                OnValidate=BEGIN
                             CrossReferenceNoOnAfterValidat;
                             NoOnAfterValidate;
                             DeltaUpdateTotals;
                           END;

                OnLookup=BEGIN
                           CrossReferenceNoLookUp;
                           InsertExtendedText(FALSE);
                           NoOnAfterValidate;
                           DeltaUpdateTotals;
                           OnCrossReferenceNoOnLookup(Rec);
                         END;
                          }

    { 20  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the variant of the item on the line.;
                ApplicationArea=#Planning;
                SourceExpr="Variant Code";
                Visible=FALSE;
                OnValidate=BEGIN
                             DeltaUpdateTotals;
                           END;
                            }

    { 38  ;2   ;Field     ;
                ToolTipML=ENU=Specifies that this item is a catalog item.;
                ApplicationArea=#Suite;
                SourceExpr=Nonstock;
                Visible=FALSE }

    { 14  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the tax specification of the involved item or resource to link transactions made for this record with the appropriate general ledger account according to the tax posting setup.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="VAT Prod. Posting Group";
                Visible=FALSE;
                OnValidate=BEGIN
                             DeltaUpdateTotals;
                           END;
                            }

    { 6   ;2   ;Field     ;
                ToolTipML=ENU=Specifies a description of the entry of the product to be purchased. To add a non-transactional text line, fill in the Description field only.;
                ApplicationArea=#Suite;
                SourceExpr=Description;
                OnValidate=BEGIN
                             DeltaUpdateTotals;
                             NoOnAfterValidate;
                           END;
                            }

    { 62  ;2   ;Field     ;
                ToolTipML=ENU=Specifies a code for the location where you want to receive the items.;
                ApplicationArea=#Location;
                SourceExpr="Location Code";
                Enabled=NOT IsCommentLine;
                Editable=NOT IsCommentLine }

    { 8   ;2   ;Field     ;
                ToolTipML=ENU=Specifies the number of units of the item specified on the line.;
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr=Quantity;
                Enabled=NOT IsCommentLine;
                Editable=NOT IsCommentLine;
                OnValidate=BEGIN
                             DeltaUpdateTotals;
                             IF PurchasesPayablesSetup."Calc. Inv. Discount" AND (Quantity = 0) THEN
                               CurrPage.UPDATE(FALSE);
                           END;

                ShowMandatory=(NOT IsCommentLine) AND ("No." <> '') }

    { 24  ;2   ;Field     ;
                ToolTipML=ENU=Specifies how each unit of the item or resource is measured, such as in pieces or hours. By default, the value in the Base Unit of Measure field on the item or resource card is inserted.;
                ApplicationArea=#Suite;
                SourceExpr="Unit of Measure Code";
                Enabled=UnitofMeasureCodeIsChangeable;
                Editable=UnitofMeasureCodeIsChangeable;
                OnValidate=BEGIN
                             DeltaUpdateTotals;
                           END;
                            }

    { 10  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the unit of measure.;
                ApplicationArea=#Suite;
                SourceExpr="Unit of Measure";
                Visible=FALSE }

    { 12  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the cost of one unit of the selected item or resource.;
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr="Direct Unit Cost";
                Enabled=NOT IsCommentLine;
                Editable=NOT IsCommentLine;
                OnValidate=BEGIN
                             DeltaUpdateTotals;
                           END;

                ShowMandatory=(NOT IsCommentLine) AND ("No." <> '') }

    { 58  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the percentage of the item's last purchase cost that includes indirect costs, such as freight that is associated with the purchase of the item.;
                ApplicationArea=#Suite;
                SourceExpr="Indirect Cost %";
                Visible=FALSE }

    { 56  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the cost, in $, of one unit of the item or resource on the line.;
                ApplicationArea=#Suite;
                SourceExpr="Unit Cost (LCY)";
                Visible=FALSE }

    { 60  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the price, in $, of one unit of the item or resource. You can enter a price manually or have it entered according to the Price/Profit Calculation field on the related card.;
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr="Unit Price (LCY)";
                Visible=FALSE }

    { 1020002;2;Field     ;
                ToolTipML=ENU=Specifies if this vendor charges you sales tax for purchases.;
                SourceExpr="Tax Liable";
                Visible=FALSE;
                Editable=FALSE }

    { 1020000;2;Field     ;
                ToolTipML=ENU=Specifies the tax area that is used to calculate and post sales tax.;
                ApplicationArea=#Suite;
                SourceExpr="Tax Area Code";
                OnValidate=BEGIN
                             DeltaUpdateTotals;
                           END;
                            }

    { 1020006;2;Field     ;
                ToolTipML=ENU=Specifies the tax group that is used to calculate and post sales tax.;
                SourceExpr="Tax Group Code";
                Visible=TaxGroupCodeVisible;
                OnValidate=BEGIN
                             DeltaUpdateTotals;
                           END;

                ShowMandatory=TRUE }

    { 1020004;2;Field     ;
                ToolTipML=ENU=Specifies a U.S. sales tax that is paid on items purchased by a company that are used by the company, instead of being sold to a customer.;
                SourceExpr="Use Tax";
                Visible=FALSE }

    { 16  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the discount percentage that is granted for the item on the line.;
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr="Line Discount %";
                Enabled=NOT IsCommentLine;
                Editable=NOT IsCommentLine;
                OnValidate=BEGIN
                             DeltaUpdateTotals;
                           END;
                            }

    { 30  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the net amount, excluding any invoice discount amount, that must be paid for products on the line.;
                ApplicationArea=#Suite;
                BlankZero=Yes;
                SourceExpr="Line Amount";
                Enabled=NOT IsCommentLine;
                Editable=NOT IsCommentLine;
                OnValidate=BEGIN
                             DeltaUpdateTotals;
                           END;
                            }

    { 1020008;2;Field     ;
                ToolTipML=ENU=Specifies the sum of the amounts in the Amount Including Tax fields on the associated purchase lines.;
                SourceExpr="Amount Including VAT" }

    { 50  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the discount amount that is granted for the item on the line.;
                ApplicationArea=#Suite;
                SourceExpr="Line Discount Amount";
                Visible=FALSE;
                OnValidate=BEGIN
                             DeltaUpdateTotals;
                           END;
                            }

    { 48  ;2   ;Field     ;
                ToolTipML=ENU=Specifies if the invoice line is included when the invoice discount is calculated.;
                ApplicationArea=#Suite;
                SourceExpr="Allow Invoice Disc.";
                Visible=FALSE;
                OnValidate=BEGIN
                             DeltaUpdateTotals;
                           END;
                            }

    { 22  ;2   ;Field     ;
                ToolTipML=ENU=Specifies that you can assign item charges to this line.;
                ApplicationArea=#ItemCharges;
                SourceExpr="Allow Item Charge Assignment";
                Visible=FALSE }

    { 32  ;2   ;Field     ;
                ToolTipML=ENU=Specifies how many units of the item charge will be assigned to the line.;
                ApplicationArea=#ItemCharges;
                SourceExpr="Qty. to Assign";
                StyleExpr=ItemChargeStyleExpression;
                OnDrillDown=BEGIN
                              CurrPage.SAVERECORD;
                              ShowItemChargeAssgnt;
                              UpdateForm(FALSE);
                            END;
                             }

    { 26  ;2   ;Field     ;
                ToolTipML=ENU=Specifies how much of the item charge that has been assigned.;
                ApplicationArea=#ItemCharges;
                BlankZero=Yes;
                SourceExpr="Qty. Assigned";
                OnDrillDown=BEGIN
                              CurrPage.SAVERECORD;
                              ShowItemChargeAssgnt;
                              UpdateForm(FALSE);
                            END;
                             }

    { 28  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the number of the related production order.;
                ApplicationArea=#Manufacturing;
                SourceExpr="Prod. Order No.";
                Visible=FALSE }

    { 18  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the number of the blanket order that the record originates from.;
                ApplicationArea=#Suite;
                SourceExpr="Blanket Order No.";
                Visible=FALSE }

    { 34  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the number of the blanket order line that the record originates from.;
                ApplicationArea=#Suite;
                SourceExpr="Blanket Order Line No.";
                Visible=FALSE }

    { 42  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the number of the item ledger entry that the document or journal line is applied to.;
                ApplicationArea=#Suite;
                SourceExpr="Appl.-to Item Entry";
                Visible=FALSE }

    { 66  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the code for Shortcut Dimension 1, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                ApplicationArea=#Dimensions;
                SourceExpr="Shortcut Dimension 1 Code";
                Visible=DimVisible1 }

    { 64  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the code for Shortcut Dimension 2, which is one of two global dimension codes that you set up in the General Ledger Setup window.;
                ApplicationArea=#Dimensions;
                SourceExpr="Shortcut Dimension 2 Code";
                Visible=DimVisible2 }

    { 300 ;2   ;Field     ;
                Name=ShortcutDimCode3;
                ApplicationArea=#Dimensions;
                SourceExpr=ShortcutDimCode[3];
                CaptionClass='1,2,3';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(3),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=DimVisible3;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(3,ShortcutDimCode[3]);

                             OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,3);
                           END;
                            }

    { 302 ;2   ;Field     ;
                Name=ShortcutDimCode4;
                ApplicationArea=#Dimensions;
                SourceExpr=ShortcutDimCode[4];
                CaptionClass='1,2,4';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(4),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=DimVisible4;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(4,ShortcutDimCode[4]);

                             OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,4);
                           END;
                            }

    { 304 ;2   ;Field     ;
                Name=ShortcutDimCode5;
                ApplicationArea=#Dimensions;
                SourceExpr=ShortcutDimCode[5];
                CaptionClass='1,2,5';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(5),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=DimVisible5;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(5,ShortcutDimCode[5]);

                             OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,5);
                           END;
                            }

    { 306 ;2   ;Field     ;
                Name=ShortcutDimCode6;
                ApplicationArea=#Dimensions;
                SourceExpr=ShortcutDimCode[6];
                CaptionClass='1,2,6';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(6),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=DimVisible6;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(6,ShortcutDimCode[6]);

                             OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,6);
                           END;
                            }

    { 308 ;2   ;Field     ;
                Name=ShortcutDimCode7;
                ApplicationArea=#Dimensions;
                SourceExpr=ShortcutDimCode[7];
                CaptionClass='1,2,7';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(7),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=DimVisible7;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(7,ShortcutDimCode[7]);

                             OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,7);
                           END;
                            }

    { 310 ;2   ;Field     ;
                Name=ShortcutDimCode8;
                ApplicationArea=#Dimensions;
                SourceExpr=ShortcutDimCode[8];
                CaptionClass='1,2,8';
                TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(8),
                                                            Dimension Value Type=CONST(Standard),
                                                            Blocked=CONST(No));
                Visible=DimVisible8;
                OnValidate=BEGIN
                             ValidateShortcutDimCode(8,ShortcutDimCode[8]);

                             OnAfterValidateShortcutDimCode(Rec,ShortcutDimCode,8);
                           END;
                            }

    { 40  ;1   ;Group     ;
                GroupType=Group }

    { 31  ;2   ;Group     ;
                GroupType=Group }

    { 9   ;3   ;Field     ;
                Name=AmountBeforeDiscount;
                CaptionML=ENU=Subtotal Excl. Tax;
                ToolTipML=ENU=Specifies the sum of the value in the Line Amount Excl. Tax field on all lines in the document.;
                ApplicationArea=#Suite;
                SourceExpr=TotalPurchaseLine."Line Amount";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=DocumentTotals.GetTotalLineAmountWithVATAndCurrencyCaption(Currency.Code,TotalPurchaseHeader."Prices Including VAT");
                Editable=FALSE }

    { 33  ;3   ;Field     ;
                Name=Invoice Discount Amount;
                CaptionML=ENU=Invoice Discount Amount;
                ToolTipML=ENU=Specifies the amount that is calculated and shown in the Invoice Discount Amount field. The invoice discount amount is deducted from the value shown in the Total Amount Incl. Tax field.;
                ApplicationArea=#Suite;
                SourceExpr=InvoiceDiscountAmount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=DocumentTotals.GetInvoiceDiscAmountWithVATAndCurrencyCaption(FIELDCAPTION("Inv. Discount Amount"),Currency.Code);
                Editable=InvDiscAmountEditable;
                OnValidate=BEGIN
                             ValidateInvoiceDiscountAmount;
                             DocumentTotals.PurchaseDocTotalsNotUpToDate;
                           END;
                            }

    { 27  ;3   ;Field     ;
                Name=Invoice Disc. Pct.;
                CaptionML=ENU=Invoice Discount %;
                ToolTipML=ENU=Specifies a discount percentage that is granted if criteria that you have set up for the customer are met. The calculated discount amount is inserted in the Invoice Discount Amount field, but you can change it manually.;
                ApplicationArea=#Suite;
                DecimalPlaces=0:3;
                SourceExpr=InvoiceDiscountPct;
                Editable=InvDiscAmountEditable;
                OnValidate=BEGIN
                             AmountWithDiscountAllowed := DocumentTotals.CalcTotalPurchAmountOnlyDiscountAllowed(Rec);
                             InvoiceDiscountAmount := ROUND(AmountWithDiscountAllowed * InvoiceDiscountPct / 100,Currency."Amount Rounding Precision");
                             ValidateInvoiceDiscountAmount;
                             DocumentTotals.PurchaseDocTotalsNotUpToDate;
                           END;
                            }

    { 17  ;2   ;Group     ;
                GroupType=Group }

    { 11  ;3   ;Field     ;
                Name=Total Amount Excl. VAT;
                DrillDown=No;
                CaptionML=ENU=Total Amount Excl. Tax;
                ToolTipML=ENU=Specifies the sum of the value in the Line Amount Excl. Tax field on all lines in the document minus any discount amount in the Invoice Discount Amount field.;
                ApplicationArea=#Suite;
                SourceExpr=TotalPurchaseLine.Amount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=DocumentTotals.GetTotalExclVATCaption(Currency.Code);
                Editable=FALSE }

    { 13  ;3   ;Field     ;
                Name=Total VAT Amount;
                CaptionML=ENU=Total Tax;
                ToolTipML=ENU=Specifies the sum of tax amounts on all lines in the document.;
                ApplicationArea=#Suite;
                SourceExpr=VATAmount;
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=DocumentTotals.GetTotalVATCaption(Currency.Code);
                Editable=FALSE }

    { 7   ;3   ;Field     ;
                Name=Total Amount Incl. VAT;
                CaptionML=ENU=Total Amount Incl. Tax;
                ToolTipML=ENU=Specifies the sum of the value in the Line Amount Incl. Tax field on all lines in the document minus any discount amount in the Invoice Discount Amount field.;
                ApplicationArea=#Suite;
                SourceExpr=TotalPurchaseLine."Amount Including VAT";
                AutoFormatType=1;
                AutoFormatExpr="Currency Code";
                CaptionClass=DocumentTotals.GetTotalInclVATCaption(Currency.Code);
                Editable=FALSE }

  }
  CODE
  {
    VAR
      TotalPurchaseHeader@1000 : Record 38;
      TotalPurchaseLine@1001 : Record 39;
      Currency@1003 : Record 4;
      PurchasesPayablesSetup@1034 : Record 312;
      TempOptionLookupBuffer@1004 : TEMPORARY Record 1670;
      ApplicationAreaMgmtFacade@1005 : Codeunit 9179;
      TransferExtendedText@1006 : Codeunit 378;
      ItemAvailFormsMgt@1007 : Codeunit 353;
      CannotUseBOMErr@1008 : TextConst 'ENU=You cannot use the Explode BOM function because a prepayment of the related purchase order has been invoiced.';
      PurchCalcDiscByType@1009 : Codeunit 66;
      DocumentTotals@1010 : Codeunit 57;
      ShortcutDimCode@1011 : ARRAY [8] OF Code[20];
      VATAmount@1012 : Decimal;
      InvoiceDiscountAmount@1033 : Decimal;
      InvoiceDiscountPct@1019 : Decimal;
      AmountWithDiscountAllowed@1015 : Decimal;
      TypeAsText@1016 : Text[30];
      ItemChargeStyleExpression@1017 : Text;
      InvDiscAmountEditable@1018 : Boolean;
      IsCommentLine@1022 : Boolean;
      IsFoundation@1023 : Boolean;
      UnitofMeasureCodeIsChangeable@1024 : Boolean;
      UpdateInvDiscountQst@1025 : TextConst 'ENU=One or more lines have been invoiced. The discount distributed to invoiced lines will not be taken into account.\\Do you want to update the invoice discount?';
      CurrPageIsEditable@1026 : Boolean;
      DimVisible1@1031 : Boolean;
      DimVisible2@1030 : Boolean;
      DimVisible3@1029 : Boolean;
      DimVisible4@1028 : Boolean;
      DimVisible5@1027 : Boolean;
      DimVisible6@1021 : Boolean;
      DimVisible7@1020 : Boolean;
      DimVisible8@1013 : Boolean;
      TaxGroupCodeVisible@1020000 : Boolean;

    [External]
    PROCEDURE ApproveCalcInvDisc@6();
    BEGIN
      CODEUNIT.RUN(CODEUNIT::"Purch.-Disc. (Yes/No)",Rec);
      DocumentTotals.PurchaseDocTotalsNotUpToDate;
    END;

    LOCAL PROCEDURE ValidateInvoiceDiscountAmount@30();
    VAR
      PurchaseHeader@1000 : Record 38;
      ConfirmManagement@1001 : Codeunit 27;
    BEGIN
      PurchaseHeader.GET("Document Type","Document No.");
      IF PurchaseHeader.InvoicedLineExists THEN
        IF NOT ConfirmManagement.ConfirmProcess(UpdateInvDiscountQst,TRUE) THEN
          EXIT;

      DocumentTotals.PurchaseDocTotalsNotUpToDate;
      PurchCalcDiscByType.ApplyInvDiscBasedOnAmt(InvoiceDiscountAmount,PurchaseHeader);
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE ExplodeBOM@3();
    BEGIN
      IF "Prepmt. Amt. Inv." <> 0 THEN
        ERROR(CannotUseBOMErr);
      CODEUNIT.RUN(CODEUNIT::"Purch.-Explode BOM",Rec);
      DocumentTotals.PurchaseDocTotalsNotUpToDate;
    END;

    LOCAL PROCEDURE InsertExtendedText@5(Unconditionally@1000 : Boolean);
    BEGIN
      OnBeforeInsertExtendedText(Rec);
      IF TransferExtendedText.PurchCheckIfAnyExtText(Rec,Unconditionally) THEN BEGIN
        CurrPage.SAVERECORD;
        TransferExtendedText.InsertPurchExtText(Rec);
      END;
      IF TransferExtendedText.MakeUpdate THEN
        UpdateForm(TRUE);
    END;

    [External]
    PROCEDURE UpdateForm@12(SetSaveRecord@1000 : Boolean);
    BEGIN
      CurrPage.UPDATE(SetSaveRecord);
    END;

    LOCAL PROCEDURE NoOnAfterValidate@79();
    BEGIN
      UpdateEditableOnRow;
      InsertExtendedText(FALSE);
      IF (Type = Type::"Charge (Item)") AND ("No." <> xRec."No.") AND
         (xRec."No." <> '')
      THEN
        CurrPage.SAVERECORD;
    END;

    LOCAL PROCEDURE CrossReferenceNoOnAfterValidat@80();
    BEGIN
      InsertExtendedText(FALSE);
    END;

    PROCEDURE RedistributeTotalsOnAfterValidate@1020000();
    BEGIN
      CurrPage.SAVERECORD;

      DocumentTotals.PurchaseRedistributeInvoiceDiscountAmounts(Rec,VATAmount,TotalPurchaseLine);
      CurrPage.UPDATE(FALSE);
    END;

    LOCAL PROCEDURE GetTotalsPurchaseHeader@13();
    BEGIN
      DocumentTotals.GetTotalPurchaseHeaderAndCurrency(Rec,TotalPurchaseHeader,Currency);
    END;

    LOCAL PROCEDURE CalculateTotals@25();
    BEGIN
      DocumentTotals.PurchaseCheckIfDocumentChanged(Rec,xRec);
      DocumentTotals.CalculatePurchaseSubPageTotals(
        TotalPurchaseHeader,TotalPurchaseLine,VATAmount,InvoiceDiscountAmount,InvoiceDiscountPct);
      DocumentTotals.RefreshPurchaseLine(Rec);
    END;

    LOCAL PROCEDURE DeltaUpdateTotals@1();
    BEGIN
      DocumentTotals.PurchaseDeltaUpdateTotals(Rec,xRec,TotalPurchaseLine,VATAmount,InvoiceDiscountAmount,InvoiceDiscountPct);
      IF "Line Amount" <> xRec."Line Amount" THEN
        SendLineInvoiceDiscountResetNotification;
    END;

    PROCEDURE ForceTotalsCalculation@32();
    BEGIN
      DocumentTotals.PurchaseDocTotalsNotUpToDate;
    END;

    LOCAL PROCEDURE UpdateEditableOnRow@4();
    BEGIN
      IsCommentLine := Type = Type::" ";
      UnitofMeasureCodeIsChangeable := NOT IsCommentLine;

      CurrPageIsEditable := CurrPage.EDITABLE;
      InvDiscAmountEditable := CurrPageIsEditable AND NOT PurchasesPayablesSetup."Calc. Inv. Discount";
    END;

    LOCAL PROCEDURE UpdateTypeText@78();
    VAR
      RecRef@1000 : RecordRef;
    BEGIN
      IF NOT IsFoundation THEN
        EXIT;

      RecRef.GETTABLE(Rec);
      TypeAsText := TempOptionLookupBuffer.FormatOption(RecRef.FIELD(FIELDNO(Type)));
    END;

    LOCAL PROCEDURE SetItemChargeFieldsStyle@77();
    BEGIN
      ItemChargeStyleExpression := '';
      IF AssignedItemCharge AND ("Qty. Assigned" <> Quantity) THEN
        ItemChargeStyleExpression := 'Unfavorable';
    END;

    LOCAL PROCEDURE SetDimensionsVisibility@2();
    VAR
      DimMgt@1000 : Codeunit 408;
    BEGIN
      DimVisible1 := FALSE;
      DimVisible2 := FALSE;
      DimVisible3 := FALSE;
      DimVisible4 := FALSE;
      DimVisible5 := FALSE;
      DimVisible6 := FALSE;
      DimVisible7 := FALSE;
      DimVisible8 := FALSE;

      DimMgt.UseShortcutDims(
        DimVisible1,DimVisible2,DimVisible3,DimVisible4,DimVisible5,DimVisible6,DimVisible7,DimVisible8);

      CLEAR(DimMgt);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterValidateShortcutDimCode@27(VAR PurchaseLine@1000 : Record 39;VAR ShortcutDimCode@1001 : ARRAY [8] OF Code[20];DimIndex@1002 : Integer);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertExtendedText@7(VAR PurchaseLine@1000 : Record 39);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCrossReferenceNoOnLookup@14(VAR PurchaseLine@1000 : Record 39);
    BEGIN
    END;

    BEGIN
    END.
  }
}

