OBJECT Codeunit 27030 SAT Utilities
{
  OBJECT-PROPERTIES
  {
    Date=06/30/22;
    Time=12:00:00 PM;
    Version List=NAVNA14.38;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {

    PROCEDURE GetSATUnitofMeasure@1020000(UofM@1020000 : Code[10]) : Code[10];
    VAR
      UnitOfMeasure@1020001 : Record 204;
    BEGIN
      IF UnitOfMeasure.GET(UofM) THEN
        EXIT(UnitOfMeasure."SAT UofM Classification");
      EXIT(UofM);
    END;

    PROCEDURE GetSATCountryCode@1020001(CountryCode@1020001 : Code[10]) : Code[10];
    VAR
      CountryRegion@1020000 : Record 9;
    BEGIN
      IF CountryRegion.GET(CountryCode) THEN
        EXIT(CountryRegion."SAT Country Code");
      EXIT(CountryCode);
    END;

    PROCEDURE GetSATPaymentMethod@1020004(PaymentMeth@1020000 : Code[10]) : Code[10];
    VAR
      PaymentMethod@1020001 : Record 289;
    BEGIN
      IF PaymentMethod.GET(PaymentMeth) THEN
        EXIT(PaymentMethod."SAT Method of Payment");
      EXIT(PaymentMeth);
    END;

    PROCEDURE GetSATPaymentMethodDescription@1020007(PaymentMeth@1020000 : Code[10]) : Text[50];
    VAR
      PaymentMethod@1020001 : Record 289;
      SATPaymentMethod@1020002 : Record 27018;
    BEGIN
      IF PaymentMethod.GET(PaymentMeth) THEN BEGIN
        IF SATPaymentMethod.GET(PaymentMethod."SAT Method of Payment") THEN
          EXIT(SATPaymentMethod.Description);
      END;
      EXIT(PaymentMeth);
    END;

    PROCEDURE GetSATItemClassification@1020005(Type@1020000 : ' ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)';ItemNumber@1020001 : Code[20]) : Code[10];
    VAR
      Item@1020002 : Record 27;
      FixedAsset@1310000 : Record 5600;
      ItemCharge@1310001 : Record 5800;
    BEGIN
      IF Type = Type::Item THEN
        IF Item.GET(ItemNumber) THEN
          EXIT(Item."SAT Item Classification");

      IF Type = Type::"Fixed Asset" THEN
        IF FixedAsset.GET(ItemNumber) THEN
          EXIT(FixedAsset."SAT Classification Code");

      IF Type = Type::"Charge (Item)" THEN
        IF ItemCharge.GET(ItemNumber) THEN
          EXIT(ItemCharge."SAT Classification Code");

      IF Type = Type::Resource THEN
        EXIT('01010101'); // Does not exist in the catalog
      EXIT('');
    END;

    PROCEDURE GetSATPaymentTerm@1020011(PaymentTerm@1020000 : Code[10]) : Code[10];
    VAR
      PaymentTerms@1020002 : Record 3;
    BEGIN
      IF PaymentTerms.GET(PaymentTerm) THEN
        EXIT(PaymentTerms."SAT Payment Term");
      EXIT(PaymentTerm);
    END;

    PROCEDURE GetSATPaymentTermDescription@1020009(PaymentTerm@1020000 : Code[10]) : Text[50];
    VAR
      PaymentTerms@1020002 : Record 3;
      SATPaymentTerm@1020001 : Record 27017;
    BEGIN
      IF PaymentTerms.GET(PaymentTerm) THEN BEGIN
        IF SATPaymentTerm.GET(PaymentTerms."SAT Payment Term") THEN
          EXIT(SATPaymentTerm.Description);
      END;
      EXIT(PaymentTerm);
    END;

    PROCEDURE GetSATTaxSchemeDescription@1020012(TaxScheme@1020000 : Code[10]) : Text[100];
    VAR
      SATTaxScheme@1020002 : Record 27016;
    BEGIN
      IF SATTaxScheme.GET(TaxScheme) THEN
        EXIT(SATTaxScheme.Description);
      EXIT(TaxScheme);
    END;

    PROCEDURE MapCountryCodes@1020002();
    VAR
      CountryRegion@1020000 : Record 9;
    BEGIN
      IF CountryRegion.FINDSET THEN
        REPEAT
          CASE CountryRegion.Code OF
            'AE':
              CountryRegion."SAT Country Code" := 'ARE';
            'AT':
              CountryRegion."SAT Country Code" := 'AUT';
            'AU':
              CountryRegion."SAT Country Code" := 'AUS';
            'BE':
              CountryRegion."SAT Country Code" := 'BEL';
            'BG':
              CountryRegion."SAT Country Code" := 'BGR';
            'BN':
              CountryRegion."SAT Country Code" := 'BRN';
            'BR':
              CountryRegion."SAT Country Code" := 'BRA';
            'CA':
              CountryRegion."SAT Country Code" := 'CAN';
            'CH':
              CountryRegion."SAT Country Code" := 'CHE';
            'CN':
              CountryRegion."SAT Country Code" := 'CHN';
            'CY':
              CountryRegion."SAT Country Code" := 'CYP';
            'CZ':
              CountryRegion."SAT Country Code" := 'CZE';
            'DE':
              CountryRegion."SAT Country Code" := 'DEU';
            'DK':
              CountryRegion."SAT Country Code" := 'DNK';
            'DZ':
              CountryRegion."SAT Country Code" := 'DZA';
            'EE':
              CountryRegion."SAT Country Code" := 'EST';
            'EL':
              CountryRegion."SAT Country Code" := 'GRC';
            'ES':
              CountryRegion."SAT Country Code" := 'ESP';
            'FI':
              CountryRegion."SAT Country Code" := 'FIN';
            'FJ':
              CountryRegion."SAT Country Code" := 'FJI';
            'FR':
              CountryRegion."SAT Country Code" := 'FRA';
            'GB':
              CountryRegion."SAT Country Code" := 'GBR';
            'HR':
              CountryRegion."SAT Country Code" := 'HRV';
            'HU':
              CountryRegion."SAT Country Code" := 'HUN';
            'ID':
              CountryRegion."SAT Country Code" := 'IDN';
            'IE':
              CountryRegion."SAT Country Code" := 'IRL';
            'IN':
              CountryRegion."SAT Country Code" := 'IND';
            'IS':
              CountryRegion."SAT Country Code" := 'ISL';
            'IT':
              CountryRegion."SAT Country Code" := 'ITA';
            'JP':
              CountryRegion."SAT Country Code" := 'JPN';
            'KE':
              CountryRegion."SAT Country Code" := 'KEN';
            'LT':
              CountryRegion."SAT Country Code" := 'LTU';
            'LU':
              CountryRegion."SAT Country Code" := 'LUX';
            'LV':
              CountryRegion."SAT Country Code" := 'LVA';
            'MA':
              CountryRegion."SAT Country Code" := 'MAR';
            'ME':
              CountryRegion."SAT Country Code" := 'MNE';
            'MT':
              CountryRegion."SAT Country Code" := 'MLT';
            'MX':
              CountryRegion."SAT Country Code" := 'MEX';
            'MY':
              CountryRegion."SAT Country Code" := 'MYS';
            'MZ':
              CountryRegion."SAT Country Code" := 'MOZ';
            'NG':
              CountryRegion."SAT Country Code" := 'NGA';
            'NL':
              CountryRegion."SAT Country Code" := 'NLD';
            'NO':
              CountryRegion."SAT Country Code" := 'NOR';
            'NZ':
              CountryRegion."SAT Country Code" := 'NZL';
            'PH':
              CountryRegion."SAT Country Code" := 'PHL';
            'PL':
              CountryRegion."SAT Country Code" := 'POL';
            'PT':
              CountryRegion."SAT Country Code" := 'PRT';
            'RO':
              CountryRegion."SAT Country Code" := 'ROU';
            'RS':
              CountryRegion."SAT Country Code" := 'SRB';
            'RU':
              CountryRegion."SAT Country Code" := 'RUS';
            'SA':
              CountryRegion."SAT Country Code" := 'SAU';
            'SB':
              CountryRegion."SAT Country Code" := 'SLB';
            'SE':
              CountryRegion."SAT Country Code" := 'SWE';
            'SG':
              CountryRegion."SAT Country Code" := 'SGP';
            'SI':
              CountryRegion."SAT Country Code" := 'SVN';
            'SK':
              CountryRegion."SAT Country Code" := 'SVK';
            'SZ':
              CountryRegion."SAT Country Code" := 'SWZ';
            'TH':
              CountryRegion."SAT Country Code" := 'THA';
            'TN':
              CountryRegion."SAT Country Code" := 'TUN';
            'TR':
              CountryRegion."SAT Country Code" := 'TUR';
            'TZ':
              CountryRegion."SAT Country Code" := 'TZA';
            'UG':
              CountryRegion."SAT Country Code" := 'UGA';
            'US':
              CountryRegion."SAT Country Code" := 'USA';
            'VU':
              CountryRegion."SAT Country Code" := 'VUT';
            'WS':
              CountryRegion."SAT Country Code" := 'WSM';
            'ZA':
              CountryRegion."SAT Country Code" := 'ZAF';
            ELSE
              CountryRegion."SAT Country Code" := 'ZZZ';
          END;
          CountryRegion.MODIFY;
        UNTIL CountryRegion.NEXT = 0;
    END;

    PROCEDURE MapUnitsofMeasure@1020003();
    VAR
      UnitOfMeasure@1020000 : Record 204;
    BEGIN
      IF UnitOfMeasure.FINDSET THEN
        REPEAT
          CASE UnitOfMeasure.Code OF
            'DAY':
              UnitOfMeasure."SAT UofM Classification" := 'DAY';
            'GR':
              UnitOfMeasure."SAT UofM Classification" := 'GRM';
            'HOUR':
              UnitOfMeasure."SAT UofM Classification" := 'HUR';
            'KG':
              UnitOfMeasure."SAT UofM Classification" := 'KGM';
            'KM':
              UnitOfMeasure."SAT UofM Classification" := 'KMT';
            'L':
              UnitOfMeasure."SAT UofM Classification" := 'LTR';
            'PCS':
              UnitOfMeasure."SAT UofM Classification" := 'EA';
          END;
          UnitOfMeasure.MODIFY;
        UNTIL UnitOfMeasure.NEXT = 0;
    END;

    PROCEDURE PopulateSATInformation@1020006();
    VAR
      SATPaymentMethod@1020012 : Record 27018;
      SATClassification@1020013 : Record 27010;
      SATRelationshipType@1020014 : Record 27011;
      SATUseCode@1020015 : Record 27012;
      SATUnitOfMeasure@1020016 : Record 27013;
      SATCountryCode@1020017 : Record 27014;
      SATTaxScheme@1020018 : Record 27016;
      SATPaymentTerm@1020019 : Record 27017;
      CFDICancellationReason@1310000 : Record 27003;
      CFDIExportCode@1310002 : Record 27004;
      CFDISubjectToTax@1310004 : Record 27008;
      MediaResources@1020021 : Record 2000000182;
      SATClassificationPort@1020004 : XMLport 27010;
      SATRelationshipTypePort@1020005 : XMLport 27011;
      SATUseCodePort@1020006 : XMLport 27012;
      SATUnitOfMeasurePort@1020007 : XMLport 27013;
      SATCountryCodePort@1020008 : XMLport 27014;
      SATPaymentMethodPort@1020009 : XMLport 27015;
      SATTaxSchemePort@1020010 : XMLport 27016;
      SATPaymentTermPort@1020011 : XMLport 27017;
      CFDICancellationReasonPort@1310001 : XMLport 27003;
      CFDIExportCodePort@1310003 : XMLport 27004;
      CFDISubjectToTaxPort@1310005 : XMLport 27008;
      IStr@1020001 : InStream;
    BEGIN
      IF NOT SATClassification.FINDFIRST THEN BEGIN
        MediaResources.GET('SATClassifications.xml');
        MediaResources.CALCFIELDS(Blob);
        MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
        SATClassificationPort.SETSOURCE(IStr);
        SATClassificationPort.IMPORT;
      END;

      IF NOT SATCountryCode.FINDFIRST THEN BEGIN
        MediaResources.GET('SATCountry_Codes.xml');
        MediaResources.CALCFIELDS(Blob);
        MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
        SATCountryCodePort.SETSOURCE(IStr);
        SATCountryCodePort.IMPORT;
      END;

      IF NOT SATPaymentTerm.FINDFIRST THEN BEGIN
        MediaResources.GET('SATPayment_Terms.xml');
        MediaResources.CALCFIELDS(Blob);
        MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
        SATPaymentTermPort.SETSOURCE(IStr);
        SATPaymentTermPort.IMPORT;
      END;

      IF NOT SATRelationshipType.FINDFIRST THEN BEGIN
        MediaResources.GET('SATRelationship_Types.xml');
        MediaResources.CALCFIELDS(Blob);
        MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
        SATRelationshipTypePort.SETSOURCE(IStr);
        SATRelationshipTypePort.IMPORT;
      END;

      IF NOT SATTaxScheme.FINDFIRST THEN BEGIN
        MediaResources.GET('SATTax_Schemes.xml');
        MediaResources.CALCFIELDS(Blob);
        MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
        SATTaxSchemePort.SETSOURCE(IStr);
        SATTaxSchemePort.IMPORT;
      END;

      IF NOT SATUnitOfMeasure.FINDFIRST THEN BEGIN
        MediaResources.GET('SATU_of_M.xml');
        MediaResources.CALCFIELDS(Blob);
        MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
        SATUnitOfMeasurePort.SETSOURCE(IStr);
        SATUnitOfMeasurePort.IMPORT;
      END;

      IF NOT SATUseCode.FINDFIRST THEN BEGIN
        MediaResources.GET('SATUse_Codes.xml');
        MediaResources.CALCFIELDS(Blob);
        MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
        SATUseCodePort.SETSOURCE(IStr);
        SATUseCodePort.IMPORT;
      END;

      IF NOT SATPaymentMethod.FINDFIRST THEN BEGIN
        MediaResources.GET('SATPayment_Methods.xml');
        MediaResources.CALCFIELDS(Blob);
        MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
        SATPaymentMethodPort.SETSOURCE(IStr);
        SATPaymentMethodPort.IMPORT;
      END;

      IF CFDICancellationReason.ISEMPTY THEN
        IF MediaResources.GET('CFDICancellationReasons.xml') THEN BEGIN
          MediaResources.CALCFIELDS(Blob);
          MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
          CFDICancellationReasonPort.SETSOURCE(IStr);
          CFDICancellationReasonPort.IMPORT;
        END;

      IF CFDIExportCode.ISEMPTY THEN
        IF MediaResources.GET('CFDIExportCodes.xml') THEN BEGIN
          MediaResources.CALCFIELDS(Blob);
          MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
          CFDIExportCodePort.SETSOURCE(IStr);
          CFDIExportCodePort.IMPORT;
        END;

      IF CFDISubjectToTax.ISEMPTY THEN
        IF MediaResources.GET('CFDISubjectsToTax.xml') THEN BEGIN
          MediaResources.CALCFIELDS(Blob);
          MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
          CFDISubjectToTaxPort.SETSOURCE(IStr);
          CFDISubjectToTaxPort.IMPORT;
        END;

      PopulateCartaPorteCatalogs;
    END;

    LOCAL PROCEDURE PopulateCartaPorteCatalogs@1310003();
    VAR
      MediaResources@1020021 : Record 2000000182;
      SATFederalMotorTransport@1310000 : Record 27021;
      SATTrailerType@1310001 : Record 27022;
      SATPermissionType@1310004 : Record 27023;
      SATHazardousMaterial@1310007 : Record 27024;
      SATPackagingType@1310009 : Record 27025;
      SATState@1310013 : Record 27026;
      SATMunicipality@1310012 : Record 27027;
      SATLocality@1310011 : Record 27028;
      SATSuburb@1310017 : Record 27029;
      SATWeightUnitOfMeasure@1310006 : Record 27019;
      SATFederalMotorTransportPort@1310002 : XMLport 27021;
      SATTrailerTypePort@1310003 : XMLport 27022;
      SATPermissionTypePort@1310005 : XMLport 27023;
      SATHazardousMaterialPort@1310008 : XMLport 27024;
      SATPackagingTypePort@1310010 : XMLport 27025;
      SATStatePort@1310014 : XMLport 27026;
      SATMunicipalityPort@1310015 : XMLport 27027;
      SATLocalityPort@1310016 : XMLport 27028;
      SATSuburbPort@1310018 : XMLport 27029;
      SATWeightUnitOfMeasurePort@1310019 : XMLport 27019;
      IStr@1020001 : InStream;
    BEGIN
      IF SATFederalMotorTransport.ISEMPTY THEN
        IF MediaResources.GET('SATFederalMotorTransport.xml') THEN BEGIN
          MediaResources.CALCFIELDS(Blob);
          MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
          SATFederalMotorTransportPort.SETSOURCE(IStr);
          SATFederalMotorTransportPort.IMPORT;
        END;

      IF SATTrailerType.ISEMPTY THEN
        IF MediaResources.GET('SATTrailerTypes.xml') THEN BEGIN
          MediaResources.CALCFIELDS(Blob);
          MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
          SATTrailerTypePort.SETSOURCE(IStr);
          SATTrailerTypePort.IMPORT;
        END;

      IF SATPermissionType.ISEMPTY THEN
        IF MediaResources.GET('SATPermissionTypes.xml') THEN BEGIN
          MediaResources.CALCFIELDS(Blob);
          MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
          SATPermissionTypePort.SETSOURCE(IStr);
          SATPermissionTypePort.IMPORT;
        END;

      IF SATHazardousMaterial.ISEMPTY THEN
        IF MediaResources.GET('SATHazardousMaterials.xml') THEN BEGIN
          MediaResources.CALCFIELDS(Blob);
          MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
          SATHazardousMaterialPort.SETSOURCE(IStr);
          SATHazardousMaterialPort.IMPORT;
        END;

      IF SATPackagingType.ISEMPTY THEN
        IF MediaResources.GET('SATPackagingTypes.xml') THEN BEGIN
          MediaResources.CALCFIELDS(Blob);
          MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
          SATPackagingTypePort.SETSOURCE(IStr);
          SATPackagingTypePort.IMPORT;
        END;

      IF SATState.ISEMPTY THEN
        IF MediaResources.GET('SATStates.xml') THEN BEGIN
          MediaResources.CALCFIELDS(Blob);
          MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
          SATStatePort.SETSOURCE(IStr);
          SATStatePort.IMPORT;
        END;

      IF SATMunicipality.ISEMPTY THEN
        IF MediaResources.GET('SATMunicipalities.xml') THEN BEGIN
          MediaResources.CALCFIELDS(Blob);
          MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
          SATMunicipalityPort.SETSOURCE(IStr);
          SATMunicipalityPort.IMPORT;
        END;

      IF SATLocality.ISEMPTY THEN
        IF MediaResources.GET('SATLocalities.xml') THEN BEGIN
          MediaResources.CALCFIELDS(Blob);
          MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
          SATLocalityPort.SETSOURCE(IStr);
          SATLocalityPort.IMPORT;
        END;

      IF SATSuburb.ISEMPTY THEN BEGIN
        IF MediaResources.GET('SATSuburb1.xml') THEN BEGIN
          MediaResources.CALCFIELDS(Blob);
          MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
          SATSuburbPort.SETSOURCE(IStr);
          SATSuburbPort.IMPORT;
        END;
        IF MediaResources.GET('SATSuburb2.xml') THEN BEGIN
          MediaResources.CALCFIELDS(Blob);
          MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
          SATSuburbPort.SETSOURCE(IStr);
          SATSuburbPort.IMPORT;
        END;
        IF MediaResources.GET('SATSuburb3.xml') THEN BEGIN
          MediaResources.CALCFIELDS(Blob);
          MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
          SATSuburbPort.SETSOURCE(IStr);
          SATSuburbPort.IMPORT;
        END;
        IF MediaResources.GET('SATSuburb4.xml') THEN BEGIN
          MediaResources.CALCFIELDS(Blob);
          MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
          SATSuburbPort.SETSOURCE(IStr);
          SATSuburbPort.IMPORT;
        END;
      END;

      IF SATWeightUnitOfMeasure.ISEMPTY THEN
        IF MediaResources.GET('SATWeightUnitsOfMeasure.xml') THEN BEGIN
          MediaResources.CALCFIELDS(Blob);
          MediaResources.Blob.CREATEINSTREAM(IStr,TEXTENCODING::UTF16);
          SATWeightUnitOfMeasurePort.SETSOURCE(IStr);
          SATWeightUnitOfMeasurePort.IMPORT;
        END;
    END;

    PROCEDURE CreateSATXMLFiles@1020008();
    VAR
      SATPaymentMethodCode@1020012 : Record 27001;
      SATClassification@1020013 : Record 27010;
      SATRelationshipType@1020014 : Record 27011;
      SATUseCode@1020015 : Record 27012;
      SATUnitOfMeasure@1020016 : Record 27013;
      SATCountryCode@1020017 : Record 27014;
      SATTaxScheme@1020018 : Record 27016;
      SATPaymentTerm@1020019 : Record 27017;
      TempBlob@1020021 : Record 99008535;
      FileManagement@1020023 : Codeunit 419;
      OutStr@1020024 : OutStream;
    BEGIN
      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XMLPORT.EXPORT(XMLPORT::"SAT Classification",OutStr,SATClassification);
      FileManagement.BLOBExport(TempBlob,'SATClassifications.xml',TRUE);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XMLPORT.EXPORT(XMLPORT::"SAT Country Code",OutStr,SATCountryCode);
      FileManagement.BLOBExport(TempBlob,'SATCountry_Codes.xml',TRUE);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XMLPORT.EXPORT(XMLPORT::"SAT Payment Term",OutStr,SATPaymentTerm);
      FileManagement.BLOBExport(TempBlob,'SATPayment_Forms.xml',TRUE);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XMLPORT.EXPORT(XMLPORT::"SAT Payment Method",OutStr,SATPaymentMethodCode);
      FileManagement.BLOBExport(TempBlob,'SATPayment_Methods.xml',TRUE);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XMLPORT.EXPORT(XMLPORT::"SAT Relationship Type",OutStr,SATRelationshipType);
      FileManagement.BLOBExport(TempBlob,'SATRelationship_Types.xml',TRUE);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XMLPORT.EXPORT(XMLPORT::"SAT Tax Scheme",OutStr,SATTaxScheme);
      FileManagement.BLOBExport(TempBlob,'SATTax_Schemes.xml',TRUE);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XMLPORT.EXPORT(XMLPORT::"SAT Unit of Measure",OutStr,SATUnitOfMeasure);
      FileManagement.BLOBExport(TempBlob,'SATU_of_M.xml',TRUE);

      TempBlob.INIT;
      TempBlob.Blob.CREATEOUTSTREAM(OutStr);
      XMLPORT.EXPORT(XMLPORT::"SAT Use Code",OutStr,SATUseCode);
      FileManagement.BLOBExport(TempBlob,'SATUse_Codes.xml',TRUE);
    END;

    BEGIN
    {
      This codeunit will house various utility functions used by the CFDI Mexican Reg F functionality.
    }
    END.
  }
}

