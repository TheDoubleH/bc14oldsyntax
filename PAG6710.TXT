OBJECT Page 6710 OData Column Choose SubForm
{
  OBJECT-PROPERTIES
  {
    Date=06/07/21;
    Time=12:00:00 PM;
    Version List=NAVW114.25;
  }
  PROPERTIES
  {
    CaptionML=ENU=OData Column Choose SubForm;
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table6711;
    PageType=ListPart;
    SourceTableTemporary=Yes;
    ActionList=ACTIONS
    {
      { 5       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Name=Group;
                GroupType=Repeater }

    { 6   ;2   ;Field     ;
                ToolTipML=ENU=Specifies the field name that is selected in the data set.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Include;
                OnValidate=BEGIN
                             IF CalledForExcelExport THEN
                               CheckFieldFilter;
                             IsDirty := TRUE;
                           END;
                            }

    { 7   ;2   ;Field     ;
                ToolTipML=ENU=Specifies the field names in a data set.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Field Name";
                Editable=false }

    { 3   ;2   ;Field     ;
                CaptionML=ENU=Field Caption;
                ToolTipML=ENU=Specifies the Field Captions in a data set.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Field Caption";
                Editable=false }

    { 4   ;2   ;Field     ;
                CaptionML=ENU=Source Table;
                ToolTipML=ENU=Specifies the Source Table for the Field Name.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Data Item Caption";
                Editable=FALSE }

  }
  CODE
  {
    VAR
      RecRef@1004 : RecordRef;
      ColumnList@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Collections.Generic.List`1";
      SourceObjectType@1007 : ',,,,,,,,Page,Query';
      ActionType@1001 : 'Create a new data set,Create a copy of an existing data set,Edit an existing data set';
      SourceServiceName@1003 : Text;
      SourceObjectID@1002 : Integer;
      IsDirty@1006 : Boolean;
      CheckFieldErr@1008 : TextConst 'ENU=You cannot exclude field from selection because of applied filter for it.';
      CalledForExcelExport@1009 : Boolean;

    [Internal]
    PROCEDURE InitColumns@1(ObjectType@1000 : ',,,,,,,,Page,Query';ObjectID@1005 : Integer;InActionType@1003 : 'Create a new data set,Create a copy of an existing data set,Edit an existing data set';InSourceServiceName@1004 : Text;DestinationServiceName@1006 : Text);
    VAR
      ObjectMetadata@1001 : Record 2000000071;
      AllObj@1008 : Record 2000000038;
      NAVAppObjectMetadata@1007 : Record 2000000150;
      inStream@1002 : InStream;
      ObjectMetadataFound@1009 : Boolean;
      NAVAppObjectMetadataFound@1010 : Boolean;
    BEGIN
      IF FINDFIRST THEN
        EXIT;

      ActionType := InActionType;
      SourceObjectType := ObjectType;
      SourceServiceName := InSourceServiceName;
      SourceObjectID := ObjectID;
      DestinationServiceName := DestinationServiceName;

      IF ObjectMetadata.GET(SourceObjectType,SourceObjectID) THEN
        ObjectMetadataFound := ObjectMetadata.Metadata.HASVALUE;

      IF NOT ObjectMetadataFound THEN BEGIN
        AllObj.GET(SourceObjectType,SourceObjectID);
        NAVAppObjectMetadata.GET(AllObj."App Package ID",SourceObjectType,SourceObjectID);
        NAVAppObjectMetadataFound := NAVAppObjectMetadata.Metadata.HASVALUE;
      END;

      IF ObjectMetadataFound THEN BEGIN
        ObjectMetadata.CALCFIELDS(Metadata);
        ObjectMetadata.Metadata.CREATEINSTREAM(inStream,TEXTENCODING::Windows);
      END ELSE
        IF NAVAppObjectMetadataFound THEN BEGIN
          NAVAppObjectMetadata.CALCFIELDS(Metadata);
          NAVAppObjectMetadata.Metadata.CREATEINSTREAM(inStream,TEXTENCODING::Windows);
        END;

      IF SourceObjectType = SourceObjectType::Query THEN
        InitColumnsForQuery(inStream)
      ELSE
        IF SourceObjectType = SourceObjectType::Page THEN
          InitColumnsForPage(ObjectID);

      CLEAR(Rec);
      CurrPage.UPDATE;
    END;

    [External]
    PROCEDURE GetColumns@2(VAR TempTenantWebServiceColumns@1000 : TEMPORARY Record 6711);
    BEGIN
      SETRANGE(Include,TRUE);
      IF FINDFIRST THEN
        REPEAT
          TempTenantWebServiceColumns.TRANSFERFIELDS(Rec);
          TempTenantWebServiceColumns.INSERT;

        UNTIL NEXT = 0;
      RESET;
    END;

    LOCAL PROCEDURE InitColumnsForQuery@3(queryStream@1000 : InStream);
    VAR
      queryField@1003 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryFields";
      metaData@1002 : DotNet "'Microsoft.Dynamics.Nav.Client.BusinessChart.Model, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.BusinessChart.QueryMetadataReader";
      i@1001 : Integer;
      OldTableNo@1004 : Integer;
    BEGIN
      // Load into Query Metadata Reader and retrieve values
      metaData := metaData.FromStream(queryStream);
      IF metaData.Fields.Count = 0 THEN
        EXIT;
      FOR i := 0 TO metaData.Fields.Count - 1 DO BEGIN
        queryField := metaData.Fields.Item(i);
        IF OldTableNo <> queryField.TableNo THEN
          ColumnList := ColumnList.List;
        OldTableNo := queryField.TableNo;
        CLEAR(Rec);
        IF NOT queryField.IsFilterOnly THEN
          InsertRecord(queryField.TableNo,queryField.FieldNo,queryField.FieldName,FALSE);
      END;
    END;

    LOCAL PROCEDURE InitColumnsForPage@4(ObjectID@1000 : Integer);
    VAR
      FieldsTable@1017 : Record 2000000041;
      PageControlField@1004 : Record 2000000192;
      ODataUtility@1018 : Codeunit 6710;
      FieldNameText@1015 : Text;
      ColumnVisible@1019 : Boolean;
    BEGIN
      ColumnList := ColumnList.List;
      // Sort on sequence to maintain order
      PageControlField.SETCURRENTKEY(Sequence);
      PageControlField.SETRANGE(PageNo,ObjectID);
      IF PageControlField.FINDSET THEN
        REPEAT
          IF NOT EVALUATE(ColumnVisible,PageControlField.Visible) THEN
            ColumnVisible := FALSE;
          // Convert to OData compatible name.
          FieldNameText := ODataUtility.ConvertNavFieldNameToOdataName(PageControlField.ControlName);
          IF FieldsTable.GET(PageControlField.TableNo,PageControlField.FieldNo) THEN
            // Page field is based on table (fieldsTable)
            InsertRecord(FieldsTable.TableNo,FieldsTable."No.",FieldNameText,ColumnVisible)
          ELSE
            // Page field is NOT based on table
            InsertRecord(FieldsTable.TableNo,PageControlField.ControlId,FieldNameText,ColumnVisible);
        UNTIL PageControlField.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertRecord@7(TableNo@1000 : Integer;FieldNo@1001 : Integer;FieldName@1002 : Text;IncludeParam@1003 : Boolean);
    BEGIN
      IF ColumnList.Contains(FieldNo) THEN
        EXIT;

      INIT;
      VALIDATE("Data Item",TableNo);
      VALIDATE("Field Number",FieldNo);
      VALIDATE("Field Name",COPYSTR(FieldName,1));
      IF (ActionType = ActionType::"Create a copy of an existing data set") OR
         (ActionType = ActionType::"Edit an existing data set")
      THEN BEGIN
        IF SourceColumnExists(TableNo,FieldNo) THEN
          Include := TRUE;
      END ELSE
        Include := IncludeParam;
      REPEAT
        "Entry ID" := "Entry ID" + 1;
      UNTIL INSERT(TRUE);

      ColumnList.Add(FieldNo);
    END;

    [External]
    PROCEDURE DeleteColumns@5();
    BEGIN
      CLEAR(Rec);
      DELETEALL;
    END;

    LOCAL PROCEDURE SourceColumnExists@9(TableNo@1000 : Integer;FieldNumber@1001 : Integer) : Boolean;
    VAR
      TenantWebService@1002 : Record 2000000168;
      TenantWebServiceColumns@1003 : Record 6711;
    BEGIN
      TenantWebService.INIT;
      IF TenantWebService.GET(SourceObjectType,SourceServiceName) THEN BEGIN
        TenantWebServiceColumns.INIT;
        TenantWebServiceColumns.SETRANGE(TenantWebServiceID,TenantWebService.RECORDID);
        TenantWebServiceColumns.SETRANGE("Field Number",FieldNumber);
        TenantWebServiceColumns.SETRANGE("Data Item",TableNo);
        IF TenantWebServiceColumns.FINDFIRST THEN
          EXIT(TRUE);
      END;
    END;

    [External]
    PROCEDURE IncludeIsChanged@8() : Boolean;
    VAR
      LocalDirty@1000 : Boolean;
    BEGIN
      LocalDirty := IsDirty;
      CLEAR(IsDirty);
      EXIT(LocalDirty);
    END;

    [External]
    PROCEDURE SetCalledForExcelExport@6(VAR SourceRecRef@1000 : RecordRef);
    BEGIN
      CalledForExcelExport := TRUE;
      RecRef := SourceRecRef;
    END;

    LOCAL PROCEDURE CheckFieldFilter@12();
    VAR
      FieldRef@1000 : FieldRef;
    BEGIN
      IF NOT Include THEN BEGIN
        FieldRef := RecRef.FIELD("Field Number");
        IF FieldRef.GETFILTER <> '' THEN
          ERROR(CheckFieldErr);
      END;
    END;

    BEGIN
    END.
  }
}

