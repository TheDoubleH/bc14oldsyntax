OBJECT Table 5876 Phys. Invt. Order Line
{
  OBJECT-PROPERTIES
  {
    Date=12/19/19;
    Time=12:00:00 PM;
    Version List=NAVW114.09;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               GetPhysInvtOrderHeader;
               PhysInvtOrderHeader.TESTFIELD(Status,PhysInvtOrderHeader.Status::Open);
             END;

    OnDelete=BEGIN
               TestStatusOpen;
               TESTFIELD("On Recording Lines",FALSE);

               ExpPhysInvtTracking.DeleteLine("Document No.","Line No.",TRUE);

               ReservEntry.RESET;
               ReservEntry.SetSourceFilter(DATABASE::"Phys. Invt. Order Line",0,"Document No.","Line No.",FALSE);
               ReservEntry.SetSourceFilter2('',0);
               ReservEntry.DELETEALL;
             END;

    OnRename=BEGIN
               ERROR(CannotRenameErr,TABLECAPTION);
             END;

    CaptionML=ENU=Phys. Invt. Order Line;
    LookupPageID=Page5878;
    DrillDownPageID=Page5878;
  }
  FIELDS
  {
    { 1   ;   ;Document No.        ;Code20        ;TableRelation="Phys. Invt. Order Header";
                                                   CaptionML=ENU=Document No. }
    { 2   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 12  ;   ;On Recording Lines  ;Boolean       ;CaptionML=ENU=On Recording Lines;
                                                   Editable=No }
    { 20  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=VAR
                                                                TempPhysInvtOrderLine@1000 : TEMPORARY Record 5876;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("On Recording Lines",FALSE);

                                                                TempPhysInvtOrderLine := Rec;
                                                                INIT;
                                                                "Item No." := TempPhysInvtOrderLine."Item No.";
                                                                "Variant Code" := '';
                                                                ResetQtyExpected;

                                                                IF "Item No." = '' THEN
                                                                  EXIT;

                                                                GetPhysInvtOrderHeader;
                                                                GetItem;
                                                                Item.TESTFIELD(Blocked,FALSE);

                                                                VALIDATE(Description,Item.Description);
                                                                VALIDATE("Description 2",Item."Description 2");

                                                                VALIDATE("Base Unit of Measure Code",Item."Base Unit of Measure");
                                                                IF "Base Unit of Measure Code" <> '' THEN BEGIN
                                                                  UnitOfMeasure.GET("Base Unit of Measure Code");
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                END ELSE
                                                                  "Unit of Measure" := '';

                                                                "Item Category Code" := Item."Item Category Code";

                                                                VALIDATE("Gen. Bus. Posting Group",PhysInvtOrderHeader."Gen. Bus. Posting Group");
                                                                VALIDATE("Gen. Prod. Posting Group",Item."Gen. Prod. Posting Group");
                                                                VALIDATE("Inventory Posting Group",Item."Inventory Posting Group");

                                                                CreateDim(DATABASE::Item,"Item No.");

                                                                "Location Code" := PhysInvtOrderHeader."Location Code";
                                                                "Bin Code" := PhysInvtOrderHeader."Bin Code";

                                                                "Use Item Tracking" := PhysInvtTrackingMgt.SuggestUseTrackingLines(Item);

                                                                GetShelfNo;
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 21  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("On Recording Lines",FALSE);

                                                                IF "Variant Code" <> xRec."Variant Code" THEN BEGIN
                                                                  ResetQtyExpected;
                                                                  GetShelfNo;
                                                                END;

                                                                IF "Variant Code" = '' THEN
                                                                  EXIT;

                                                                TESTFIELD("Item No.");

                                                                ItemVariant.GET("Item No.","Variant Code");
                                                                Description := ItemVariant.Description;
                                                                "Description 2" := ItemVariant."Description 2";
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 22  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("On Recording Lines",FALSE);

                                                                IF "Location Code" <> xRec."Location Code" THEN
                                                                  ResetQtyExpected;

                                                                GetShelfNo;
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 23  ;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=VAR
                                                                Location@1000 : Record 14;
                                                              BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("On Recording Lines",FALSE);

                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  TESTFIELD("Location Code");
                                                                  Location.GET("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory",TRUE);
                                                                  Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                END;

                                                                IF "Bin Code" <> xRec."Bin Code" THEN
                                                                  ResetQtyExpected;
                                                              END;

                                                   CaptionML=ENU=Bin Code }
    { 30  ;   ;Description         ;Text100       ;CaptionML=ENU=Description }
    { 31  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 32  ;   ;Unit of Measure     ;Text50        ;CaptionML=ENU=Unit of Measure }
    { 40  ;   ;Base Unit of Measure Code;Code10   ;TableRelation="Unit of Measure";
                                                   CaptionML=ENU=Base Unit of Measure Code;
                                                   Editable=No }
    { 50  ;   ;Qty. Expected (Base);Decimal       ;CaptionML=ENU=Qty. Expected (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 51  ;   ;Qty. Exp. Calculated;Boolean       ;CaptionML=ENU=Qty. Exp. Calculated;
                                                   Editable=No }
    { 52  ;   ;Qty. Exp. Item Tracking (Base);Decimal;
                                                   FieldClass=FlowField;
                                                   CalcFormula=Sum("Exp. Phys. Invt. Tracking"."Quantity (Base)" WHERE (Order No=FIELD(Document No.),
                                                                                                                        Order Line No.=FIELD(Line No.)));
                                                   CaptionML=ENU=Qty. Exp. Item Tracking (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 53  ;   ;Use Item Tracking   ;Boolean       ;OnValidate=BEGIN
                                                                TestStatusOpen;

                                                                IF "Use Item Tracking" <> xRec."Use Item Tracking" THEN
                                                                  ResetQtyExpected;
                                                              END;

                                                   CaptionML=ENU=Use Item Tracking }
    { 55  ;   ;Last Item Ledger Entry No.;Integer ;TableRelation="Item Ledger Entry";
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Last Item Ledger Entry No.;
                                                   Editable=No }
    { 60  ;   ;Unit Amount         ;Decimal       ;CaptionML=ENU=Unit Amount;
                                                   AutoFormatType=2 }
    { 62  ;   ;Unit Cost           ;Decimal       ;CaptionML=ENU=Unit Cost;
                                                   AutoFormatType=2 }
    { 70  ;   ;No. Finished Rec.-Lines;Integer    ;CaptionML=ENU=No. Finished Rec.-Lines;
                                                   Editable=No }
    { 71  ;   ;Qty. Recorded (Base);Decimal       ;CaptionML=ENU=Qty. Recorded (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 72  ;   ;Quantity (Base)     ;Decimal       ;CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 73  ;   ;Entry Type          ;Option        ;CaptionML=ENU=Entry Type;
                                                   OptionCaptionML=ENU=" ,Positive Adjmt.,Negative Adjmt.";
                                                   OptionString=[ ,Positive Adjmt.,Negative Adjmt.];
                                                   Editable=No }
    { 74  ;   ;Pos. Qty. (Base)    ;Decimal       ;CaptionML=ENU=Pos. Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 75  ;   ;Neg. Qty. (Base)    ;Decimal       ;CaptionML=ENU=Neg. Qty. (Base);
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 76  ;   ;Without Difference  ;Boolean       ;CaptionML=ENU=Without Difference;
                                                   Editable=No }
    { 80  ;   ;Recorded Without Order;Boolean     ;CaptionML=ENU=Recorded Without Order;
                                                   Editable=No }
    { 90  ;   ;Shortcut Dimension 1 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(1));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(1,"Shortcut Dimension 1 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 1 Code;
                                                   CaptionClass='1,2,1' }
    { 91  ;   ;Shortcut Dimension 2 Code;Code20   ;TableRelation="Dimension Value".Code WHERE (Global Dimension No.=CONST(2));
                                                   OnValidate=BEGIN
                                                                ValidateShortcutDimCode(2,"Shortcut Dimension 2 Code");
                                                                MODIFY;
                                                              END;

                                                   CaptionML=ENU=Shortcut Dimension 2 Code;
                                                   CaptionClass='1,2,2' }
    { 100 ;   ;Shelf No.           ;Code10        ;CaptionML=ENU=Shelf No. }
    { 110 ;   ;Gen. Bus. Posting Group;Code20     ;TableRelation="Gen. Business Posting Group";
                                                   CaptionML=ENU=Gen. Bus. Posting Group }
    { 111 ;   ;Gen. Prod. Posting Group;Code20    ;TableRelation="Gen. Product Posting Group";
                                                   CaptionML=ENU=Gen. Prod. Posting Group }
    { 112 ;   ;Inventory Posting Group;Code20     ;TableRelation="Inventory Posting Group";
                                                   CaptionML=ENU=Inventory Posting Group }
    { 480 ;   ;Dimension Set ID    ;Integer       ;TableRelation="Dimension Set Entry";
                                                   OnValidate=VAR
                                                                DimMgt@1000 : Codeunit 408;
                                                              BEGIN
                                                                DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowDimensions;
                                                            END;

                                                   CaptionML=ENU=Dimension Set ID;
                                                   Editable=No }
    { 5704;   ;Item Category Code  ;Code20        ;TableRelation="Item Category";
                                                   CaptionML=ENU=Item Category Code }
    { 7380;   ;Phys Invt Counting Period Code;Code10;
                                                   TableRelation="Phys. Invt. Counting Period";
                                                   CaptionML=ENU=Phys Invt Counting Period Code;
                                                   Editable=No }
    { 7381;   ;Phys Invt Counting Period Type;Option;
                                                   CaptionML=ENU=Phys Invt Counting Period Type;
                                                   OptionCaptionML=ENU=" ,Item,SKU";
                                                   OptionString=[ ,Item,SKU];
                                                   Editable=No }
  }
  KEYS
  {
    {    ;Document No.,Line No.                   ;Clustered=Yes }
    {    ;Document No.,Item No.,Variant Code,Location Code,Bin Code }
    {    ;Document No.,Entry Type,Without Difference }
  }
  FIELDGROUPS
  {
    { 1   ;DropDown            ;Document No.,Line No.,Description        }
  }
  CODE
  {
    VAR
      CannotSetErr@1001 : TextConst '@@@="%1 and %2 - Decimal, %3 = Text";ENU="You cannot use item tracking because there is a difference between the values of the fields Qty. Expected (Base) = %1 and Qty. Exp. Item Tracking (Base) = %2.\%3"';
      IndenitiedValuesMsg@1002 : TextConst '@@@=%1,%2,%3,%4 - field captions;ENU=Identified values on the line:  %1 %2 %3 %4.';
      DifferentSumErr@1003 : TextConst '@@@="%1 = text";ENU=The value of the Qty. Recorded (Base) field is different from the sum of all Quantity (Base) fields on related physical inventory recordings.%1';
      MustSpecifyErr@1004 : TextConst '@@@="%1 = Recording No., %2 = Text";ENU=You must specify a serial number or lot number on physical inventory recording line %1 when the Use Item Tracking check box is selected.%2';
      PhysInvtOrderHeader@1005 : Record 5875;
      Item@1006 : Record 27;
      ItemVariant@1007 : Record 5401;
      UnitOfMeasure@1008 : Record 204;
      ExpPhysInvtTracking@1010 : Record 5886;
      ReservEntry@1011 : Record 337;
      SKU@1013 : Record 5700;
      BinContent@1014 : Record 7302;
      DimManagement@1015 : Codeunit 408;
      CannotRenameErr@1016 : TextConst '@@@="%1 = table caption";ENU=You cannot rename a %1.';
      PhysInvtTrackingMgt@1018 : Codeunit 5889;
      UnknownEntryTypeErr@1000 : TextConst 'ENU=Unknown Entry Type.';

    LOCAL PROCEDURE GetPhysInvtOrderHeader@1();
    BEGIN
      TESTFIELD("Document No.");
      IF "Document No." <> PhysInvtOrderHeader."No." THEN
        PhysInvtOrderHeader.GET("Document No.");
    END;

    LOCAL PROCEDURE GetItem@2();
    BEGIN
      TESTFIELD("Item No.");
      IF "Item No." <> Item."No." THEN
        Item.GET("Item No.");
    END;

    LOCAL PROCEDURE TestStatusOpen@3();
    BEGIN
      GetPhysInvtOrderHeader;
      PhysInvtOrderHeader.TESTFIELD(Status,PhysInvtOrderHeader.Status::Open);
    END;

    [External]
    PROCEDURE CalcQtyAndTrackLinesExpected@4();
    VAR
      ItemLedgEntry@1000 : Record 32;
      WhseEntry@1001 : Record 7312;
    BEGIN
      IF EmptyLine THEN
        EXIT;

      GetItem;

      GetPhysInvtOrderHeader;
      PhysInvtOrderHeader.TESTFIELD("Posting Date");

      TestStatusOpen;

      CalcQtyAndLastItemLedgExpected(
        "Qty. Expected (Base)",
        "Last Item Ledger Entry No.");

      // Create Expected Phys. Invt. Tracking Lines:
      IF "Use Item Tracking" THEN BEGIN
        ExpPhysInvtTracking.RESET;
        ExpPhysInvtTracking.SETRANGE("Order No","Document No.");
        ExpPhysInvtTracking.SETRANGE("Order Line No.","Line No.");
        ExpPhysInvtTracking.DELETEALL;

        IF NOT PhysInvtTrackingMgt.LocationIsBinMandatory("Location Code") THEN BEGIN
          ItemLedgEntry.RESET;
          ItemLedgEntry.SETCURRENTKEY(
            "Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date");
          ItemLedgEntry.SETRANGE("Item No.","Item No.");
          ItemLedgEntry.SETRANGE("Variant Code","Variant Code");
          ItemLedgEntry.SETRANGE("Location Code","Location Code");
          ItemLedgEntry.SETRANGE("Posting Date",0D,PhysInvtOrderHeader."Posting Date");
          OnCalcQtyAndTrackLinesExpectedSetItemLedgEntryFilters(ItemLedgEntry,Rec);
          IF ItemLedgEntry.FINDSET THEN
            REPEAT
              IF NOT
                 ExpPhysInvtTracking.GET(
                   "Document No.","Line No.",ItemLedgEntry."Serial No.",ItemLedgEntry."Lot No.")
              THEN BEGIN
                ExpPhysInvtTracking.InsertLine(
                  "Document No.","Line No.",ItemLedgEntry."Serial No.",ItemLedgEntry."Lot No.",ItemLedgEntry.Quantity);
                OnCalcQtyAndTrackLinesExpectedOnAfterExpPhysInvtTrackingInsertLine(ExpPhysInvtTracking,ItemLedgEntry);
              END ELSE BEGIN
                ExpPhysInvtTracking."Quantity (Base)" += ItemLedgEntry.Quantity;
                OnCalcQtyAndTrackLinesExpectedOnBeforeModifyFromItemLedgEntry(ExpPhysInvtTracking,ItemLedgEntry);
                ExpPhysInvtTracking.MODIFY;
              END;
            UNTIL ItemLedgEntry.NEXT = 0;
          ExpPhysInvtTracking.DeleteLine("Document No.","Line No.",FALSE);
          TestQtyExpected;
        END ELSE BEGIN
          IF PhysInvtTrackingMgt.GetTrackingNosFromWhse(Item) THEN BEGIN
            WhseEntry.RESET;
            WhseEntry.SETCURRENTKEY("Location Code","Bin Code","Item No.","Variant Code");
            WhseEntry.SETRANGE("Location Code","Location Code");
            WhseEntry.SETRANGE("Bin Code","Bin Code");
            WhseEntry.SETRANGE("Item No.","Item No.");
            WhseEntry.SETRANGE("Variant Code","Variant Code");
            WhseEntry.SETRANGE("Registering Date",0D,PhysInvtOrderHeader."Posting Date");
            OnCalcQtyAndTrackLinesExpectedOnAfterSetWhseEntryFilters(WhseEntry,Rec);
            IF WhseEntry.FINDSET THEN
              REPEAT
                IF NOT
                   ExpPhysInvtTracking.GET(
                     "Document No.","Line No.",WhseEntry."Serial No.",WhseEntry."Lot No.")
                THEN BEGIN
                  ExpPhysInvtTracking.InsertLine(
                    "Document No.","Line No.",WhseEntry."Serial No.",WhseEntry."Lot No.",WhseEntry."Qty. (Base)");
                  OnCalcQtyAndTrackLinesExpectedOnAfterExpPhysInvtTrackingInsertLineFromWhseEntry(ExpPhysInvtTracking,WhseEntry);
                END ELSE BEGIN
                  ExpPhysInvtTracking."Quantity (Base)" += WhseEntry."Qty. (Base)";
                  OnCalcQtyAndTrackLinesExpectedOnBeforeInsertFromWhseEntry(ExpPhysInvtTracking,WhseEntry);
                  ExpPhysInvtTracking.MODIFY;
                END;
              UNTIL WhseEntry.NEXT = 0;
            ExpPhysInvtTracking.DeleteLine("Document No.","Line No.",FALSE);
            TestQtyExpected;
          END ELSE
            // In the case of
            // ItemTrkgMgtPhysInvtLine.LocationIsBinMandatory("Location Code") = Yes and
            // ItemTrkgMgtPhysInvtLine.GetTrackingNosFromWhse(Item) = No
            // Navision cannot create the records of table ExpPhysInvtTracking
            // In this case Navision must create the Reservation Entries by
            // analyzing the ItemLedgerEntries and WhseEntries during the function to Finish the Order.
            ;
        END;
      END;

      "Qty. Exp. Calculated" := TRUE;
    END;

    [External]
    PROCEDURE CalcQtyAndLastItemLedgExpected@5(VAR QtyExpected@1000 : Decimal;VAR LastItemLedgEntryNo@1001 : Integer);
    VAR
      ItemLedgEntry@1002 : Record 32;
      WhseEntry@1003 : Record 7312;
    BEGIN
      GetPhysInvtOrderHeader;
      PhysInvtOrderHeader.TESTFIELD("Posting Date");

      TestStatusOpen;

      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Item No.");
      ItemLedgEntry.SETRANGE("Item No.","Item No.");
      IF ItemLedgEntry.FINDLAST THEN
        LastItemLedgEntryNo := ItemLedgEntry."Entry No."
      ELSE
        LastItemLedgEntryNo := 0;

      IF PhysInvtTrackingMgt.LocationIsBinMandatory("Location Code") THEN BEGIN
        TESTFIELD("Bin Code");
        WhseEntry.RESET;
        WhseEntry.SETCURRENTKEY("Location Code","Bin Code","Item No.","Variant Code");
        WhseEntry.SETRANGE("Location Code","Location Code");
        WhseEntry.SETRANGE("Bin Code","Bin Code");
        WhseEntry.SETRANGE("Item No.","Item No.");
        WhseEntry.SETRANGE("Variant Code","Variant Code");
        WhseEntry.SETRANGE("Registering Date",0D,PhysInvtOrderHeader."Posting Date");
        WhseEntry.CALCSUMS("Qty. (Base)");
        OnCalcQtyAndLastItemLedgExpectedSetWhseEntryFilters(WhseEntry,Rec);
        QtyExpected := WhseEntry."Qty. (Base)";
      END ELSE BEGIN
        TESTFIELD("Bin Code",'');
        ItemLedgEntry.RESET;

        ItemLedgEntry.SETCURRENTKEY(
          "Item No.","Entry Type","Variant Code","Drop Shipment","Location Code","Posting Date");
        ItemLedgEntry.SETRANGE("Item No.","Item No.");
        ItemLedgEntry.SETRANGE("Variant Code","Variant Code");
        ItemLedgEntry.SETRANGE("Location Code","Location Code");
        ItemLedgEntry.SETRANGE("Posting Date",0D,PhysInvtOrderHeader."Posting Date");
        OnCalcQtyAndLastItemLedgExpectedSetItemLedgEntryFilters(ItemLedgEntry,Rec);
        ItemLedgEntry.CALCSUMS(Quantity);
        QtyExpected := ItemLedgEntry.Quantity;
      END;
    END;

    [External]
    PROCEDURE ResetQtyExpected@6();
    BEGIN
      "Qty. Expected (Base)" := 0;

      ExpPhysInvtTracking.DeleteLine("Document No.","Line No.",TRUE);
      CALCFIELDS("Qty. Exp. Item Tracking (Base)");

      "Qty. Exp. Calculated" := FALSE;

      OnAfterResetQtyExpected(Rec);
    END;

    [External]
    PROCEDURE TestQtyExpected@7();
    BEGIN
      IF "Use Item Tracking" THEN BEGIN
        IF PhysInvtTrackingMgt.LocationIsBinMandatory("Location Code") AND
           NOT PhysInvtTrackingMgt.GetTrackingNosFromWhse(Item)
        THEN
          EXIT;

        CALCFIELDS("Qty. Exp. Item Tracking (Base)");
        IF "Qty. Expected (Base)" <> "Qty. Exp. Item Tracking (Base)" THEN
          ERROR(
            STRSUBSTNO(
              CannotSetErr,
              "Qty. Expected (Base)","Qty. Exp. Item Tracking (Base)",
              STRSUBSTNO(IndenitiedValuesMsg,"Item No.","Variant Code","Location Code","Bin Code")));
      END;
    END;

    [External]
    PROCEDURE TestQtyRecorded@8();
    VAR
      PhysInvtRecordLine@1000 : Record 5878;
      Sum@1001 : Decimal;
    BEGIN
      Sum := 0;

      PhysInvtRecordLine.RESET;
      PhysInvtRecordLine.SETCURRENTKEY("Order No.","Order Line No.");
      PhysInvtRecordLine.SETRANGE("Order No.","Document No.");
      PhysInvtRecordLine.SETRANGE("Order Line No.","Line No.");
      IF PhysInvtRecordLine.FIND('-') THEN
        REPEAT
          PhysInvtRecordLine.TESTFIELD("Item No.","Item No.");
          PhysInvtRecordLine.TESTFIELD("Variant Code","Variant Code");
          PhysInvtRecordLine.TESTFIELD("Location Code","Location Code");
          PhysInvtRecordLine.TESTFIELD("Bin Code","Bin Code");
          IF "Use Item Tracking" THEN
            IF (PhysInvtRecordLine."Quantity (Base)" <> 0) AND
               (PhysInvtRecordLine."Serial No." = '') AND
               (PhysInvtRecordLine."Lot No." = '')
            THEN
              ERROR(
                STRSUBSTNO(
                  MustSpecifyErr,PhysInvtRecordLine."Recording No.",
                  STRSUBSTNO(IndenitiedValuesMsg,"Item No.","Variant Code","Location Code","Bin Code")));
          Sum := Sum + PhysInvtRecordLine."Quantity (Base)";
        UNTIL PhysInvtRecordLine.NEXT = 0;

      IF "Qty. Recorded (Base)" <> Sum THEN
        ERROR(
          STRSUBSTNO(
            DifferentSumErr,
            STRSUBSTNO(IndenitiedValuesMsg,"Item No.","Variant Code","Location Code","Bin Code")));
    END;

    [External]
    PROCEDURE CalcCosts@9();
    VAR
      ItemJnlLine@1000 : Record 83;
    BEGIN
      IF EmptyLine THEN
        EXIT;
      TESTFIELD("Item No.");

      TestStatusOpen;
      TESTFIELD("Qty. Exp. Calculated",TRUE);
      TESTFIELD("On Recording Lines",TRUE);

      GetPhysInvtOrderHeader;

      ItemJnlLine.INIT;
      ItemJnlLine."Posting Date" := PhysInvtOrderHeader."Posting Date";
      CASE "Entry Type" OF
        "Entry Type"::"Positive Adjmt.":
          ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::"Positive Adjmt.";
        "Entry Type"::"Negative Adjmt.":
          ItemJnlLine."Entry Type" := ItemJnlLine."Entry Type"::"Negative Adjmt.";
        ELSE
          ERROR(UnknownEntryTypeErr);
      END;

      ItemJnlLine.VALIDATE("Item No.","Item No.");
      ItemJnlLine.VALIDATE("Variant Code","Variant Code");
      ItemJnlLine.VALIDATE("Location Code","Location Code");

      VALIDATE("Unit Amount",ItemJnlLine."Unit Amount");
      VALIDATE("Unit Cost",ItemJnlLine."Unit Cost");
    END;

    [External]
    PROCEDURE CheckLine@24();
    BEGIN
      TESTFIELD("Item No.");
      TESTFIELD("Qty. Exp. Calculated",TRUE);
      TestQtyExpected;
      TESTFIELD("On Recording Lines",TRUE);
      TestQtyRecorded;
    END;

    [External]
    PROCEDURE EmptyLine@10() : Boolean;
    BEGIN
      EXIT(
        ("Item No." = '') AND
        ("Variant Code" = '') AND
        ("Location Code" = '') AND
        ("Bin Code" = '') );
    END;

    [External]
    PROCEDURE PrepareLine@26(DocNo@1000 : Code[20];LineNo@1001 : Integer;ItemNo@1002 : Code[20];VariantCode@1003 : Code[10];LocationCode@1004 : Code[10];BinCode@1005 : Code[20];PeriodCode@1006 : Code[10];PeriodType@1007 : Option);
    BEGIN
      INIT;
      "Document No." := DocNo;
      "Line No." := LineNo;
      VALIDATE("Item No.",ItemNo);
      VALIDATE("Variant Code",VariantCode);
      VALIDATE("Location Code",LocationCode);
      VALIDATE("Bin Code",BinCode);
      "Phys Invt Counting Period Code" := PeriodCode;
      "Phys Invt Counting Period Type" := PeriodType;
      "Recorded Without Order" := FALSE;
    END;

    [External]
    PROCEDURE ShowDimensions@11();
    BEGIN
      IF EmptyLine THEN
        EXIT;
      "Dimension Set ID" :=
        DimManagement.EditDimensionSet2(
          "Dimension Set ID",STRSUBSTNO('%1 %2 %3',TABLECAPTION,"Document No.","Line No."),
          "Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    [External]
    PROCEDURE CreateDim@12(Type1@1000 : Integer;No1@1001 : Code[20]);
    VAR
      SourceCodeSetup@1002 : Record 242;
      TableID@1003 : ARRAY [10] OF Integer;
      No@1004 : ARRAY [10] OF Code[20];
    BEGIN
      SourceCodeSetup.GET;
      TableID[1] := Type1;
      No[1] := No1;
      OnAfterCreateDimTableIDs(Rec,CurrFieldNo,TableID,No);

      "Shortcut Dimension 1 Code" := '';
      "Shortcut Dimension 2 Code" := '';
      GetPhysInvtOrderHeader;
      "Dimension Set ID" :=
        DimManagement.GetDefaultDimID(TableID,No,SourceCodeSetup."Phys. Invt. Orders","Shortcut Dimension 1 Code",
          "Shortcut Dimension 2 Code",PhysInvtOrderHeader."Dimension Set ID",0);
      DimManagement.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
    END;

    [External]
    PROCEDURE ValidateShortcutDimCode@13(FieldNo@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimManagement.ValidateShortcutDimValues(FieldNo,ShortcutDimCode,"Dimension Set ID");
    END;

    [External]
    PROCEDURE LookupShortcutDimCode@14(FieldNo@1000 : Integer;VAR ShortcutDimCode@1001 : Code[20]);
    BEGIN
      DimManagement.LookupDimValueCode(FieldNo,ShortcutDimCode);
      DimManagement.ValidateShortcutDimValues(FieldNo,ShortcutDimCode,"Dimension Set ID");
    END;

    [External]
    PROCEDURE ShowShortcutDimCode@15(VAR ShortcutDimCode@1000 : ARRAY [8] OF Code[20]);
    BEGIN
      DimManagement.GetShortcutDimensions("Dimension Set ID",ShortcutDimCode);
    END;

    [External]
    PROCEDURE ShowPhysInvtRecordingLines@16();
    VAR
      PhysInvtRecordLine@1000 : Record 5878;
    BEGIN
      IF EmptyLine THEN
        EXIT;

      TESTFIELD("Item No.");
      TESTFIELD("On Recording Lines",TRUE);

      PhysInvtRecordLine.RESET;
      PhysInvtRecordLine.SETCURRENTKEY("Order No.","Order Line No.");
      PhysInvtRecordLine.SETRANGE("Order No.","Document No.");
      PhysInvtRecordLine.SETRANGE("Order Line No.","Line No.");
      PAGE.RUNMODAL(0,PhysInvtRecordLine);
    END;

    [External]
    PROCEDURE ShowExpectPhysInvtTrackLines@17();
    BEGIN
      IF EmptyLine THEN
        EXIT;

      TESTFIELD("Item No.");
      TESTFIELD("Qty. Exp. Calculated",TRUE);

      ExpPhysInvtTracking.RESET;
      ExpPhysInvtTracking.SETRANGE("Order No","Document No.");
      ExpPhysInvtTracking.SETRANGE("Order Line No.","Line No.");
      PAGE.RUNMODAL(0,ExpPhysInvtTracking);
    END;

    [External]
    PROCEDURE ShowItemTrackingLines@18(Which@1000 : 'All,Positive,Negative');
    BEGIN
      IF EmptyLine THEN
        EXIT;
      TESTFIELD("Item No.");

      PhysInvtOrderHeader.GET("Document No.");
      PhysInvtOrderHeader.TESTFIELD(Status,PhysInvtOrderHeader.Status::Finished);

      ReservEntry.RESET;
      ReservEntry.SetSourceFilter(DATABASE::"Phys. Invt. Order Line",0,"Document No.","Line No.",TRUE);
      ReservEntry.SetSourceFilter2('',0);
      CASE Which OF
        Which::All:
          ReservEntry.SETRANGE(Positive);
        Which::Positive:
          ReservEntry.SETRANGE(Positive,TRUE);
        Which::Negative:
          ReservEntry.SETRANGE(Positive,FALSE);
      END;

      PAGE.RUNMODAL(PAGE::"Phys. Invt. Item Track. List",ReservEntry);
    END;

    [External]
    PROCEDURE ShowItemLedgerEntries@19();
    VAR
      ItemLedgEntry@1000 : Record 32;
    BEGIN
      IF EmptyLine THEN
        EXIT;

      TESTFIELD("Item No.");
      GetPhysInvtOrderHeader;
      PhysInvtOrderHeader.TESTFIELD("Posting Date");

      ItemLedgEntry.SetItemVariantLocationFilters(
        "Item No.","Variant Code","Location Code",PhysInvtOrderHeader."Posting Date");
      OnBeforeShowItemLedgerEntries(ItemLedgEntry,Rec);
      PAGE.RUNMODAL(0,ItemLedgEntry);
    END;

    [External]
    PROCEDURE ShowPhysInvtLedgerEntries@20();
    VAR
      PhysInvtLedgEntry@1000 : Record 281;
    BEGIN
      IF EmptyLine THEN
        EXIT;

      TESTFIELD("Item No.");
      GetPhysInvtOrderHeader;
      PhysInvtOrderHeader.TESTFIELD("Posting Date");

      PhysInvtLedgEntry.RESET;
      PhysInvtLedgEntry.SETCURRENTKEY("Item No.","Variant Code","Location Code","Posting Date");
      PhysInvtLedgEntry.SETRANGE("Item No.","Item No.");
      PhysInvtLedgEntry.SETRANGE("Variant Code","Variant Code");
      PhysInvtLedgEntry.SETRANGE("Location Code","Location Code");
      PhysInvtLedgEntry.SETRANGE("Posting Date",0D,PhysInvtOrderHeader."Posting Date");
      OnBeforeShowPhysInvtLedgerEntries(PhysInvtLedgEntry,Rec);
      PAGE.RUNMODAL(0,PhysInvtLedgEntry);
    END;

    LOCAL PROCEDURE GetShelfNo@38();
    BEGIN
      GetItem;
      "Shelf No." := Item."Shelf No.";
      GetFieldsFromSKU;
    END;

    [External]
    PROCEDURE GetFieldsFromSKU@21();
    BEGIN
      IF SKU.GET("Location Code","Item No.","Variant Code") THEN
        VALIDATE("Shelf No.",SKU."Shelf No.");
    END;

    [External]
    PROCEDURE ShowBinContentItem@22();
    BEGIN
      BinContent.RESET;
      BinContent.SETCURRENTKEY("Item No.");
      BinContent.SETRANGE("Item No.","Item No.");

      PAGE.RUNMODAL(0,BinContent);
    END;

    [External]
    PROCEDURE ShowBinContentBin@23();
    BEGIN
      BinContent.RESET;
      BinContent.SETCURRENTKEY("Location Code","Bin Code");
      BinContent.SETRANGE("Location Code","Location Code");
      BinContent.SETRANGE("Bin Code","Bin Code");

      PAGE.RUNMODAL(0,BinContent);
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterCreateDimTableIDs@36(VAR PhysInvtOrderLine@1000 : Record 5876;CurrentFieldID@1001 : Integer;VAR TableID@1003 : ARRAY [10] OF Integer;VAR No@1002 : ARRAY [10] OF Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnAfterResetQtyExpected@33(VAR PhysInvtOrderLine@1000 : Record 5876);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowItemLedgerEntries@25(VAR ItemLedgerEntry@1000 : Record 32;VAR PhysInvtOrderLine@1001 : Record 5876);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeShowPhysInvtLedgerEntries@27(VAR PhysInventoryLedgerEntry@1000 : Record 281;VAR PhysInvtOrderLine@1001 : Record 5876);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalcQtyAndLastItemLedgExpectedSetItemLedgEntryFilters@32(VAR ItemLedgerEntry@1000 : Record 32;VAR PhysInvtOrderLine@1001 : Record 5876);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalcQtyAndLastItemLedgExpectedSetWhseEntryFilters@31(VAR WarehouseEntry@1000 : Record 7312;VAR PhysInvtOrderLine@1001 : Record 5876);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalcQtyAndTrackLinesExpectedSetItemLedgEntryFilters@29(VAR ItemLedgerEntry@1000 : Record 32;VAR PhysInvtOrderLine@1001 : Record 5876);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalcQtyAndTrackLinesExpectedOnAfterExpPhysInvtTrackingInsertLine@30(VAR ExpPhysInvtTracking@1001 : Record 5886;VAR ItemLedgerEntry@1000 : Record 32);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalcQtyAndTrackLinesExpectedOnAfterExpPhysInvtTrackingInsertLineFromWhseEntry@37(VAR ExpPhysInvtTracking@1000 : Record 5886;WarehouseEntry@1001 : Record 7312);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalcQtyAndTrackLinesExpectedOnAfterSetWhseEntryFilters@35(VAR WarehouseEntry@1000 : Record 7312;PhysInvtOrderLine@1001 : Record 5876);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalcQtyAndTrackLinesExpectedOnBeforeModifyFromItemLedgEntry@28(VAR ExpPhysInvtTracking@1000 : Record 5886;VAR ItemLedgerEntry@1001 : Record 32);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalcQtyAndTrackLinesExpectedOnBeforeInsertFromWhseEntry@34(VAR ExpPhysInvtTracking@1000 : Record 5886;VAR WarehouseEntry@1001 : Record 7312);
    BEGIN
    END;

    BEGIN
    END.
  }
}

