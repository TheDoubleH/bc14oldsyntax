OBJECT Codeunit 10145 E-Invoice Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=09/23/22;
    Time=12:00:00 PM;
    Version List=NAVNA14.41;
  }
  PROPERTIES
  {
    Permissions=TableData 110=rimd,
                TableData 112=rimd,
                TableData 114=rimd,
                TableData 5744=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Customer@1020005 : Record 18;
      GLSetup@1020004 : Record 98;
      CompanyInfo@1020000 : Record 79;
      SourceCodeSetup@1020001 : Record 242;
      DocNameSpace@1020009 : Text;
      Text000@1020012 : TextConst 'ENU=Dear customer, please find invoice number %1 in the attachment.';
      PaymentAttachmentMsg@1020016 : TextConst '@@@="%1=The payment number.";ENU=Dear customer, please find payment number %1 in the attachment.';
      Text001@1020018 : TextConst 'ENU=E-Document %1 has been sent.';
      Text002@1020002 : TextConst 'ENU=One or more invoices have already been sent.\Do you want to continue?';
      PaymentsAlreadySentQst@1020015 : TextConst 'ENU=One or more payments have already been sent.\Do you want to continue?';
      Text004@1020006 : TextConst 'ENU=Dear customer, please find credit memo number %1 in the attachment.';
      Text005@1020010 : TextConst 'ENU=Invoice no. %1.';
      Text006@1020011 : TextConst 'ENU=Credit memo no. %1.';
      Export@1020007 : Boolean;
      PaymentNoMsg@1020017 : TextConst '@@@="%1=The payment number.";ENU=Payment no. %1.';
      Text007@1020008 : TextConst 'ENU=You cannot perform this action on a deleted document.';
      Text008@1020013 : TextConst 'ENU=&Request Stamp,&Send,Request Stamp &and Send';
      Text009@1020020 : TextConst 'ENU=Cannot find a valid PAC web service for the action %1.\You must specify web service details for the combination of the %1 action and the %2 and %3 that you have selected in the %4 window.';
      Text010@1020022 : TextConst 'ENU=You cannot choose the action %1 when the document status is %2.';
      EDocAction@1020023 : 'Request Stamp,Send,Cancel';
      Text011@1020024 : TextConst 'ENU=There is no electronic stamp for document no. %1.\Do you want to continue?';
      MethodType@1020025 : 'Request Stamp,Cancel';
      Text012@1020026 : TextConst '@@@="%1=Certificate;%2=PACWebService table caption;%3=GLSetup table caption";ENU=Cannot contact the PAC. You must specify a value for the %1 field in the %2 window for the PAC that you selected in the %3 window.';
      Text013@1020027 : TextConst 'ENU=Request Stamp,Send,Cancel';
      Text014@1020028 : TextConst 'ENU=You cannot perform this action because the %1 field in the %2 window is set to %3.';
      Text015@1020030 : TextConst 'ENU=Do you want to cancel the electronic document?';
      Text016@1020003 : TextConst 'ENU=The SMTP mail system returned the following error: %1.';
      FileDialogTxt@1020029 : TextConst 'ENU=Import electronic invoice';
      ImportFailedErr@1020031 : TextConst 'ENU=The import failed. The XML document is not a valid electronic invoice.';
      StampErr@1020014 : TextConst '@@@="%1=Document Type";ENU=You have chosen the document type %1. You can only request and send documents if the document type is Payment.';
      UnableToStampErr@1020019 : TextConst 'ENU=An existing payment is applied to the invoice that has not been stamped. That payment must be stamped before you can request a stamp for any additional payments.';
      UnableToStampAppliedErr@1020021 : TextConst '@@@="%1=The invoice number.";ENU=The prepayment invoice %1 has not been stamped. That invoice must be stamped before you can request a stamp for this applied invoice.';
      CurrencyDecimalPlaces@1020033 : Integer;
      MXElectronicInvoicingLbl@1310000 : TextConst 'ENU=Electronic Invoice Setup for Mexico';
      SATNotValidErr@1310001 : TextConst 'ENU=The SAT certificate is not valid.';
      NoRelationDocumentsExistErr@1310002 : TextConst 'ENU=No relation documents specified for the replacement of previous CFDIs.';
      GLSetupRead@1310003 : Boolean;
      FileFilterTxt@1310004 : TextConst '@@@={Locked};ENU=XML Files(*.xml)|*.xml|All Files(*.*)|*.*';
      ExtensionFilterTxt@1310005 : TextConst '@@@={Locked};ENU=xml';
      EmptySATCatalogErr@1310006 : TextConst '@@@=%1 - table name.;ENU=Catalog %1 is empty.';
      PACDetailDoesNotExistErr@1310007 : TextConst '@@@="%1 - table name, %2 - PAC Code, %3 - PAC environment, %4 - type. ";ENU=Record %1 does not exist for %2, %3, %4.';
      WrongFieldValueErr@13100010 : TextConst '@@@=%1 - field value, %2 - field caption, %3 - table caption.;ENU=Wrong value %1 in field %2 of table %3.';
      WrongSATCatalogErr@1310008 : TextConst '@@@=%1 - table name.;ENU=Catalog %1 contains incorrect data.';
      CombinationCannotBeUsedErr@1310009 : TextConst '@@@=%1 - field 1, %2 - value of field 1, %3 - field 2, %4 - value of field 2.;ENU=%1 %2 cannot be used with %3 %4.';
      NumeroPedimentoFormatTxt@1310110 : TextConst '@@@="%1 year; %2 - customs office; %3 patent number; %4 progressive number.";ENU=%1  %2  %3  %4';

    [External]
    PROCEDURE RequestStampDocument@1020000(VAR RecRef@1020000 : RecordRef;Prepayment@1020001 : Boolean);
    VAR
      Selection@1020003 : Integer;
      ElectronicDocumentStatus@1020006 : Option;
    BEGIN
      // Called from Send Action
      Export := FALSE;
      GetCompanyInfo;
      GetGLSetupOnce;
      SourceCodeSetup.GET;

      IF RecRef.NUMBER IN [DATABASE::"Sales Shipment Header",DATABASE::"Transfer Shipment Header"] THEN
        Selection := 1
      ELSE
        Selection := STRMENU(Text008,3);

      ElectronicDocumentStatus := RecRef.FIELD(10030).VALUE;

      CASE Selection OF
        1:// Request Stamp
          BEGIN
            EDocActionValidation(EDocAction::"Request Stamp",ElectronicDocumentStatus);
            RequestStamp(RecRef,Prepayment,FALSE);
          END;
        2:// Send
          BEGIN
            EDocActionValidation(EDocAction::Send,ElectronicDocumentStatus);
            Send(RecRef,FALSE);
          END;
        3:// Request Stamp and Send
          BEGIN
            EDocActionValidation(EDocAction::"Request Stamp",ElectronicDocumentStatus);
            RequestStamp(RecRef,Prepayment,FALSE);
            COMMIT;
            ElectronicDocumentStatus := RecRef.FIELD(10030).VALUE;
            EDocActionValidation(EDocAction::Send,ElectronicDocumentStatus);
            Send(RecRef,FALSE);
          END;
      END;
    END;

    [External]
    PROCEDURE CancelDocument@1020029(VAR RecRef@1020000 : RecordRef);
    VAR
      SalesInvHeader@1020002 : Record 112;
      SalesCrMemoHeader@1020001 : Record 114;
      ServiceInvHeader@1020004 : Record 5992;
      ServiceCrMemoHeader@1020005 : Record 5994;
      CustLedgerEntry@1020003 : Record 21;
      SalesShipmentHeader@1310000 : Record 110;
      TransferShipmentHeader@1310001 : Record 5744;
    BEGIN
      IF NOT CONFIRM(Text015,FALSE) THEN
        EXIT;
      Export := FALSE;
      GetCheckCompanyInfo;
      GetGLSetup;
      SourceCodeSetup.GET;

      CASE RecRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            RecRef.SETTABLE(SalesInvHeader);
            EDocActionValidation(EDocAction::Cancel,SalesInvHeader."Electronic Document Status");
            CancelESalesInvoice(SalesInvHeader);
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            RecRef.SETTABLE(SalesCrMemoHeader);
            EDocActionValidation(EDocAction::Cancel,SalesCrMemoHeader."Electronic Document Status");
            CancelESalesCrMemo(SalesCrMemoHeader);
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            RecRef.SETTABLE(ServiceInvHeader);
            EDocActionValidation(EDocAction::Cancel,ServiceInvHeader."Electronic Document Status");
            CancelEServiceInvoice(ServiceInvHeader);
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            RecRef.SETTABLE(ServiceCrMemoHeader);
            EDocActionValidation(EDocAction::Cancel,ServiceCrMemoHeader."Electronic Document Status");
            CancelEServiceCrMemo(ServiceCrMemoHeader);
          END;
        DATABASE::"Cust. Ledger Entry":
          BEGIN
            RecRef.SETTABLE(CustLedgerEntry);
            EDocActionValidation(EDocAction::Cancel,CustLedgerEntry."Electronic Document Status");
            CancelEPayment(CustLedgerEntry);
          END;
        DATABASE::"Sales Shipment Header":
          BEGIN
            RecRef.SETTABLE(SalesShipmentHeader);
            EDocActionValidation(EDocAction::Cancel,SalesShipmentHeader."Electronic Document Status");
            CancelESalesShipment(SalesShipmentHeader);
          END;
        DATABASE::"Transfer Shipment Header":
          BEGIN
            RecRef.SETTABLE(TransferShipmentHeader);
            EDocActionValidation(EDocAction::Cancel,TransferShipmentHeader."Electronic Document Status");
            CancelETransferShipment(TransferShipmentHeader);
          END;
      END;
    END;

    [External]
    PROCEDURE EDocActionValidation@1020028(Action@1020000 : 'Request Stamp,Send,Cancel';Status@1020001 : ' ,Stamp Received,Sent,Canceled,Stamp Request Error,Cancel Error') Selection : Integer;
    VAR
      TempSalesInvoiceHeader@1020002 : TEMPORARY Record 112;
    BEGIN
      TempSalesInvoiceHeader."Electronic Document Status" := Status;

      IF Action = Action::"Request Stamp" THEN
        IF Status IN [Status::"Stamp Received",Status::Sent,Status::"Cancel Error",Status::Canceled] THEN
          ERROR(Text010,SELECTSTR(Action + 1,Text013),TempSalesInvoiceHeader."Electronic Document Status");

      IF Action = Action::Send THEN
        IF Status IN [Status::" ",Status::Canceled,Status::"Cancel Error",Status::"Stamp Request Error"] THEN
          ERROR(Text010,SELECTSTR(Action + 1,Text013),TempSalesInvoiceHeader."Electronic Document Status");

      IF Action = Action::Cancel THEN
        IF Status IN [Status::" ",Status::Canceled,Status::"Stamp Request Error"] THEN
          ERROR(Text010,SELECTSTR(Action + 1,Text013),TempSalesInvoiceHeader."Electronic Document Status");
    END;

    [External]
    PROCEDURE EDocPrintValidation@1020013(EDocStatus@1020001 : ' ,Stamp Received,Sent,Canceled,Stamp Request Error,Cancel Error';DocNo@1020000 : Code[20]);
    BEGIN
      GetGLSetupOnce;
      IF IsPACEnvironmentEnabled AND
         (EDocStatus IN [EDocStatus::" ",EDocStatus::Canceled,EDocStatus::"Cancel Error",EDocStatus::"Stamp Request Error"])
      THEN
        IF NOT CONFIRM(STRSUBSTNO(Text011,DocNo)) THEN
          ERROR('');
    END;

    LOCAL PROCEDURE RequestStamp@1020082(VAR DocumentHeaderRecordRef@1020000 : RecordRef;Prepayment@1020024 : Boolean;Reverse@1020031 : Boolean);
    VAR
      TempDocumentHeader@1020004 : TEMPORARY Record 10002;
      TempDocumentLine@1020018 : TEMPORARY Record 10003;
      SalesInvoiceHeader@1020017 : Record 112;
      SalesCrMemoHeader@1020021 : Record 114;
      ServiceInvoiceHeader@1020016 : Record 5992;
      ServiceCrMemoHeader@1020015 : Record 5994;
      SalesShipmentHeader@1310007 : Record 110;
      TransferShipmentHeader@1310008 : Record 5744;
      TempBlobOriginalString@1020008 : Record 99008535;
      TempBlobDigitalStamp@1020019 : Record 99008535;
      CFDIDocuments@1020032 : Record 27005;
      TempCFDIRelationDocument@1310000 : TEMPORARY Record 27006;
      XMLDOMManagement@1020010 : Codeunit 6224;
      OutStrOriginalDoc@1020012 : OutStream;
      OutStrSignedDoc@1020020 : OutStream;
      XMLDoc@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocResult@1170000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Environment@1020022 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Environment";
      OriginalString@1020006 : Text;
      SignedString@1020007 : Text;
      Certificate@1020005 : Text;
      Response@1020002 : Text;
      DateTimeFirstReqSent@1020003 : Text[50];
      CertificateSerialNo@1020014 : Text[250];
      UUID@1020028 : Text[50];
      AdvanceSettle@1020029 : Boolean;
      AdvanceAmount@1020030 : Decimal;
      SalesInvoiceNumber@1020023 : Code[20];
      IsTransfer@1310009 : Boolean;
    BEGIN
      Export := TRUE;

      CASE DocumentHeaderRecordRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            DocumentHeaderRecordRef.SETTABLE(SalesInvoiceHeader);
            IF NOT Reverse THEN // If reverse, AdvanceSettle must be false else you fall into an infinite loop
              AdvanceSettle := IsInvoicePrepaymentSettle(SalesInvoiceHeader."No.",AdvanceAmount)
            ELSE BEGIN
              UUID := SalesInvoiceHeader."Fiscal Invoice Number PAC";
              AdvanceAmount := GetAdvanceAmountFromSettledInvoice(SalesInvoiceHeader);
            END;
            IF AdvanceSettle THEN BEGIN
              UUID := GetUUIDFromOriginalPrepayment(SalesInvoiceHeader,SalesInvoiceNumber);
              IF UUID = '' THEN
                ERROR(UnableToStampAppliedErr,SalesInvoiceNumber);
            END;
            CreateAbstractDocument(SalesInvoiceHeader,TempDocumentHeader,TempDocumentLine,AdvanceSettle);
            IF NOT Reverse AND NOT AdvanceSettle THEN
              GetRelationDocumentsInvoice(TempCFDIRelationDocument,TempDocumentHeader,DATABASE::"Sales Invoice Header");
            CheckSalesDocument(
              SalesInvoiceHeader,TempDocumentHeader,TempDocumentLine,TempCFDIRelationDocument,SalesInvoiceHeader."Source Code");
            DateTimeFirstReqSent := GetDateTimeOfFirstReqSalesInv(SalesInvoiceHeader);
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            DocumentHeaderRecordRef.SETTABLE(SalesCrMemoHeader);
            CreateAbstractDocument(SalesCrMemoHeader,TempDocumentHeader,TempDocumentLine,FALSE);
            GetRelationDocumentsSalesCreditMemo(TempCFDIRelationDocument,SalesCrMemoHeader,TempDocumentHeader);
            CheckSalesDocument(
              SalesCrMemoHeader,TempDocumentHeader,TempDocumentLine,TempCFDIRelationDocument,SalesCrMemoHeader."Source Code");
            DateTimeFirstReqSent := GetDateTimeOfFirstReqSalesCr(SalesCrMemoHeader);
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            DocumentHeaderRecordRef.SETTABLE(ServiceInvoiceHeader);
            CreateAbstractDocument(ServiceInvoiceHeader,TempDocumentHeader,TempDocumentLine,FALSE);
            IF NOT Reverse AND NOT AdvanceSettle THEN
              GetRelationDocumentsInvoice(TempCFDIRelationDocument,TempDocumentHeader,DATABASE::"Service Invoice Header");
            CheckSalesDocument(
              ServiceInvoiceHeader,TempDocumentHeader,TempDocumentLine,TempCFDIRelationDocument,ServiceInvoiceHeader."Source Code");
            DateTimeFirstReqSent := GetDateTimeOfFirstReqServInv(ServiceInvoiceHeader);
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            DocumentHeaderRecordRef.SETTABLE(ServiceCrMemoHeader);
            CreateAbstractDocument(ServiceCrMemoHeader,TempDocumentHeader,TempDocumentLine,FALSE);
            GetRelationDocumentsServiceCreditMemo(TempCFDIRelationDocument,ServiceCrMemoHeader,TempDocumentHeader);
            CheckSalesDocument(
              ServiceCrMemoHeader,TempDocumentHeader,TempDocumentLine,TempCFDIRelationDocument,ServiceCrMemoHeader."Source Code");
            DateTimeFirstReqSent := GetDateTimeOfFirstReqServCr(ServiceCrMemoHeader);
          END;
        DATABASE::"Sales Shipment Header":
          BEGIN
            IsTransfer := TRUE;
            DocumentHeaderRecordRef.SETTABLE(SalesShipmentHeader);
            CreateTempDocumentTransfer(SalesShipmentHeader,TempDocumentHeader,TempDocumentLine);
            CheckTransferDocument(SalesShipmentHeader,TempDocumentHeader,TempDocumentLine);
            IF SalesShipmentHeader."Date/Time First Req. Sent" = '' THEN
              SalesShipmentHeader."Date/Time First Req. Sent" :=
                FormatAsDateTime(SalesShipmentHeader."Document Date",TIME,GetTimeZoneFromDocument(SalesShipmentHeader));
            DateTimeFirstReqSent := SalesShipmentHeader."Date/Time First Req. Sent";
          END;
        DATABASE::"Transfer Shipment Header":
          BEGIN
            IsTransfer := TRUE;
            DocumentHeaderRecordRef.SETTABLE(TransferShipmentHeader);
            CreateTempDocumentTransfer(TransferShipmentHeader,TempDocumentHeader,TempDocumentLine);
            CheckTransferDocument(
              TransferShipmentHeader,TempDocumentHeader,TempDocumentLine);
            IF TransferShipmentHeader."Date/Time First Req. Sent" = '' THEN
              TransferShipmentHeader."Date/Time First Req. Sent" :=
                FormatAsDateTime(TransferShipmentHeader."Posting Date",TIME,GetTimeZoneFromDocument(TransferShipmentHeader));
            DateTimeFirstReqSent := TransferShipmentHeader."Date/Time First Req. Sent";
          END;
      END;

      GetCustomer(TempDocumentHeader."Bill-to/Pay-To No.");

      CurrencyDecimalPlaces := GetCurrencyDecimalPlaces(TempDocumentHeader."Currency Code");

      CreateOriginalString(
        TempDocumentHeader,TempDocumentLine,TempCFDIRelationDocument,
        TempBlobOriginalString,DateTimeFirstReqSent,UUID,IsTransfer,Reverse,AdvanceAmount,Prepayment,AdvanceSettle);

      OriginalString := TempBlobOriginalString.ReadAsText(Environment.NewLine,TEXTENCODING::MSDos);
      CreateDigitalSignature(OriginalString,SignedString,CertificateSerialNo,Certificate);
      TextToBlob(TempBlobDigitalStamp,SignedString);

      CreateOriginalXML(
        TempDocumentHeader,TempDocumentLine,TempCFDIRelationDocument,
        XMLDoc,SignedString,Certificate,CertificateSerialNo,DateTimeFirstReqSent,UUID,
        IsTransfer,Reverse,AdvanceAmount,Prepayment,AdvanceSettle);

      CASE DocumentHeaderRecordRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          WITH SalesInvoiceHeader DO
            IF NOT Reverse THEN BEGIN
              "Original String" := TempBlobOriginalString.Blob;
              "Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
              "Certificate Serial No." := CertificateSerialNo;
              "Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
              "Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
              XMLDoc.Save(OutStrOriginalDoc);
              MODIFY;
            END ELSE BEGIN
              IF NOT CFDIDocuments.GET("No.",DATABASE::"Sales Invoice Header",TRUE,TRUE) THEN BEGIN
                CFDIDocuments.INIT;
                CFDIDocuments."No." := "No.";
                CFDIDocuments."Document Table ID" := DATABASE::"Sales Invoice Header";
                CFDIDocuments.Prepayment := TRUE;
                CFDIDocuments.Reversal := TRUE;
                CFDIDocuments.INSERT;
              END;

              CFDIDocuments."Original String" := TempBlobOriginalString.Blob;
              CFDIDocuments."Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
              CFDIDocuments."Certificate Serial No." := CertificateSerialNo;
              CFDIDocuments."Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
              CFDIDocuments."Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
              XMLDoc.Save(OutStrOriginalDoc);
              MODIFY;
            END;
        DATABASE::"Sales Cr.Memo Header":
          WITH SalesCrMemoHeader DO BEGIN
            "Original String" := TempBlobOriginalString.Blob;
            "Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
            "Certificate Serial No." := CertificateSerialNo;
            "Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
            "Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
            XMLDoc.Save(OutStrOriginalDoc);
            MODIFY;
          END;
        DATABASE::"Service Invoice Header":
          WITH ServiceInvoiceHeader DO BEGIN
            "Original String" := TempBlobOriginalString.Blob;
            "Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
            "Certificate Serial No." := CertificateSerialNo;
            "Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
            "Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
            XMLDoc.Save(OutStrOriginalDoc);
            MODIFY;
          END;
        DATABASE::"Service Cr.Memo Header":
          WITH ServiceCrMemoHeader DO BEGIN
            "Original String" := TempBlobOriginalString.Blob;
            "Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
            "Certificate Serial No." := CertificateSerialNo;
            "Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
            "Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
            XMLDoc.Save(OutStrOriginalDoc);
            MODIFY;
          END;
        DATABASE::"Sales Shipment Header":
          WITH SalesShipmentHeader DO BEGIN
            "Original String" := TempBlobOriginalString.Blob;
            "Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
            "Certificate Serial No." := CertificateSerialNo;
            "Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
            "Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
            XMLDoc.Save(OutStrOriginalDoc);
            MODIFY;
          END;
        DATABASE::"Transfer Shipment Header":
          WITH TransferShipmentHeader DO BEGIN
            "Original String" := TempBlobOriginalString.Blob;
            "Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
            "Certificate Serial No." := CertificateSerialNo;
            "Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
            "Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
            XMLDoc.Save(OutStrOriginalDoc);
            MODIFY;
          END;
      END;

      COMMIT;

      Response := InvokeMethod(XMLDoc,MethodType::"Request Stamp");

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        IF Reverse THEN
          WITH CFDIDocuments DO BEGIN
            XMLDOMManagement.LoadXMLDocumentFromText(Response,XMLDocResult);
            XMLDocResult.Save(OutStrSignedDoc);
            MODIFY;
          END;
        IF NOT Reverse THEN BEGIN
          XMLDOMManagement.LoadXMLDocumentFromText(Response,XMLDocResult);
          XMLDocResult.Save(OutStrSignedDoc);
        END;
      END;

      CASE DocumentHeaderRecordRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            ProcessResponseESalesInvoice(SalesInvoiceHeader,EDocAction::"Request Stamp",Reverse);
            SalesInvoiceHeader.MODIFY;
            DocumentHeaderRecordRef.GETTABLE(SalesInvoiceHeader);
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            ProcessResponseESalesCrMemo(SalesCrMemoHeader,EDocAction::"Request Stamp");
            SalesCrMemoHeader.MODIFY;
            DocumentHeaderRecordRef.GETTABLE(SalesCrMemoHeader);
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            ProcessResponseEServiceInvoice(ServiceInvoiceHeader,EDocAction::"Request Stamp",TempDocumentHeader."Amount Including VAT");
            ServiceInvoiceHeader.MODIFY;
            DocumentHeaderRecordRef.GETTABLE(ServiceInvoiceHeader);
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            ProcessResponseEServiceCrMemo(ServiceCrMemoHeader,EDocAction::"Request Stamp",TempDocumentHeader."Amount Including VAT");
            ServiceCrMemoHeader.MODIFY;
            DocumentHeaderRecordRef.GETTABLE(ServiceCrMemoHeader);
          END;
        DATABASE::"Sales Shipment Header":
          BEGIN
            ProcessResponseESalesShipment(SalesShipmentHeader,EDocAction::"Request Stamp");
            SalesShipmentHeader.MODIFY;
            DocumentHeaderRecordRef.GETTABLE(SalesShipmentHeader);
          END;
        DATABASE::"Transfer Shipment Header":
          BEGIN
            ProcessResponseETransferShipment(TransferShipmentHeader,EDocAction::"Request Stamp");
            TransferShipmentHeader.MODIFY;
            DocumentHeaderRecordRef.GETTABLE(TransferShipmentHeader);
          END;
      END;

      // If Advance Settle, and everything went well, then need to create CFDI document for Advance reverse.
      IF AdvanceSettle THEN BEGIN
        IF SalesInvoiceHeader."Electronic Document Status" = SalesInvoiceHeader."Electronic Document Status"::"Stamp Received" THEN
          RequestStamp(DocumentHeaderRecordRef,TRUE,TRUE);
      END;
    END;

    PROCEDURE Send@1020072(VAR DocumentHeaderRecordRef@1020004 : RecordRef;Reverse@1020005 : Boolean);
    VAR
      SalesInvHeader@1020003 : Record 112;
      SalesCrMemoHeader@1020002 : Record 114;
      ServiceInvHeader@1020001 : Record 5992;
      ServiceCrMemoHeader@1020000 : Record 5994;
    BEGIN
      CASE DocumentHeaderRecordRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            DocumentHeaderRecordRef.SETTABLE(SalesInvHeader);
            SendESalesInvoice(SalesInvHeader,Reverse);
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            DocumentHeaderRecordRef.SETTABLE(SalesCrMemoHeader);
            SendESalesCrMemo(SalesCrMemoHeader);
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            DocumentHeaderRecordRef.SETTABLE(ServiceInvHeader);
            SendEServiceInvoice(ServiceInvHeader);
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            DocumentHeaderRecordRef.SETTABLE(ServiceCrMemoHeader);
            SendEServiceCrMemo(ServiceCrMemoHeader);
          END;
      END;
    END;

    LOCAL PROCEDURE SendESalesInvoice@1020030(VAR SalesInvHeader@1020000 : Record 112;Reverse@1020004 : Boolean);
    VAR
      CFDIDocuments@1020007 : Record 27005;
      CFDIDocumentsLoc@1020009 : Record 27005;
      TempBlob@1020001 : Record 99008535;
      ReportSelection@1020006 : Record 77;
      SalesInvHeaderLoc@1020008 : Record 112;
      DocumentHeaderRef@1020005 : RecordRef;
      XMLInstream@1020035 : InStream;
      FileNameEdoc@1020003 : Text;
      PDFFileName@1020002 : Text;
    BEGIN
      IF Reverse THEN
        CFDIDocuments.GET(SalesInvHeader."No.",DATABASE::"Sales Invoice Header",TRUE,TRUE);

      GetCustomer(SalesInvHeader."Bill-to Customer No.");
      Customer.TESTFIELD("E-Mail");
      IF NOT Reverse THEN
        IF SalesInvHeader."No. of E-Documents Sent" <> 0 THEN
          IF NOT CONFIRM(Text002) THEN
            ERROR('');
      IF Reverse THEN
        IF CFDIDocuments."No. of E-Documents Sent" <> 0 THEN
          IF NOT CONFIRM(PaymentsAlreadySentQst) THEN
            ERROR('');

      // Export XML
      IF NOT Reverse THEN BEGIN
        SalesInvHeader.CALCFIELDS("Signed Document XML");
        TempBlob.Blob := SalesInvHeader."Signed Document XML";
        TempBlob.Blob.CREATEINSTREAM(XMLInstream);
        FileNameEdoc := SalesInvHeader."No." + '.xml';
      END ELSE BEGIN
        CFDIDocuments.CALCFIELDS("Signed Document XML");
        TempBlob.Blob := CFDIDocuments."Signed Document XML";
        TempBlob.Blob.CREATEINSTREAM(XMLInstream);
        FileNameEdoc := CFDIDocuments."No." + '.xml';
        CFDIDocumentsLoc."Signed Document XML" := TempBlob.Blob;
        CFDIDocumentsLoc."Signed Document XML" := CFDIDocumentsLoc."Signed Document XML";
      END;

      IF GLSetup."Send PDF Report" THEN BEGIN
        DocumentHeaderRef.GETTABLE(SalesInvHeader);
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"S.Invoice");
        PDFFileName := SaveAsPDFOnServer(DocumentHeaderRef,GetReportNo(ReportSelection));
      END;

      // Reset No. Printed
      IF NOT Reverse THEN BEGIN
        SalesInvHeaderLoc.GET(SalesInvHeader."No.");
        SalesInvHeaderLoc."No. Printed" := SalesInvHeader."No. Printed";
        SalesInvHeaderLoc.MODIFY;
      END;

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(Text005,SalesInvHeader."No."),
        STRSUBSTNO(Text000,SalesInvHeader."No."),FileNameEdoc,PDFFileName,GLSetup."Send PDF Report",XMLInstream);

      IF NOT Reverse THEN BEGIN
        SalesInvHeaderLoc.GET(SalesInvHeader."No.");
        SalesInvHeaderLoc."No. of E-Documents Sent" := SalesInvHeaderLoc."No. of E-Documents Sent" + 1;
        IF NOT SalesInvHeaderLoc."Electronic Document Sent" THEN
          SalesInvHeaderLoc."Electronic Document Sent" := TRUE;
        SalesInvHeaderLoc."Electronic Document Status" := SalesInvHeaderLoc."Electronic Document Status"::Sent;
        SalesInvHeaderLoc."Date/Time Sent" :=
          FormatDateTime(ConvertCurrentDateTimeToTimeZone(GetTimeZoneFromDocument(SalesInvHeader)));
        SalesInvHeaderLoc.MODIFY;
      END ELSE BEGIN
        CFDIDocumentsLoc.GET(SalesInvHeader."No.",DATABASE::"Sales Invoice Header",TRUE,TRUE);
        CFDIDocumentsLoc."No. of E-Documents Sent" := CFDIDocumentsLoc."No. of E-Documents Sent" + 1;
        IF NOT CFDIDocumentsLoc."Electronic Document Sent" THEN
          CFDIDocumentsLoc."Electronic Document Sent" := TRUE;
        CFDIDocumentsLoc."Electronic Document Status" := CFDIDocumentsLoc."Electronic Document Status"::Sent;
        CFDIDocumentsLoc."Date/Time Sent" :=
          FormatDateTime(ConvertCurrentDateTimeToTimeZone(GetTimeZoneFromDocument(SalesInvHeader)));
        CFDIDocumentsLoc.MODIFY;
      END;
      MESSAGE(Text001,SalesInvHeader."No.");
    END;

    LOCAL PROCEDURE SendESalesCrMemo@1020031(VAR SalesCrMemoHeader@1020000 : Record 114);
    VAR
      TempBlob@1020001 : Record 99008535;
      ReportSelection@1020006 : Record 77;
      SalesCrMemoHeaderLoc@1020008 : Record 114;
      DocumentHeaderRef@1020005 : RecordRef;
      XMLInstream@1020035 : InStream;
      FileNameEdoc@1020003 : Text;
      PDFFileName@1020007 : Text;
    BEGIN
      GetCustomer(SalesCrMemoHeader."Bill-to Customer No.");
      Customer.TESTFIELD("E-Mail");
      IF SalesCrMemoHeader."No. of E-Documents Sent" <> 0 THEN
        IF NOT CONFIRM(Text002) THEN
          ERROR('');

      // Export XML
      SalesCrMemoHeader.CALCFIELDS("Signed Document XML");
      TempBlob.Blob := SalesCrMemoHeader."Signed Document XML";
      TempBlob.Blob.CREATEINSTREAM(XMLInstream);
      FileNameEdoc := SalesCrMemoHeader."No." + '.xml';

      IF GLSetup."Send PDF Report" THEN BEGIN
        DocumentHeaderRef.GETTABLE(SalesCrMemoHeader);
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"S.Cr.Memo");
        PDFFileName := SaveAsPDFOnServer(DocumentHeaderRef,GetReportNo(ReportSelection));
      END;

      // Reset No. Printed
      SalesCrMemoHeaderLoc.GET(SalesCrMemoHeader."No.");
      SalesCrMemoHeaderLoc."No. Printed" := SalesCrMemoHeader."No. Printed";
      SalesCrMemoHeaderLoc.MODIFY;

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(Text006,SalesCrMemoHeader."No."),
        STRSUBSTNO(Text004,SalesCrMemoHeader."No."),FileNameEdoc,PDFFileName,GLSetup."Send PDF Report",XMLInstream);

      SalesCrMemoHeaderLoc.GET(SalesCrMemoHeader."No.");
      SalesCrMemoHeaderLoc."No. of E-Documents Sent" := SalesCrMemoHeaderLoc."No. of E-Documents Sent" + 1;
      IF NOT SalesCrMemoHeaderLoc."Electronic Document Sent" THEN
        SalesCrMemoHeaderLoc."Electronic Document Sent" := TRUE;
      SalesCrMemoHeaderLoc."Electronic Document Status" := SalesCrMemoHeaderLoc."Electronic Document Status"::Sent;
      SalesCrMemoHeaderLoc."Date/Time Sent" :=
        FormatDateTime(ConvertCurrentDateTimeToTimeZone(GetTimeZoneFromDocument(SalesCrMemoHeader)));
      SalesCrMemoHeaderLoc.MODIFY;

      MESSAGE(Text001,SalesCrMemoHeader."No.");
    END;

    LOCAL PROCEDURE SendEServiceInvoice@1020043(VAR ServiceInvoiceHeader@1020000 : Record 5992);
    VAR
      TempBlob@1020001 : Record 99008535;
      ReportSelection@1020006 : Record 77;
      ServiceInvoiceHeaderLoc@1020008 : Record 5992;
      DocumentHeaderRef@1020005 : RecordRef;
      XMLInstream@1020035 : InStream;
      FileNameEdoc@1020003 : Text;
      PDFFileName@1020007 : Text;
    BEGIN
      GetCustomer(ServiceInvoiceHeader."Bill-to Customer No.");
      Customer.TESTFIELD("E-Mail");
      IF ServiceInvoiceHeader."No. of E-Documents Sent" <> 0 THEN
        IF NOT CONFIRM(Text002) THEN
          ERROR('');
      // Export XML
      ServiceInvoiceHeader.CALCFIELDS("Signed Document XML");
      TempBlob.Blob := ServiceInvoiceHeader."Signed Document XML";
      TempBlob.Blob.CREATEINSTREAM(XMLInstream);
      FileNameEdoc := ServiceInvoiceHeader."No." + '.xml';

      IF GLSetup."Send PDF Report" THEN BEGIN
        DocumentHeaderRef.GETTABLE(ServiceInvoiceHeader);
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"SM.Invoice");
        PDFFileName := SaveAsPDFOnServer(DocumentHeaderRef,GetReportNo(ReportSelection));
      END;

      // Reset No. Printed
      ServiceInvoiceHeaderLoc.GET(ServiceInvoiceHeader."No.");
      ServiceInvoiceHeaderLoc."No. Printed" := ServiceInvoiceHeader."No. Printed";
      ServiceInvoiceHeaderLoc.MODIFY;

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(Text005,ServiceInvoiceHeader."No."),
        STRSUBSTNO(Text000,ServiceInvoiceHeader."No."),FileNameEdoc,PDFFileName,GLSetup."Send PDF Report",XMLInstream);

      ServiceInvoiceHeaderLoc.GET(ServiceInvoiceHeader."No.");
      ServiceInvoiceHeaderLoc."No. of E-Documents Sent" := ServiceInvoiceHeaderLoc."No. of E-Documents Sent" + 1;
      IF NOT ServiceInvoiceHeaderLoc."Electronic Document Sent" THEN
        ServiceInvoiceHeaderLoc."Electronic Document Sent" := TRUE;
      ServiceInvoiceHeaderLoc."Electronic Document Status" := ServiceInvoiceHeaderLoc."Electronic Document Status"::Sent;
      ServiceInvoiceHeaderLoc."Date/Time Sent" :=
        FormatDateTime(ConvertCurrentDateTimeToTimeZone(GetTimeZoneFromDocument(ServiceInvoiceHeader)));
      ServiceInvoiceHeaderLoc.MODIFY;

      MESSAGE(Text001,ServiceInvoiceHeader."No.");
    END;

    LOCAL PROCEDURE SendEServiceCrMemo@1020045(VAR ServiceCrMemoHeader@1020000 : Record 5994);
    VAR
      TempBlob@1020001 : Record 99008535;
      ReportSelection@1020006 : Record 77;
      ServiceCrMemoHeaderLoc@1020008 : Record 5994;
      DocumentHeaderRef@1020005 : RecordRef;
      XMLInstream@1020035 : InStream;
      FileNameEdoc@1020003 : Text;
      PDFFileName@1020007 : Text;
    BEGIN
      GetCustomer(ServiceCrMemoHeader."Bill-to Customer No.");
      Customer.TESTFIELD("E-Mail");
      IF ServiceCrMemoHeader."No. of E-Documents Sent" <> 0 THEN
        IF NOT CONFIRM(Text002) THEN
          ERROR('');
      // Export XML
      ServiceCrMemoHeader.CALCFIELDS("Signed Document XML");
      TempBlob.Blob := ServiceCrMemoHeader."Signed Document XML";
      TempBlob.Blob.CREATEINSTREAM(XMLInstream);
      FileNameEdoc := ServiceCrMemoHeader."No." + '.xml';

      IF GLSetup."Send PDF Report" THEN BEGIN
        DocumentHeaderRef.GETTABLE(ServiceCrMemoHeader);
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"SM.Credit Memo");
        PDFFileName := SaveAsPDFOnServer(DocumentHeaderRef,GetReportNo(ReportSelection));
      END;

      // Reset No. Printed
      ServiceCrMemoHeaderLoc.GET(ServiceCrMemoHeader."No.");
      ServiceCrMemoHeaderLoc."No. Printed" := ServiceCrMemoHeader."No. Printed";
      ServiceCrMemoHeaderLoc.MODIFY;

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(Text006,ServiceCrMemoHeader."No."),
        STRSUBSTNO(Text004,ServiceCrMemoHeader."No."),FileNameEdoc,PDFFileName,GLSetup."Send PDF Report",XMLInstream);

      ServiceCrMemoHeaderLoc.GET(ServiceCrMemoHeader."No.");
      ServiceCrMemoHeaderLoc."No. of E-Documents Sent" := ServiceCrMemoHeaderLoc."No. of E-Documents Sent" + 1;
      IF NOT ServiceCrMemoHeaderLoc."Electronic Document Sent" THEN
        ServiceCrMemoHeaderLoc."Electronic Document Sent" := TRUE;
      ServiceCrMemoHeaderLoc."Electronic Document Status" := ServiceCrMemoHeaderLoc."Electronic Document Status"::Sent;
      ServiceCrMemoHeaderLoc."Date/Time Sent" :=
        FormatDateTime(ConvertCurrentDateTimeToTimeZone(GetTimeZoneFromDocument(ServiceCrMemoHeader)));
      ServiceCrMemoHeaderLoc.MODIFY;

      MESSAGE(Text001,ServiceCrMemoHeader."No.");
    END;

    LOCAL PROCEDURE CancelESalesInvoice@1170000000(VAR SalesInvHeader@1020000 : Record 112);
    VAR
      SalesInvoiceHeaderSubst@1310001 : Record 112;
      TempBlob@1020004 : Record 99008535;
      XMLDoc@1020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Response@1020005 : Text;
      OutStr@1020003 : OutStream;
      CancelDateTime@1020006 : Text[50];
    BEGIN
      IF SalesInvHeader."Source Code" = SourceCodeSetup."Deleted Document" THEN
        ERROR(Text007);

      SalesInvHeader.TESTFIELD("CFDI Cancellation Reason Code");
      IF CancellationReasonRequired(SalesInvHeader."CFDI Cancellation Reason Code") THEN
        SalesInvoiceHeaderSubst.GET(SalesInvHeader."Substitution Document No.");

      CancelDateTime := FormatDateTime(ConvertCurrentDateTimeToTimeZone(GetTimeZoneFromDocument(SalesInvHeader)));
      SalesInvHeader."Date/Time Canceled" := CancelDateTime;
      SalesInvHeader."Original Document XML".CREATEOUTSTREAM(OutStr);
      CancelXMLDocument(
        XMLDoc,OutStr,
        CancelDateTime,SalesInvHeader."Date/Time Stamped",SalesInvHeader."Fiscal Invoice Number PAC",
        SalesInvHeader."CFDI Cancellation Reason Code",SalesInvoiceHeaderSubst."Fiscal Invoice Number PAC");

      Response := InvokeMethod(XMLDoc,MethodType::Cancel);

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        TextToBlob(TempBlob,Response);
        SalesInvHeader."Signed Document XML" := TempBlob.Blob;
      END;

      SalesInvHeader.MODIFY;
      ProcessResponseESalesInvoice(SalesInvHeader,EDocAction::Cancel,FALSE);
      SalesInvHeader.MODIFY;
    END;

    LOCAL PROCEDURE CancelESalesCrMemo@1020033(VAR SalesCrMemoHeader@1020000 : Record 114);
    VAR
      SalesCrMemoHeaderSubst@1310000 : Record 114;
      TempBlob@1020002 : Record 99008535;
      XMLDoc@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Response@1020005 : Text;
      OutStr@1020003 : OutStream;
      CancelDateTime@1020006 : Text[50];
    BEGIN
      IF SalesCrMemoHeader."Source Code" = SourceCodeSetup."Deleted Document" THEN
        ERROR(Text007);

      SalesCrMemoHeader.TESTFIELD("CFDI Cancellation Reason Code");
      IF CancellationReasonRequired(SalesCrMemoHeader."CFDI Cancellation Reason Code") THEN
        SalesCrMemoHeaderSubst.GET(SalesCrMemoHeader."Substitution Document No.");

      CancelDateTime := FormatDateTime(ConvertCurrentDateTimeToTimeZone(GetTimeZoneFromDocument(SalesCrMemoHeader)));
      SalesCrMemoHeader."Date/Time Canceled" := CancelDateTime;
      SalesCrMemoHeader."Original Document XML".CREATEOUTSTREAM(OutStr);
      CancelXMLDocument(
        XMLDoc,OutStr,
        CancelDateTime,SalesCrMemoHeader."Date/Time Stamped",SalesCrMemoHeader."Fiscal Invoice Number PAC",
        SalesCrMemoHeader."CFDI Cancellation Reason Code",SalesCrMemoHeaderSubst."Fiscal Invoice Number PAC");

      Response := InvokeMethod(XMLDoc,MethodType::Cancel);

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        TextToBlob(TempBlob,Response);
        SalesCrMemoHeader."Signed Document XML" := TempBlob.Blob;
      END;

      SalesCrMemoHeader.MODIFY;
      ProcessResponseESalesCrMemo(SalesCrMemoHeader,EDocAction::Cancel);
      SalesCrMemoHeader.MODIFY;
    END;

    LOCAL PROCEDURE CancelEServiceInvoice@1020034(VAR ServiceInvHeader@1020000 : Record 5992);
    VAR
      ServiceInvoiceHeaderSubst@1310000 : Record 5992;
      TempBlob@1020004 : Record 99008535;
      XMLDoc@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Response@1020005 : Text;
      OutStr@1020003 : OutStream;
      CancelDateTime@1020006 : Text[50];
    BEGIN
      IF ServiceInvHeader."Source Code" = SourceCodeSetup."Deleted Document" THEN
        ERROR(Text007);

      ServiceInvHeader.TESTFIELD("CFDI Cancellation Reason Code");
      IF CancellationReasonRequired(ServiceInvHeader."CFDI Cancellation Reason Code") THEN
        ServiceInvoiceHeaderSubst.GET(ServiceInvHeader."Substitution Document No.");

      CancelDateTime := FormatDateTime(ConvertCurrentDateTimeToTimeZone(GetTimeZoneFromDocument(ServiceInvHeader)));
      ServiceInvHeader."Date/Time Canceled" := CancelDateTime;
      ServiceInvHeader."Original Document XML".CREATEOUTSTREAM(OutStr);
      CancelXMLDocument(
        XMLDoc,OutStr,
        CancelDateTime,ServiceInvHeader."Date/Time Stamped",ServiceInvHeader."Fiscal Invoice Number PAC",
        ServiceInvHeader."CFDI Cancellation Reason Code",ServiceInvoiceHeaderSubst."Substitution Document No.");

      Response := InvokeMethod(XMLDoc,MethodType::Cancel);

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        TextToBlob(TempBlob,Response);
        ServiceInvHeader."Signed Document XML" := TempBlob.Blob;
      END;

      ServiceInvHeader.MODIFY;
      ProcessResponseEServiceInvoice(ServiceInvHeader,EDocAction::Cancel,0);
      ServiceInvHeader.MODIFY;
    END;

    LOCAL PROCEDURE CancelEServiceCrMemo@1020037(VAR ServiceCrMemoHeader@1020000 : Record 5994);
    VAR
      ServiceCrMemoHeaderSubst@1310000 : Record 5994;
      TempBlob@1020004 : Record 99008535;
      XMLDoc@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Response@1020005 : Text;
      OutStr@1020003 : OutStream;
      CancelDateTime@1020006 : Text[50];
    BEGIN
      IF ServiceCrMemoHeader."Source Code" = SourceCodeSetup."Deleted Document" THEN
        ERROR(Text007);

      ServiceCrMemoHeader.TESTFIELD("CFDI Cancellation Reason Code");
      IF CancellationReasonRequired(ServiceCrMemoHeader."CFDI Cancellation Reason Code") THEN
        ServiceCrMemoHeaderSubst.GET(ServiceCrMemoHeader."Substitution Document No.");

      CancelDateTime := FormatDateTime(ConvertCurrentDateTimeToTimeZone(GetTimeZoneFromDocument(ServiceCrMemoHeader)));
      ServiceCrMemoHeader."Date/Time Canceled" := CancelDateTime;
      ServiceCrMemoHeader."Original Document XML".CREATEOUTSTREAM(OutStr);
      CancelXMLDocument(
        XMLDoc,OutStr,
        CancelDateTime,ServiceCrMemoHeader."Date/Time Stamped",ServiceCrMemoHeader."Fiscal Invoice Number PAC",
        ServiceCrMemoHeader."CFDI Cancellation Reason Code",ServiceCrMemoHeaderSubst."Fiscal Invoice Number PAC");

      Response := InvokeMethod(XMLDoc,MethodType::Cancel);

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        TextToBlob(TempBlob,Response);
        ServiceCrMemoHeader."Signed Document XML" := TempBlob.Blob;
      END;

      ServiceCrMemoHeader.MODIFY;
      ProcessResponseEServiceCrMemo(ServiceCrMemoHeader,EDocAction::Cancel,0);
      ServiceCrMemoHeader.MODIFY;
    END;

    LOCAL PROCEDURE CancelEPayment@1020010(VAR CustLedgerEntry@1020000 : Record 21);
    VAR
      CustLedgerEntrySubst@1310000 : Record 21;
      TempBlob@1020004 : Record 99008535;
      OutStr@1020003 : OutStream;
      XMLDoc@1020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Response@1020005 : Text;
      CancelDateTime@1020006 : Text[50];
    BEGIN
      CustLedgerEntry.TESTFIELD("CFDI Cancellation Reason Code");
      IF CancellationReasonRequired(CustLedgerEntry."CFDI Cancellation Reason Code") THEN
        CustLedgerEntrySubst.GET(CustLedgerEntry."Substitution Entry No.");

      CancelDateTime :=
        FormatDateTime(ConvertCurrentDateTimeToTimeZone(GetTimeZoneFromCustomer(CustLedgerEntry."Customer No.")));
      CustLedgerEntry."Date/Time Canceled" := CancelDateTime;
      CustLedgerEntry."Original Document XML".CREATEOUTSTREAM(OutStr);
      CancelXMLDocument(
        XMLDoc,OutStr,
        CancelDateTime,CustLedgerEntry."Date/Time Stamped",CustLedgerEntry."Fiscal Invoice Number PAC",
        CustLedgerEntry."CFDI Cancellation Reason Code",CustLedgerEntrySubst."Fiscal Invoice Number PAC");

      Response := InvokeMethod(XMLDoc,MethodType::Cancel);

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        TextToBlob(TempBlob,Response);
        CustLedgerEntry."Signed Document XML" := TempBlob.Blob;
      END;

      CustLedgerEntry.MODIFY;
      ProcessResponseEPayment(CustLedgerEntry,EDocAction::Cancel);
      CustLedgerEntry.MODIFY;
    END;

    LOCAL PROCEDURE CancelESalesShipment@1310149(VAR SalesShipmentHeader@1020000 : Record 110);
    VAR
      SalesShipmentHeaderSubst@1310001 : Record 110;
      TempBlob@1020004 : Record 99008535;
      XMLDoc@1020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      OutStr@1020003 : OutStream;
      Response@1020005 : Text;
      CancelDateTime@1020006 : Text[50];
    BEGIN
      IF SalesShipmentHeader."Source Code" = SourceCodeSetup."Deleted Document" THEN
        ERROR(Text007);

      SalesShipmentHeader.TESTFIELD("CFDI Cancellation Reason Code");
      IF CancellationReasonRequired(SalesShipmentHeader."CFDI Cancellation Reason Code") THEN
        SalesShipmentHeaderSubst.GET(SalesShipmentHeader."Substitution Document No.");

      CancelDateTime := FormatDateTime(ConvertCurrentDateTimeToTimeZone(GetTimeZoneFromDocument(SalesShipmentHeader)));
      SalesShipmentHeader."Date/Time Canceled" := CancelDateTime;
      SalesShipmentHeader."Original Document XML".CREATEOUTSTREAM(OutStr);
      CancelXMLDocument(
        XMLDoc,OutStr,
        CancelDateTime,SalesShipmentHeader."Date/Time Stamped",SalesShipmentHeader."Fiscal Invoice Number PAC",
        SalesShipmentHeader."CFDI Cancellation Reason Code",SalesShipmentHeaderSubst."Fiscal Invoice Number PAC");

      Response := InvokeMethod(XMLDoc,MethodType::Cancel);

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        TextToBlobUTF8(TempBlob,Response);
        SalesShipmentHeader."Signed Document XML" := TempBlob.Blob;
      END;

      SalesShipmentHeader.MODIFY;
      ProcessResponseESalesShipment(SalesShipmentHeader,EDocAction::Cancel);
      SalesShipmentHeader.MODIFY;
    END;

    LOCAL PROCEDURE CancelETransferShipment@1310048(VAR TransferShipmentHeader@1020000 : Record 5744);
    VAR
      TransferShipmentHeaderSubst@1310001 : Record 5744;
      TempBlob@1020004 : Record 99008535;
      XMLDoc@1020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      OutStr@1020003 : OutStream;
      Response@1020005 : Text;
      CancelDateTime@1020006 : Text[50];
    BEGIN
      TransferShipmentHeader.TESTFIELD("CFDI Cancellation Reason Code");
      IF CancellationReasonRequired(TransferShipmentHeader."CFDI Cancellation Reason Code") THEN
        TransferShipmentHeaderSubst.GET(TransferShipmentHeader."Substitution Document No.");

      CancelDateTime := FormatDateTime(ConvertCurrentDateTimeToTimeZone(GetTimeZoneFromDocument(TransferShipmentHeader)));
      TransferShipmentHeader."Date/Time Canceled" := CancelDateTime;
      TransferShipmentHeader."Original Document XML".CREATEOUTSTREAM(OutStr);
      CancelXMLDocument(
        XMLDoc,OutStr,
        CancelDateTime,TransferShipmentHeader."Date/Time Stamped",TransferShipmentHeader."Fiscal Invoice Number PAC",
        TransferShipmentHeader."CFDI Cancellation Reason Code",TransferShipmentHeaderSubst."Fiscal Invoice Number PAC");

      Response := InvokeMethod(XMLDoc,MethodType::Cancel);

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        TextToBlob(TempBlob,Response);
        TransferShipmentHeader."Signed Document XML" := TempBlob.Blob;
      END;

      TransferShipmentHeader.MODIFY;
      ProcessResponseETransferShipment(TransferShipmentHeader,EDocAction::Cancel);
      TransferShipmentHeader.MODIFY;
    END;

    LOCAL PROCEDURE CancelXMLDocument@1310101(VAR XMLDoc@1310005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR OutStr@1310002 : OutStream;CancelDateTime@1310008 : Text[50];DateTimeStamped@1310000 : Text;FiscalinvoiceNumberPAC@1310001 : Text;CancellationReason@1310009 : Text;SubstitutionDocumentUUID@1310010 : Text);
    VAR
      XMLDOMManagement@1310006 : Codeunit 6224;
      XMLCurrNode@1310004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1310003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      DocNameSpace := 'http://www.sat.gob.mx/sitio_internet/cfd';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> <CancelaCFD /> ',XMLDoc);
      XMLCurrNode := XMLDoc.DocumentElement;
      AddElement(XMLCurrNode,'Cancelacion','','',XMLNewChild);
      XMLCurrNode := XMLNewChild;

      AddAttribute(XMLDoc,XMLCurrNode,'Fecha',CancelDateTime);
      AddAttribute(XMLDoc,XMLCurrNode,'RfcEmisor',CompanyInfo."RFC No.");
      AddElement(XMLCurrNode,'Folios','','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
      AddElement(XMLCurrNode,'Folio','','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
      AddAttribute(XMLDoc,XMLCurrNode,'FechaTimbrado',DateTimeStamped);
      AddAttribute(XMLDoc,XMLCurrNode,'UUID',FiscalinvoiceNumberPAC);
      AddAttribute(XMLDoc,XMLCurrNode,'MotivoCancelacion',CancellationReason);
      AddAttribute(XMLDoc,XMLCurrNode,'FolioSustitucion',SubstitutionDocumentUUID);
      XMLDoc.Save(OutStr);
    END;

    LOCAL PROCEDURE ProcessResponseESalesInvoice@1020054(VAR SalesInvoiceHeader@1020000 : Record 112;Action@1020007 : Option;Reverse@1020016 : Boolean);
    VAR
      CFDIDocuments@1020017 : Record 27005;
      TempBlob@1020002 : Record 99008535;
      PACWebService@1020003 : Record 10000;
      XMLDOMManagement@1020015 : Codeunit 6224;
      XMLDoc@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocResult@1310000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020008 : Text[95];
      ErrorDescription@1020009 : Text;
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      GetCustomer(SalesInvoiceHeader."Bill-to Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      IF ISNULL(XMLDocResult) THEN
        XMLDocResult := XMLDocResult.XmlDocument;

      IF NOT Reverse THEN BEGIN
        SalesInvoiceHeader.CALCFIELDS("Signed Document XML");
        SalesInvoiceHeader."Signed Document XML".CREATEINSTREAM(InStr);
        XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDocResult);
        CLEAR(SalesInvoiceHeader."Signed Document XML");
      END ELSE BEGIN
        CFDIDocuments.GET(SalesInvoiceHeader."No.",DATABASE::"Sales Invoice Header",TRUE,TRUE);
        CFDIDocuments.CALCFIELDS("Signed Document XML");
        CFDIDocuments."Signed Document XML".CREATEINSTREAM(InStr);
        XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDocResult);
        CLEAR(CFDIDocuments."Signed Document XML");
      END;

      XMLCurrNode := XMLDocResult.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");

      IF NOT Reverse THEN
        SalesInvoiceHeader."PAC Web Service Name" := PACWebService.Name
      ELSE
        CFDIDocuments."PAC Web Service Name" := PACWebService.Name;

      IF XMLCurrNode.Value <> '1' THEN BEGIN // Error encountered
        IF NOT Reverse THEN BEGIN
          SalesInvoiceHeader."Error Code" := XMLCurrNode.Value;
          XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
          ErrorDescription := XMLCurrNode.Value;
          XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
          IF NOT ISNULL(XMLCurrNode) THEN
            ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
          IF STRLEN(ErrorDescription) > 250 THEN
            ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
          SalesInvoiceHeader."Error Description" := COPYSTR(ErrorDescription,1,250);
          CASE Action OF
            EDocAction::"Request Stamp":
              SalesInvoiceHeader."Electronic Document Status" :=
                SalesInvoiceHeader."Electronic Document Status"::"Stamp Request Error";
            EDocAction::Cancel:
              BEGIN
                SalesInvoiceHeader."Electronic Document Status" :=
                  SalesInvoiceHeader."Electronic Document Status"::"Cancel Error";
                SalesInvoiceHeader."Date/Time Canceled" := '';
              END;
          END;
        END ELSE BEGIN
          CFDIDocuments."Error Code" := XMLCurrNode.Value;
          XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
          ErrorDescription := XMLCurrNode.Value;
          XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
          IF NOT ISNULL(XMLCurrNode) THEN
            ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
          IF STRLEN(ErrorDescription) > 250 THEN
            ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
          CFDIDocuments."Error Description" := COPYSTR(ErrorDescription,1,250);
          CASE Action OF
            EDocAction::"Request Stamp":
              CFDIDocuments."Electronic Document Status" := CFDIDocuments."Electronic Document Status"::"Stamp Request Error";
          END;
          CFDIDocuments.MODIFY;
        END;
        EXIT;
      END;

      IF NOT Reverse THEN BEGIN
        SalesInvoiceHeader."Error Code" := '';
        SalesInvoiceHeader."Error Description" := '';
        IF Action = EDocAction::Cancel THEN BEGIN
          SalesInvoiceHeader."Electronic Document Status" := SalesInvoiceHeader."Electronic Document Status"::Canceled;
          EXIT;
        END;
      END ELSE BEGIN
        CFDIDocuments."Error Code" := '';
        CFDIDocuments."Error Description" := '';
      END;

      XMLCurrNode := XMLDocResult.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;

      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;
      FOR Counter := 0 TO (NodeCount - 1) DO BEGIN
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,TRUE));
      END;

      IF NOT Reverse THEN
        SalesInvoiceHeader."Signed Document XML".CREATEOUTSTREAM(OutStr)
      ELSE
        CFDIDocuments."Signed Document XML".CREATEOUTSTREAM(OutStr);

      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/4');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      IF NOT Reverse THEN BEGIN
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
        SalesInvoiceHeader."Date/Time Stamped" := XMLCurrNode.Value;

        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
        SalesInvoiceHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
        SalesInvoiceHeader."Certificate Serial No." := XMLCurrNode.Value;
      END ELSE BEGIN
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
        CFDIDocuments."Date/Time Stamped" := XMLCurrNode.Value;

        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
        CFDIDocuments."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
        CFDIDocuments."Certificate Serial No." := XMLCurrNode.Value;
      END;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('SelloSAT');

      CLEAR(OutStr);
      IF NOT Reverse THEN BEGIN
        SalesInvoiceHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
        OutStr.WRITETEXT(XMLCurrNode.Value);
        // Certificate Serial
        SalesInvoiceHeader."Electronic Document Status" := SalesInvoiceHeader."Electronic Document Status"::"Stamp Received";
      END ELSE BEGIN
        CFDIDocuments."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
        OutStr.WRITETEXT(XMLCurrNode.Value);
        // Certificate Serial
        CFDIDocuments."Electronic Document Status" := CFDIDocuments."Electronic Document Status"::"Stamp Received";
      END;

      // Create QRCode
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
      IF NOT Reverse THEN BEGIN
        QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",SalesInvoiceHeader."Amount Including VAT",
            FORMAT(SalesInvoiceHeader."Fiscal Invoice Number PAC"));
        CreateQRCode(QRCodeInput,TempBlob);
        SalesInvoiceHeader."QR Code" := TempBlob.Blob;
      END ELSE BEGIN
        QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",SalesInvoiceHeader."Amount Including VAT",
            FORMAT(CFDIDocuments."Fiscal Invoice Number PAC"));
        CreateQRCode(QRCodeInput,TempBlob);
        CFDIDocuments."QR Code" := TempBlob.Blob;
        CFDIDocuments.MODIFY;
      END;
    END;

    LOCAL PROCEDURE ProcessResponseESalesCrMemo@1020032(VAR SalesCrMemoHeader@1020000 : Record 114;Action@1020007 : Option);
    VAR
      TempBlob@1020002 : Record 99008535;
      PACWebService@1020003 : Record 10000;
      XMLDOMManagement@1020015 : Codeunit 6224;
      XMLDoc@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020009 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020008 : Text[95];
      ErrorDescription@1020010 : Text;
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      GetCustomer(SalesCrMemoHeader."Bill-to Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      SalesCrMemoHeader.CALCFIELDS("Signed Document XML");
      SalesCrMemoHeader."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDoc);
      CLEAR(SalesCrMemoHeader."Signed Document XML");
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      SalesCrMemoHeader."PAC Web Service Name" := PACWebService.Name;

      IF XMLCurrNode.Value <> '1' THEN BEGIN
        SalesCrMemoHeader."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        ErrorDescription := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
        IF NOT ISNULL(XMLCurrNode) THEN
          ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
        IF STRLEN(ErrorDescription) > 250 THEN
          ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
        SalesCrMemoHeader."Error Description" := COPYSTR(ErrorDescription,1,250);

        CASE Action OF
          EDocAction::"Request Stamp":
            SalesCrMemoHeader."Electronic Document Status" := SalesCrMemoHeader."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            BEGIN
              SalesCrMemoHeader."Electronic Document Status" := SalesCrMemoHeader."Electronic Document Status"::"Cancel Error";
              SalesCrMemoHeader."Date/Time Canceled" := '';
            END;
        END;
        EXIT;
      END;

      SalesCrMemoHeader."Error Code" := '';
      SalesCrMemoHeader."Error Description" := '';
      IF Action = EDocAction::Cancel THEN BEGIN
        SalesCrMemoHeader."Electronic Document Status" := SalesCrMemoHeader."Electronic Document Status"::Canceled;
        EXIT;
      END;
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;
      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;

      FOR Counter := 0 TO (NodeCount - 1) DO BEGIN
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,TRUE));
      END;

      SalesCrMemoHeader."Signed Document XML".CREATEOUTSTREAM(OutStr);
      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/4');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      SalesCrMemoHeader."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      SalesCrMemoHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
      SalesCrMemoHeader."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('SelloSAT');

      CLEAR(OutStr);
      SalesCrMemoHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);
      // Certificate Serial
      SalesCrMemoHeader."Electronic Document Status" := SalesCrMemoHeader."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      SalesCrMemoHeader.CALCFIELDS("Amount Including VAT");
      QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",SalesCrMemoHeader."Amount Including VAT",
          FORMAT(SalesCrMemoHeader."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      SalesCrMemoHeader."QR Code" := TempBlob.Blob;
    END;

    LOCAL PROCEDURE ProcessResponseEServiceInvoice@1020042(VAR ServInvoiceHeader@1020000 : Record 5992;Action@1020007 : Option;AmountInclVAT@1020010 : Decimal);
    VAR
      TempBlob@1020002 : Record 99008535;
      PACWebService@1020003 : Record 10000;
      XMLDOMManagement@1020016 : Codeunit 6224;
      XMLDoc@1020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020015 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020009 : Text[95];
      ErrorDescription@1020011 : Text;
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      GetCustomer(ServInvoiceHeader."Bill-to Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      ServInvoiceHeader.CALCFIELDS("Signed Document XML");
      ServInvoiceHeader."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDoc);
      CLEAR(ServInvoiceHeader."Signed Document XML");
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      ServInvoiceHeader."PAC Web Service Name" := PACWebService.Name;

      IF XMLCurrNode.Value <> '1' THEN BEGIN
        ServInvoiceHeader."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        ErrorDescription := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
        IF NOT ISNULL(XMLCurrNode) THEN
          ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
        IF STRLEN(ErrorDescription) > 250 THEN
          ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
        ServInvoiceHeader."Error Description" := COPYSTR(ErrorDescription,1,250);

        CASE Action OF
          EDocAction::"Request Stamp":
            ServInvoiceHeader."Electronic Document Status" := ServInvoiceHeader."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            BEGIN
              ServInvoiceHeader."Electronic Document Status" := ServInvoiceHeader."Electronic Document Status"::"Cancel Error";
              ServInvoiceHeader."Date/Time Canceled" := '';
            END;
        END;
        EXIT;
      END;

      ServInvoiceHeader."Error Code" := '';
      ServInvoiceHeader."Error Description" := '';
      IF Action = EDocAction::Cancel THEN BEGIN
        ServInvoiceHeader."Electronic Document Status" := ServInvoiceHeader."Electronic Document Status"::Canceled;
        EXIT;
      END;
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;
      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;

      FOR Counter := 0 TO (NodeCount - 1) DO BEGIN
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,TRUE));
      END;

      ServInvoiceHeader."Signed Document XML".CREATEOUTSTREAM(OutStr);
      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/4');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      ServInvoiceHeader."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      ServInvoiceHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
      ServInvoiceHeader."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('SelloSAT');

      CLEAR(OutStr);
      ServInvoiceHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);
      // Certiificate Serial
      ServInvoiceHeader."Electronic Document Status" := ServInvoiceHeader."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",AmountInclVAT,
          FORMAT(ServInvoiceHeader."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      ServInvoiceHeader."QR Code" := TempBlob.Blob;
    END;

    LOCAL PROCEDURE ProcessResponseEServiceCrMemo@1020044(VAR ServCrMemoHeader@1020000 : Record 5994;Action@1020007 : Option;AmountInclVAT@1020010 : Decimal);
    VAR
      TempBlob@1020002 : Record 99008535;
      PACWebService@1020003 : Record 10000;
      XMLDOMManagement@1020016 : Codeunit 6224;
      XMLDoc@1020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020015 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020009 : Text[95];
      ErrorDescription@1020011 : Text;
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      GetCustomer(ServCrMemoHeader."Bill-to Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      ServCrMemoHeader.CALCFIELDS("Signed Document XML");
      ServCrMemoHeader."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDoc);
      CLEAR(ServCrMemoHeader."Signed Document XML");
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      ServCrMemoHeader."PAC Web Service Name" := PACWebService.Name;

      IF XMLCurrNode.Value <> '1' THEN BEGIN
        ServCrMemoHeader."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        ErrorDescription := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
        IF NOT ISNULL(XMLCurrNode) THEN
          ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
        IF STRLEN(ErrorDescription) > 250 THEN
          ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
        ServCrMemoHeader."Error Description" := COPYSTR(ErrorDescription,1,250);

        CASE Action OF
          EDocAction::"Request Stamp":
            ServCrMemoHeader."Electronic Document Status" := ServCrMemoHeader."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            BEGIN
              ServCrMemoHeader."Electronic Document Status" := ServCrMemoHeader."Electronic Document Status"::"Cancel Error";
              ServCrMemoHeader."Date/Time Canceled" := '';
            END;
        END;
        EXIT;
      END;

      ServCrMemoHeader."Error Code" := '';
      ServCrMemoHeader."Error Description" := '';
      IF Action = EDocAction::Cancel THEN BEGIN
        ServCrMemoHeader."Electronic Document Status" := ServCrMemoHeader."Electronic Document Status"::Canceled;
        EXIT;
      END;
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;
      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;

      FOR Counter := 0 TO (NodeCount - 1) DO BEGIN
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,TRUE));
      END;

      ServCrMemoHeader."Signed Document XML".CREATEOUTSTREAM(OutStr);
      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/4');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      ServCrMemoHeader."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      ServCrMemoHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
      ServCrMemoHeader."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('SelloSAT');

      CLEAR(OutStr);
      ServCrMemoHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);
      // Certificate Serial
      ServCrMemoHeader."Electronic Document Status" := ServCrMemoHeader."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",AmountInclVAT,
          FORMAT(ServCrMemoHeader."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      ServCrMemoHeader."QR Code" := TempBlob.Blob;
    END;

    LOCAL PROCEDURE ProcessResponseESalesShipment@1310055(VAR SalesShipmentHeader@1020000 : Record 110;Action@1020007 : Option);
    VAR
      TempBlob@1020002 : Record 99008535;
      PACWebService@1020003 : Record 10000;
      XMLDOMManagement@1020015 : Codeunit 6224;
      XMLDoc@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocResult@1310000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020008 : Text[95];
      ErrorDescription@1020009 : Text;
    BEGIN
      // CartaPorte
      GetGLSetup;
      GetCompanyInfo;

      // Process Response and Load back to header the Signed XML if you get one...
      IF ISNULL(XMLDocResult) THEN
        XMLDocResult := XMLDocResult.XmlDocument;

      SalesShipmentHeader.CALCFIELDS("Signed Document XML");
      SalesShipmentHeader."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDocResult);
      CLEAR(SalesShipmentHeader."Signed Document XML");

      XMLCurrNode := XMLDocResult.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      SalesShipmentHeader."PAC Web Service Name" := PACWebService.Name;

      IF XMLCurrNode.Value <> '1' THEN BEGIN // Error encountered
        SalesShipmentHeader."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        ErrorDescription := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
        IF NOT ISNULL(XMLCurrNode) THEN
          ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
        IF STRLEN(ErrorDescription) > 250 THEN
          ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
        SalesShipmentHeader."Error Description" := COPYSTR(ErrorDescription,1,250);
        CASE Action OF
          EDocAction::"Request Stamp":
            SalesShipmentHeader."Electronic Document Status" :=
              SalesShipmentHeader."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            BEGIN
              SalesShipmentHeader."Electronic Document Status" :=
                SalesShipmentHeader."Electronic Document Status"::"Cancel Error";
              SalesShipmentHeader."Date/Time Canceled" := '';
            END;
        END;
        EXIT;
      END;

      SalesShipmentHeader."Error Code" := '';
      SalesShipmentHeader."Error Description" := '';
      IF Action = EDocAction::Cancel THEN BEGIN
        SalesShipmentHeader."Electronic Document Status" := SalesShipmentHeader."Electronic Document Status"::Canceled;
        EXIT;
      END;

      XMLCurrNode := XMLDocResult.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;

      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;
      FOR Counter := 0 TO (NodeCount - 1) DO BEGIN
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,TRUE));
      END;

      SalesShipmentHeader."Signed Document XML".CREATEOUTSTREAM(OutStr);

      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/4');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');

      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      SalesShipmentHeader."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      SalesShipmentHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
      SalesShipmentHeader."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('SelloSAT');
      CLEAR(OutStr);
      SalesShipmentHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);

      // Certificate Serial
      SalesShipmentHeader."Electronic Document Status" := SalesShipmentHeader."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      QRCodeInput :=
        CreateQRCodeInput(CompanyInfo."RFC No.",GetTransferRFCNo,0,FORMAT(SalesShipmentHeader."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      SalesShipmentHeader."QR Code" := TempBlob.Blob;
    END;

    LOCAL PROCEDURE ProcessResponseETransferShipment@1310064(VAR TransferShipmentHeader@1020000 : Record 5744;Action@1020007 : Option);
    VAR
      TempBlob@1020002 : Record 99008535;
      PACWebService@1020003 : Record 10000;
      XMLDOMManagement@1020015 : Codeunit 6224;
      XMLDoc@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocResult@1310000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020008 : Text[95];
      ErrorDescription@1020009 : Text;
    BEGIN
      // CartaPorte
      // todo transfer
      GetGLSetup;
      GetCompanyInfo;

      // Process Response and Load back to header the Signed XML if you get one...
      IF ISNULL(XMLDocResult) THEN
        XMLDocResult := XMLDocResult.XmlDocument;

      TransferShipmentHeader.CALCFIELDS("Signed Document XML");
      TransferShipmentHeader."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDocResult);
      CLEAR(TransferShipmentHeader."Signed Document XML");

      XMLCurrNode := XMLDocResult.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      TransferShipmentHeader."PAC Web Service Name" := PACWebService.Name;

      IF XMLCurrNode.Value <> '1' THEN BEGIN // Error encountered
        TransferShipmentHeader."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        ErrorDescription := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
        IF NOT ISNULL(XMLCurrNode) THEN
          ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
        IF STRLEN(ErrorDescription) > 250 THEN
          ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
        TransferShipmentHeader."Error Description" := COPYSTR(ErrorDescription,1,250);
        CASE Action OF
          EDocAction::"Request Stamp":
            TransferShipmentHeader."Electronic Document Status" :=
              TransferShipmentHeader."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            BEGIN
              TransferShipmentHeader."Electronic Document Status" :=
                TransferShipmentHeader."Electronic Document Status"::"Cancel Error";
              TransferShipmentHeader."Date/Time Canceled" := '';
            END;
        END;
        EXIT;
      END;

      TransferShipmentHeader."Error Code" := '';
      TransferShipmentHeader."Error Description" := '';
      IF Action = EDocAction::Cancel THEN BEGIN
        TransferShipmentHeader."Electronic Document Status" := TransferShipmentHeader."Electronic Document Status"::Canceled;
        EXIT;
      END;

      XMLCurrNode := XMLDocResult.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;

      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;
      FOR Counter := 0 TO (NodeCount - 1) DO BEGIN
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,TRUE));
      END;

      TransferShipmentHeader."Signed Document XML".CREATEOUTSTREAM(OutStr);
      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/4');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      TransferShipmentHeader."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      TransferShipmentHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
      TransferShipmentHeader."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('SelloSAT');
      CLEAR(OutStr);
      TransferShipmentHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);

      // Certificate Serial
      TransferShipmentHeader."Electronic Document Status" := TransferShipmentHeader."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      QRCodeInput :=
        CreateQRCodeInput(CompanyInfo."RFC No.",GetTransferRFCNo,0,FORMAT(TransferShipmentHeader."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      TransferShipmentHeader."QR Code" := TempBlob.Blob;
    END;

    LOCAL PROCEDURE CreateDocumentHeaderXML@1310095(VAR TempDocumentHeader@1310014 : TEMPORARY Record 10002;DateTimeFirstReqSent@1310009 : Text[50];FormaPago@1310001 : Text;SignedString@1310008 : Text;Certificate@1310007 : Text;CertificateSerialNo@1310006 : Text[250];VAR XMLDoc@1310004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLCurrNode@1310015 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";SubTotal@1310003 : Decimal;TotalDiscount@1310000 : Decimal);
    BEGIN
      AddAttribute(XMLDoc,XMLCurrNode,'Version','4.0');
      AddAttribute(XMLDoc,XMLCurrNode,'Folio',TempDocumentHeader."No.");
      AddAttribute(XMLDoc,XMLCurrNode,'Fecha',DateTimeFirstReqSent);
      AddAttribute(XMLDoc,XMLCurrNode,'Sello',SignedString);
      IF FormaPago <> '' THEN
        AddAttribute(XMLDoc,XMLCurrNode,'FormaPago',FormaPago);
      AddAttribute(XMLDoc,XMLCurrNode,'NoCertificado',CertificateSerialNo);
      AddAttribute(XMLDoc,XMLCurrNode,'Certificado',Certificate);
      AddAttribute(XMLDoc,XMLCurrNode,'SubTotal',FormatAmount(SubTotal));
      AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatAmount(TotalDiscount));
    END;

    LOCAL PROCEDURE CreateXMLDocument33@1020003(VAR TempDocumentHeader@1020000 : TEMPORARY Record 10002;VAR TempDocumentLine@1020009 : TEMPORARY Record 10003;VAR TempCFDIRelationDocument@1310002 : TEMPORARY Record 27006;DateTimeFirstReqSent@1020007 : Text[50];SignedString@1020001 : Text;Certificate@1020002 : Text;CertificateSerialNo@1020008 : Text[250];IsCredit@1020010 : Boolean;VAR XMLDoc@1020005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      TempDocumentLineRetention@1310004 : TEMPORARY Record 10003;
      TempVATAmountLine@1310003 : TEMPORARY Record 290;
      SATUtilities@1020012 : Codeunit 27030;
      XMLCurrNode@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      SubTotal@1310005 : Decimal;
      TotalTax@1310000 : Decimal;
      TotalRetention@1310001 : Decimal;
      TotalDiscount@1020013 : Decimal;
    BEGIN
      InitXML(XMLDoc,XMLCurrNode);
      PrepareDocumentData(
        TempDocumentLine,TempVATAmountLine,TempDocumentLineRetention,TempDocumentHeader."No.",
        SubTotal,TotalTax,TotalRetention,TotalDiscount);

      WITH TempDocumentHeader DO BEGIN
        CreateDocumentHeaderXML(
          TempDocumentHeader,DateTimeFirstReqSent,SATUtilities.GetSATPaymentMethod("Payment Method Code"),
          SignedString,Certificate,CertificateSerialNo,
          XMLDoc,XMLCurrNode,SubTotal,TotalDiscount);

        IF "Currency Code" <> '' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'Moneda',"Currency Code");
          IF ("Currency Code" <> 'MXN') AND ("Currency Code" <> 'XXX') THEN
            AddAttribute(XMLDoc,XMLCurrNode,'TipoCambio',FormatDecimal(1 / "Currency Factor",6));
        END;

        AddAttribute(XMLDoc,XMLCurrNode,'Total',FormatAmount("Amount Including VAT"));
        IF IsCredit THEN
          AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','E') // Egreso
        ELSE
          AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','I'); // Ingreso

        AddAttribute(XMLDoc,XMLCurrNode,'Exportacion',"CFDI Export Code");
        AddAttribute(XMLDoc,XMLCurrNode,'MetodoPago',SATUtilities.GetSATPaymentTerm("Payment Terms Code"));
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo."SAT Postal Code");

        // InformacioGlobal
        IF Customer."CFDI General Public" THEN BEGIN
          AddElementCFDI(XMLCurrNode,'InformacionGlobal','',DocNameSpace,XMLNewChild);
          XMLCurrNode := XMLNewChild;
          AddAttribute(XMLDoc,XMLCurrNode,'A¤o',FORMAT(DATE2DMY("Document Date",3)));
          AddAttribute(XMLDoc,XMLCurrNode,'Meses',FormatMonth(FORMAT(DATE2DMY("Document Date",2))));
          AddAttribute(XMLDoc,XMLCurrNode,'Periodicidad','01');
          XMLCurrNode := XMLCurrNode.ParentNode;
        END;

        AddNodeRelacionado(XMLDoc,XMLCurrNode,XMLNewChild,TempCFDIRelationDocument); // CfdiRelacionados

        // Emisor
        WriteCompanyInfo33(XMLDoc,XMLCurrNode);
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Receptor
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',Customer."RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Nombre',"Bill-to/Pay-To Name");
        AddAttribute(
          XMLDoc,XMLCurrNode,'DomicilioFiscalReceptor',GetSATPostalCode(Customer."Location Code",Customer."Post Code"));

        IF SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'ResidenciaFiscal',SATUtilities.GetSATCountryCode(Customer."Country/Region Code"));
          AddAttribute(XMLDoc,XMLCurrNode,'NumRegIdTrib',Customer."VAT Registration No.");
        END;
        AddAttribute(XMLDoc,XMLCurrNode,'RegimenFiscalReceptor',Customer."SAT Tax Regime Classification");
        AddAttribute(XMLDoc,XMLCurrNode,'UsoCFDI',"CFDI Purpose");

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        TotalDiscount := 0;
        FilterDocumentLines(TempDocumentLine,"No.");
        IF TempDocumentLine.FINDSET THEN
          REPEAT
            AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;
            AddAttribute(
              XMLDoc,XMLCurrNode,'ClaveProdServ',SATUtilities.GetSATItemClassification(TempDocumentLine.Type,TempDocumentLine."No."));
            AddAttribute(XMLDoc,XMLCurrNode,'NoIdentificacion',TempDocumentLine."No.");
            AddAttribute(XMLDoc,XMLCurrNode,'Cantidad',FORMAT(TempDocumentLine.Quantity,0,9));
            AddAttribute(XMLDoc,XMLCurrNode,'ClaveUnidad',SATUtilities.GetSATUnitofMeasure(TempDocumentLine."Unit of Measure Code"));
            AddAttribute(XMLDoc,XMLCurrNode,'Unidad',TempDocumentLine."Unit of Measure Code");
            AddAttribute(XMLDoc,XMLCurrNode,'Descripcion',EncodeString(TempDocumentLine.Description));
            AddAttribute(XMLDoc,XMLCurrNode,'ValorUnitario',FormatAmount(TempDocumentLine."Unit Price/Direct Unit Cost"));
            AddAttribute(
              XMLDoc,XMLCurrNode,'Importe',FormatDecimal(TempDocumentLine.Quantity * TempDocumentLine."Unit Price/Direct Unit Cost",2));

            // might not need the following nodes, took out of original string....
            AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatAmount(TempDocumentLine."Line Discount Amount"));
            AddAttribute(XMLDoc,XMLCurrNode,'ObjetoImp',GetSubjectToTaxCode(TempDocumentLine));

            // Impuestos per line
            AddNodeImpuestoPerLine(TempDocumentLine,TempDocumentLineRetention,XMLDoc,XMLCurrNode,XMLNewChild);

            XMLCurrNode := XMLCurrNode.ParentNode;
          UNTIL TempDocumentLine.NEXT = 0;
        XMLCurrNode := XMLCurrNode.ParentNode;

        CreateXMLDocument33TaxAmountLines(
          TempVATAmountLine,XMLDoc,XMLCurrNode,XMLNewChild,TotalTax,TotalRetention);
      END;
    END;

    LOCAL PROCEDURE CreateXMLDocument33AdvanceSettle@1020088(VAR TempDocumentHeader@1020017 : TEMPORARY Record 10002;VAR TempDocumentLine@1020010 : TEMPORARY Record 10003;DateTimeFirstReqSent@1020009 : Text[50];SignedString@1020008 : Text;Certificate@1020007 : Text;CertificateSerialNo@1020005 : Text[250];VAR XMLDoc@1020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";UUID@1020001 : Text[50]);
    VAR
      TempCFDIRelationDocument@1310000 : TEMPORARY Record 27006;
      TempDocumentLineRetention@1310001 : TEMPORARY Record 10003;
      TempVATAmountLine@1310002 : TEMPORARY Record 290;
      SATUtilities@1020012 : Codeunit 27030;
      XMLCurrNode@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      SubTotal@1310005 : Decimal;
      TotalTax@1310004 : Decimal;
      TotalRetention@1310003 : Decimal;
      TotalDiscount@1020013 : Decimal;
    BEGIN
      InitXML(XMLDoc,XMLCurrNode);
      PrepareDocumentData(
        TempDocumentLine,TempVATAmountLine,TempDocumentLineRetention,TempDocumentHeader."No.",
        SubTotal,TotalTax,TotalRetention,TotalDiscount);

      WITH TempDocumentHeader DO BEGIN
        CreateDocumentHeaderXML(
          TempDocumentHeader,DateTimeFirstReqSent,'30',SignedString,Certificate,CertificateSerialNo,
          XMLDoc,XMLCurrNode,SubTotal,TotalDiscount);

        IF "Currency Code" <> '' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'Moneda',"Currency Code");
          IF ("Currency Code" <> 'MXN') AND ("Currency Code" <> 'XXX') THEN
            AddAttribute(XMLDoc,XMLCurrNode,'TipoCambio',FormatDecimal(1 / "Currency Factor",6));
        END;

        AddAttribute(XMLDoc,XMLCurrNode,'Total',FormatAmount(SubTotal - TotalDiscount + TotalTax - TotalRetention));
        AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','I'); // Ingreso
        AddAttribute(XMLDoc,XMLCurrNode,'Exportacion',"CFDI Export Code");

        AddAttribute(XMLDoc,XMLCurrNode,'MetodoPago',SATUtilities.GetSATPaymentTerm("Payment Terms Code"));
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo."SAT Postal Code");

        InitCFDIRelatedDocuments(TempCFDIRelationDocument,UUID,GetAdvanceCFDIRelation("CFDI Relation"));
        AddNodeRelacionado(XMLDoc,XMLCurrNode,XMLNewChild,TempCFDIRelationDocument); // CfdiRelacionados

        // Emisor
        WriteCompanyInfo33(XMLDoc,XMLCurrNode);
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Receptor
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',Customer."RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Nombre',"Bill-to/Pay-To Name");
        AddAttribute(
          XMLDoc,XMLCurrNode,'DomicilioFiscalReceptor',
          GetSATPostalCode(Customer."Location Code",Customer."Post Code"));

        IF SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'ResidenciaFiscal',SATUtilities.GetSATCountryCode(Customer."Country/Region Code"));
          AddAttribute(XMLDoc,XMLCurrNode,'NumRegIdTrib',Customer."VAT Registration No.");
        END;
        AddAttribute(XMLDoc,XMLCurrNode,'RegimenFiscalReceptor',Customer."SAT Tax Regime Classification");
        AddAttribute(XMLDoc,XMLCurrNode,'UsoCFDI',"CFDI Purpose");

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        TotalDiscount := 0;
        FilterDocumentLines(TempDocumentLine,"No.");
        IF TempDocumentLine.FINDSET THEN
          REPEAT
            AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;
            AddAttribute(
              XMLDoc,XMLCurrNode,'ClaveProdServ',SATUtilities.GetSATItemClassification(TempDocumentLine.Type,TempDocumentLine."No."));
            AddAttribute(XMLDoc,XMLCurrNode,'NoIdentificacion',TempDocumentLine."No.");
            AddAttribute(XMLDoc,XMLCurrNode,'Cantidad',FORMAT(TempDocumentLine.Quantity,0,9));
            AddAttribute(XMLDoc,XMLCurrNode,'ClaveUnidad',SATUtilities.GetSATUnitofMeasure(TempDocumentLine."Unit of Measure Code"));
            AddAttribute(XMLDoc,XMLCurrNode,'Unidad',TempDocumentLine."Unit of Measure Code");
            AddAttribute(XMLDoc,XMLCurrNode,'Descripcion',EncodeString(TempDocumentLine.Description));
            AddAttribute(XMLDoc,XMLCurrNode,'ValorUnitario',FormatAmount(TempDocumentLine."Unit Price/Direct Unit Cost"));
            AddAttribute(
              XMLDoc,XMLCurrNode,'Importe',FormatDecimal(TempDocumentLine.Quantity * TempDocumentLine."Unit Price/Direct Unit Cost",2));

            // might not need the following nodes, took out of original string....
            AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatAmount(TempDocumentLine."Line Discount Amount"));
            AddAttribute(XMLDoc,XMLCurrNode,'ObjetoImp',GetSubjectToTaxCode(TempDocumentLine));
            TotalDiscount := TotalDiscount + TempDocumentLine."Line Discount Amount";

            // Impuestos per line
            AddNodeImpuestoPerLine(TempDocumentLine,TempDocumentLineRetention,XMLDoc,XMLCurrNode,XMLNewChild);

            XMLCurrNode := XMLCurrNode.ParentNode;
          UNTIL TempDocumentLine.NEXT = 0;
        XMLCurrNode := XMLCurrNode.ParentNode;

        CreateXMLDocument33TaxAmountLines(
          TempVATAmountLine,XMLDoc,XMLCurrNode,XMLNewChild,TotalTax,TotalRetention);
      END;
    END;

    LOCAL PROCEDURE CreateXMLDocument33AdvancePayment@1020055(VAR TempDocumentHeader@1020000 : TEMPORARY Record 10002;VAR TempDocumentLine@1020003 : TEMPORARY Record 10003;DateTimeFirstReqSent@1020007 : Text[50];SignedString@1020001 : Text;Certificate@1020002 : Text;CertificateSerialNo@1020008 : Text[250];VAR XMLDoc@1020005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      SATUtilities@1020012 : Codeunit 27030;
      XMLCurrNode@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      TaxCode@1020013 : Code[10];
      TaxType@1020014 : 'Translado,Retencion';
      TotalTaxes@1020015 : Decimal;
      TaxAmount@1310000 : Decimal;
      TaxPercentage@1310001 : Decimal;
      SubTotal@1310003 : Decimal;
      RetainAmt@1310002 : Decimal;
    BEGIN
      InitXMLAdvancePayment(XMLDoc,XMLCurrNode);
      CalcDocumentTotal(TempDocumentLine,SubTotal,RetainAmt);
      WITH TempDocumentHeader DO BEGIN
        CreateDocumentHeaderXML(
          TempDocumentHeader,DateTimeFirstReqSent,SATUtilities.GetSATPaymentMethod("Payment Method Code"),
          SignedString,Certificate,CertificateSerialNo,
          XMLDoc,XMLCurrNode,SubTotal,0);

        AddAttribute(XMLDoc,XMLCurrNode,'Moneda','XXX');

        AddAttribute(XMLDoc,XMLCurrNode,'Total',FormatDecimal(ROUND(SubTotal + RetainAmt,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','I'); // Ingreso
        AddAttribute(XMLDoc,XMLCurrNode,'Exportacion',"CFDI Export Code");

        AddAttribute(XMLDoc,XMLCurrNode,'MetodoPago','PUE');
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo."SAT Postal Code");

        // Emisor
        WriteCompanyInfo33(XMLDoc,XMLCurrNode);
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Receptor
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',Customer."RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Nombre',"Bill-to/Pay-To Name");
        AddAttribute(
          XMLDoc,XMLCurrNode,'DomicilioFiscalReceptor',
          GetSATPostalCode(Customer."Location Code",Customer."Post Code"));

        IF SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'ResidenciaFiscal',SATUtilities.GetSATCountryCode(Customer."Country/Region Code"));
          AddAttribute(XMLDoc,XMLCurrNode,'NumRegIdTrib',Customer."VAT Registration No.");
        END;
        AddAttribute(XMLDoc,XMLCurrNode,'RegimenFiscalReceptor',Customer."SAT Tax Regime Classification");
        AddAttribute(XMLDoc,XMLCurrNode,'UsoCFDI','P01');

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        // Just ONE concept
        AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveProdServ','84111506');
        AddAttribute(XMLDoc,XMLCurrNode,'Cantidad',FORMAT(1));
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveUnidad','ACT');
        AddAttribute(XMLDoc,XMLCurrNode,'Descripcion','Anticipo bien o servicio');

        AddAttribute(XMLDoc,XMLCurrNode,'ValorUnitario',FormatDecimal(ROUND(SubTotal,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'Importe',FormatDecimal(ROUND(SubTotal,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatDecimal(0,0));

        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        IF TempDocumentLine.FINDSET THEN BEGIN
          TaxAmount := TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount;
          IF TaxAmount <> 0 THEN BEGIN
            // Impuestos per line
            AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            // Impuestos->Traslados/Retenciones
            AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
            TaxPercentage := GetTaxPercentage(TempDocumentLine.Amount,TaxAmount);
            TaxCode := TaxCodeFromTaxRate(TaxPercentage / 100,TaxType::Translado);
            XMLCurrNode := XMLNewChild;
            AddAttribute(XMLDoc,XMLCurrNode,'Base',FormatAmount(TempDocumentLine.Amount));

            AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',TaxCode); // Used to be IVA
            IF (TempDocumentLine."VAT %" <> 0) OR (TaxAmount <> 0) THEN BEGIN // When Sales Tax code is % then Tasa, else Exento
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Tasa');
              AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuota',PADSTR(FormatAmount(TaxPercentage / 100),8,'0'));
              AddAttribute(XMLDoc,XMLCurrNode,'Importe',
                FormatDecimal(TaxAmount,0))
            END ELSE
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Exento');
            XMLCurrNode := XMLCurrNode.ParentNode;
            XMLCurrNode := XMLCurrNode.ParentNode;
            XMLCurrNode := XMLCurrNode.ParentNode;
            // End of tax info per line
          END;
        END;

        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;

        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        IF TempDocumentLine.FINDSET THEN BEGIN
          TaxAmount := TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount;
          IF TaxAmount <> 0 THEN BEGIN
            // Impuestos per line
            AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            // Impuestos->Traslados
            AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;

            AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
            TaxPercentage := GetTaxPercentage(TempDocumentLine.Amount,TaxAmount);
            TaxCode := TaxCodeFromTaxRate(TaxPercentage / 100,TaxType::Translado);
            XMLCurrNode := XMLNewChild;
            // AddAttribute(XMLDoc,XMLCurrNode,'Base',FormatAmount(TempDocumentLine.Amount));

            AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',TaxCode); // Used to be IVA
            IF (TempDocumentLine."VAT %" <> 0) OR (TaxAmount <> 0) THEN BEGIN // When Sales Tax code is % then Tasa, else Exento
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Tasa');
              AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuota',PADSTR(FormatAmount(TaxPercentage / 100),8,'0'));
              AddAttribute(XMLDoc,XMLCurrNode,'Importe',
                FormatDecimal(TaxAmount,0))
            END ELSE
              AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Exento');
            TotalTaxes := TotalTaxes + TaxAmount;
            // End of tax info per line
          END;
        END;
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;
        IF TotalTaxes <> 0 THEN
          AddAttribute(XMLDoc,XMLCurrNode,'TotalImpuestosTrasladados',FormatDecimal(TotalTaxes,0)); // TotalImpuestosTrasladados
      END;
    END;

    LOCAL PROCEDURE CreateXMLDocument33AdvanceReverse@1020012(VAR TempDocumentHeader@1020003 : TEMPORARY Record 10002;DateTimeReqSent@1020007 : Text[50];SignedString@1020001 : Text;Certificate@1020002 : Text;CertificateSerialNo@1020008 : Text[250];VAR XMLDoc@1020005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";UUID@1020004 : Text[50];AdvanceAmount@1020000 : Decimal);
    VAR
      TempCFDIRelationDocument@1310000 : TEMPORARY Record 27006;
      SATUtilities@1020012 : Codeunit 27030;
      XMLCurrNode@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      InitXMLAdvancePayment(XMLDoc,XMLCurrNode);
      WITH TempDocumentHeader DO BEGIN
        AddAttribute(XMLDoc,XMLCurrNode,'Version','4.0');
        AddAttribute(XMLDoc,XMLCurrNode,'Folio',"No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',DateTimeReqSent);
        AddAttribute(XMLDoc,XMLCurrNode,'Sello',SignedString);
        AddAttribute(XMLDoc,XMLCurrNode,'FormaPago','30');
        AddAttribute(XMLDoc,XMLCurrNode,'NoCertificado',CertificateSerialNo);
        AddAttribute(XMLDoc,XMLCurrNode,'Certificado',Certificate);
        AddAttribute(XMLDoc,XMLCurrNode,'SubTotal',FormatDecimal(ROUND(AdvanceAmount,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'Moneda','XXX');

        AddAttribute(XMLDoc,XMLCurrNode,'Total',FormatDecimal(ROUND(AdvanceAmount,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','E'); // Egreso
        AddAttribute(XMLDoc,XMLCurrNode,'Exportacion',"CFDI Export Code");

        AddAttribute(XMLDoc,XMLCurrNode,'MetodoPago','PUE');
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo."SAT Postal Code");

        InitCFDIRelatedDocuments(TempCFDIRelationDocument,UUID,GetAdvanceCFDIRelation("CFDI Relation"));
        AddNodeRelacionado(XMLDoc,XMLCurrNode,XMLNewChild,TempCFDIRelationDocument); // CfdiRelacionados

        // Emisor
        WriteCompanyInfo33(XMLDoc,XMLCurrNode);
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Receptor
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',Customer."RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Nombre',Customer.Name);
        AddAttribute(
          XMLDoc,XMLCurrNode,'DomicilioFiscalReceptor',
          GetSATPostalCode(Customer."Location Code",Customer."Post Code"));

        IF SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'ResidenciaFiscal',SATUtilities.GetSATCountryCode(Customer."Country/Region Code"));
          AddAttribute(XMLDoc,XMLCurrNode,'NumRegIdTrib',Customer."VAT Registration No.");
        END;
        AddAttribute(XMLDoc,XMLCurrNode,'RegimenFiscalReceptor',Customer."SAT Tax Regime Classification");
        AddAttribute(XMLDoc,XMLCurrNode,'UsoCFDI','P01');

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        // Just ONE concept
        AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveProdServ','84111506');
        AddAttribute(XMLDoc,XMLCurrNode,'Cantidad',FORMAT(1));
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveUnidad','ACT');
        AddAttribute(XMLDoc,XMLCurrNode,'Descripcion','Aplicacion de anticipo');

        AddAttribute(XMLDoc,XMLCurrNode,'ValorUnitario',FormatDecimal(ROUND(AdvanceAmount,1,'='),0));
        AddAttribute(XMLDoc,XMLCurrNode,'Importe',FormatDecimal(ROUND(AdvanceAmount,1,'='),0));

        AddAttribute(XMLDoc,XMLCurrNode,'Descuento',FormatDecimal(0,0));
      END;
    END;

    LOCAL PROCEDURE CreateXMLDocument33Transfer@1310078(VAR TempDocumentHeader@1020000 : TEMPORARY Record 10002;VAR TempDocumentLine@1020009 : TEMPORARY Record 10003;DateTimeFirstReqSent@1020007 : Text[50];SignedString@1020001 : Text;Certificate@1020002 : Text;CertificateSerialNo@1020008 : Text[250];VAR XMLDoc@1020005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      FixedAsset@1310001 : Record 5600;
      Employee@1310000 : Record 5200;
      Item@1310003 : Record 27;
      CFDITransportOperator@1310002 : Record 27007;
      SATUtilities@1020012 : Codeunit 27030;
      XMLCurrNode@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NumeroPedimento@1310004 : Text;
      DestinationRFCNo@1310006 : Text;
      HazardousMatExists@1310005 : Boolean;
      SATClassificationCode@1310007 : Code[10];
    BEGIN
      InitXMLCartaPorte(XMLDoc,XMLCurrNode);

      AddAttribute(XMLDoc,XMLCurrNode,'Version','4.0');
      AddAttribute(XMLDoc,XMLCurrNode,'Folio',TempDocumentHeader."No.");
      AddAttribute(XMLDoc,XMLCurrNode,'Fecha',DateTimeFirstReqSent);
      AddAttribute(XMLDoc,XMLCurrNode,'Sello',SignedString);
      AddAttribute(XMLDoc,XMLCurrNode,'NoCertificado',CertificateSerialNo);
      AddAttribute(XMLDoc,XMLCurrNode,'Certificado',Certificate);
      AddAttribute(XMLDoc,XMLCurrNode,'SubTotal','0');
      AddAttribute(XMLDoc,XMLCurrNode,'Moneda','XXX');
      AddAttribute(XMLDoc,XMLCurrNode,'Total','0');
      AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','T'); // Traslado
      AddAttribute(XMLDoc,XMLCurrNode,'Exportacion',TempDocumentHeader."CFDI Export Code");
      AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo."SAT Postal Code");

      // Emisor
      WriteCompanyInfo33(XMLDoc,XMLCurrNode);
      XMLCurrNode := XMLCurrNode.ParentNode;

      // Receptor
      AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;
      AddAttribute(XMLDoc,XMLCurrNode,'Rfc',GetTransferRFCNo);
      AddAttribute(XMLDoc,XMLCurrNode,'UsoCFDI',TempDocumentHeader."CFDI Purpose");
      AddAttribute(
        XMLDoc,XMLCurrNode,'DomicilioFiscalReceptor',
        GetSATPostalCode(Customer."Location Code",Customer."Post Code"));
      AddAttribute(XMLDoc,XMLCurrNode,'RegimenFiscalReceptor','601');

      // Conceptos
      XMLCurrNode := XMLCurrNode.ParentNode;
      AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;

      // Conceptos->Concepto
      FilterDocumentLines(TempDocumentLine,TempDocumentHeader."No.");
      IF TempDocumentLine.FINDSET THEN
        REPEAT
          AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
          XMLCurrNode := XMLNewChild;
          AddAttribute(
            XMLDoc,XMLCurrNode,'ClaveProdServ',SATUtilities.GetSATItemClassification(TempDocumentLine.Type,TempDocumentLine."No."));
          AddAttribute(XMLDoc,XMLCurrNode,'NoIdentificacion',TempDocumentLine."No.");
          AddAttribute(XMLDoc,XMLCurrNode,'Cantidad',FORMAT(TempDocumentLine.Quantity,0,9));
          AddAttribute(XMLDoc,XMLCurrNode,'ClaveUnidad',SATUtilities.GetSATUnitofMeasure(TempDocumentLine."Unit of Measure Code"));
          AddAttribute(XMLDoc,XMLCurrNode,'Unidad',TempDocumentLine."Unit of Measure Code");
          AddAttribute(XMLDoc,XMLCurrNode,'Descripcion',EncodeString(TempDocumentLine.Description));
          AddAttribute(XMLDoc,XMLCurrNode,'ValorUnitario','0');
          AddAttribute(XMLDoc,XMLCurrNode,'Importe','0');
          AddAttribute(XMLDoc,XMLCurrNode,'ObjetoImp',GetSubjectToTaxCode(TempDocumentLine));
          IF TempDocumentHeader."Foreign Trade" THEN BEGIN
            NumeroPedimento := FormatNumeroPedimento(TempDocumentLine);
            IF NumeroPedimento <> '' THEN BEGIN
              AddElementCFDI(XMLCurrNode,'InformacionAduanera','',DocNameSpace,XMLNewChild);
              XMLCurrNode := XMLNewChild;
              AddAttributeSimple(XMLDoc,XMLCurrNode,'NumeroPedimento',NumeroPedimento);
              XMLCurrNode := XMLCurrNode.ParentNode;
            END;
          END;
          XMLCurrNode := XMLCurrNode.ParentNode; // Concepto
        UNTIL TempDocumentLine.NEXT = 0;
      XMLCurrNode := XMLCurrNode.ParentNode;

      AddElementCFDI(XMLCurrNode,'Complemento','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;

      // CartaPorte
      DocNameSpace := 'http://www.sat.gob.mx/CartaPorte20';
      AddElementCartaPorte(XMLCurrNode,'CartaPorte','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;
      AddAttribute(XMLDoc,XMLCurrNode,'Version','2.0');
      IF TempDocumentHeader."Foreign Trade" THEN BEGIN
        AddAttribute(XMLDoc,XMLCurrNode,'TranspInternac','S¡');
        AddAttribute(XMLDoc,XMLCurrNode,'EntradaSalidaMerc','Salida');
        AddAttribute(XMLDoc,XMLCurrNode,'ViaEntradaSalida','01');
      END ELSE
        AddAttribute(XMLDoc,XMLCurrNode,'TranspInternac','No');
      AddAttribute(XMLDoc,XMLCurrNode,'TotalDistRec',FormatDecimal(TempDocumentHeader."Transit Distance",6));

      // CartaPorte/Ubicaciones
      AddElementCartaPorte(XMLCurrNode,'Ubicaciones','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;
      AddNodeCartaPorteUbicacion(
        'Origen',CompanyInfo."RFC No.",TempDocumentHeader."Transit-from Location",'OR',
        FormatDateTime(TempDocumentHeader."Transit-from Date/Time"),'',TempDocumentHeader."Foreign Trade",
        XMLDoc,XMLCurrNode,XMLNewChild);
      DestinationRFCNo := Customer."RFC No.";
      IF DestinationRFCNo = '' THEN
        DestinationRFCNo := CompanyInfo."RFC No.";
      AddNodeCartaPorteUbicacion(
        'Destino',DestinationRFCNo,TempDocumentHeader."Transit-to Location",'DE',
        FormatDateTime(TempDocumentHeader."Transit-from Date/Time" + TempDocumentHeader."Transit Hours" * 1000 * 60 * 60 ),
        FormatDecimal(TempDocumentHeader."Transit Distance",6),TempDocumentHeader."Foreign Trade",
        XMLDoc,XMLCurrNode,XMLNewChild);
      XMLCurrNode := XMLCurrNode.ParentNode; // Ubicaciones

      // CartaPorte/Mercancias
      AddElementCartaPorte(XMLCurrNode,'Mercancias','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;
      TempDocumentLine.SETRANGE("Document No.",TempDocumentHeader."No.");
      TempDocumentLine.CALCSUMS("Gross Weight");
      AddAttribute(XMLDoc,XMLCurrNode,'UnidadPeso',TempDocumentHeader."SAT Weight Unit Of Measure");
      AddAttribute(XMLDoc,XMLCurrNode,'NumTotalMercancias',FormatDecimal(TempDocumentLine.COUNT,0));
      AddAttribute(XMLDoc,XMLCurrNode,'PesoBrutoTotal',FormatDecimal(TempDocumentLine."Gross Weight",3));
      IF TempDocumentLine.FINDSET THEN
        REPEAT
          IF TempDocumentLine.Type = TempDocumentLine.Type::Item THEN
            Item.GET(TempDocumentLine."No.")
          ELSE
            Item.INIT;
          AddElementCartaPorte(XMLCurrNode,'Mercancia','',DocNameSpace,XMLNewChild);
          XMLCurrNode := XMLNewChild;
          SATClassificationCode := SATUtilities.GetSATItemClassification(TempDocumentLine.Type,TempDocumentLine."No.");
          AddAttribute(XMLDoc,XMLCurrNode,'BienesTransp',SATClassificationCode);
          AddAttribute(XMLDoc,XMLCurrNode,'Descripcion',EncodeString(TempDocumentLine.Description));
          AddAttribute(XMLDoc,XMLCurrNode,'Cantidad',FORMAT(TempDocumentLine.Quantity,0,9));
          AddAttribute(XMLDoc,XMLCurrNode,'ClaveUnidad',SATUtilities.GetSATUnitofMeasure(TempDocumentLine."Unit of Measure Code"));
          IF Item."SAT Hazardous Material" <> '' THEN BEGIN
            HazardousMatExists := TRUE;
            AddAttribute(XMLDoc,XMLCurrNode,'MaterialPeligroso','S¡');
            AddAttribute(XMLDoc,XMLCurrNode,'CveMaterialPeligroso',Item."SAT Hazardous Material");
            AddAttribute(XMLDoc,XMLCurrNode,'Embalaje',Item."SAT Packaging Type");
          END ELSE
            IF IsHazardousMaterialMandatory(SATClassificationCode) THEN
              AddAttribute(XMLDoc,XMLCurrNode,'MaterialPeligroso','No');
          AddAttribute(XMLDoc,XMLCurrNode,'PesoEnKg',FormatDecimal(TempDocumentLine."Gross Weight",3));
          AddAttribute(XMLDoc,XMLCurrNode,'ValorMercancia','0');
          AddAttribute(XMLDoc,XMLCurrNode,'Moneda','MXN');
          IF TempDocumentHeader."Foreign Trade" THEN BEGIN
            AddAttribute(XMLDoc,XMLCurrNode,'UUIDComercioExt','00000000-0000-0000-0000-000000000000');
            AddAttribute(XMLDoc,XMLCurrNode,'FraccionArancelaria',DELCHR(Item."Tariff No."));
          END;
          XMLCurrNode := XMLCurrNode.ParentNode; // Mercancia
        UNTIL TempDocumentLine.NEXT = 0;

      FixedAsset.GET(TempDocumentHeader."Vehicle Code");
      AddElementCartaPorte(XMLCurrNode,'Autotransporte','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;
      AddAttribute(XMLDoc,XMLCurrNode,'PermSCT',CompanyInfo."SCT Permission Type");
      AddAttribute(XMLDoc,XMLCurrNode,'NumPermisoSCT',CompanyInfo."SCT Permission Number");
      AddElementCartaPorte(XMLCurrNode,'IdentificacionVehicular','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;
      AddAttribute(XMLDoc,XMLCurrNode,'ConfigVehicular',FixedAsset."SAT Federal Autotransport");
      AddAttribute(XMLDoc,XMLCurrNode,'PlacaVM',FixedAsset."Vehicle Licence Plate");
      AddAttribute(XMLDoc,XMLCurrNode,'AnioModeloVM',FORMAT(FixedAsset."Vehicle Year"));
      XMLCurrNode := XMLCurrNode.ParentNode; // IdentificacionVehicular

      // Seguros
      AddElementCartaPorte(XMLCurrNode,'Seguros','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;
      AddAttribute(XMLDoc,XMLCurrNode,'AseguraRespCivil',TempDocumentHeader."Insurer Name");
      AddAttribute(XMLDoc,XMLCurrNode,'PolizaRespCivil',TempDocumentHeader."Insurer Policy Number");
      IF HazardousMatExists THEN BEGIN
        AddAttribute(XMLDoc,XMLCurrNode,'AseguraMedAmbiente',TempDocumentHeader."Medical Insurer Name");
        AddAttribute(XMLDoc,XMLCurrNode,'PolizaMedAmbiente',TempDocumentHeader."Medical Ins. Policy Number");
      END;
      XMLCurrNode := XMLCurrNode.ParentNode; // Seguros

      IF (TempDocumentHeader."Trailer 1" <> '') OR (TempDocumentHeader."Trailer 2" <> '') THEN BEGIN
        AddElementCartaPorte(XMLCurrNode,'Remolques','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        IF FixedAsset.GET(TempDocumentHeader."Trailer 1") THEN BEGIN
          AddElementCartaPorte(XMLCurrNode,'Remolque','',DocNameSpace,XMLNewChild);
          XMLCurrNode := XMLNewChild;
          AddAttribute(XMLDoc,XMLCurrNode,'SubTipoRem',FixedAsset."SAT Trailer Type");
          AddAttribute(XMLDoc,XMLCurrNode,'Placa',FixedAsset."Vehicle Licence Plate");
          XMLCurrNode := XMLCurrNode.ParentNode; // Remolque
        END;
        IF FixedAsset.GET(TempDocumentHeader."Trailer 2") THEN BEGIN
          AddElementCartaPorte(XMLCurrNode,'Remolque','',DocNameSpace,XMLNewChild);
          XMLCurrNode := XMLNewChild;
          AddAttribute(XMLDoc,XMLCurrNode,'SubTipoRem',FixedAsset."SAT Trailer Type");
          AddAttribute(XMLDoc,XMLCurrNode,'Placa',FixedAsset."Vehicle Licence Plate");
          XMLCurrNode := XMLCurrNode.ParentNode; // Remolque
        END;
        XMLCurrNode := XMLCurrNode.ParentNode; // Remolques
      END;
      XMLCurrNode := XMLCurrNode.ParentNode; // Autotransporte
      XMLCurrNode := XMLCurrNode.ParentNode; // Mercancias

      // CartaPorte/FiguraTransporte
      AddElementCartaPorte(XMLCurrNode,'FiguraTransporte','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;
      CFDITransportOperator.SETRANGE("Document Table ID",TempDocumentHeader."Document Table ID");
      CFDITransportOperator.SETRANGE("Document No.",TempDocumentHeader."No.");
      IF CFDITransportOperator.FINDSET THEN
        REPEAT
          AddElementCartaPorte(XMLCurrNode,'TiposFigura','',DocNameSpace,XMLNewChild);
          XMLCurrNode := XMLNewChild;
          Employee.GET(CFDITransportOperator."Operator Code");
          AddAttribute(XMLDoc,XMLCurrNode,'TipoFigura','01'); // 01 - Autotransporte Federal
          AddAttribute(XMLDoc,XMLCurrNode,'RFCFigura',Employee."RFC No.");
          AddAttribute(XMLDoc,XMLCurrNode,'NumLicencia',Employee."License No.");
          XMLCurrNode := XMLCurrNode.ParentNode; // TiposFigura
        UNTIL CFDITransportOperator.NEXT = 0;
      XMLCurrNode := XMLCurrNode.ParentNode; // FiguraTransporte

      XMLCurrNode := XMLCurrNode.ParentNode; // CartaPorte

      XMLCurrNode := XMLCurrNode.ParentNode; // Complemento
    END;

    LOCAL PROCEDURE CreateXMLDocument33TaxAmountLines@1310057(VAR TempVATAmountLine@1310000 : TEMPORARY Record 290;VAR XMLDoc@1310007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLCurrNode@1310002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR XMLNewChild@1310001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";TotalTax@1310008 : Decimal;TotalRetention@1310009 : Decimal);
    BEGIN
      TempVATAmountLine.RESET;
      IF TempVATAmountLine.ISEMPTY THEN
        EXIT;

      // Impuestos
      AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;

      TempVATAmountLine.SETRANGE(Positive,FALSE);
      IF TempVATAmountLine.FINDSET THEN BEGIN
        // Impuestos->Retenciones
        AddElementCFDI(XMLCurrNode,'Retenciones','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        REPEAT
          AddElementCFDI(XMLCurrNode,'Retencion','',DocNameSpace,XMLNewChild);
          XMLCurrNode := XMLNewChild;
          AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',GetTaxCode(TempVATAmountLine."VAT %",TempVATAmountLine."VAT Amount"));
          AddAttribute(XMLDoc,XMLCurrNode,'Importe',FormatAmount(TempVATAmountLine."VAT Amount"));
          XMLCurrNode := XMLCurrNode.ParentNode;
        UNTIL TempVATAmountLine.NEXT = 0;
        XMLCurrNode := XMLCurrNode.ParentNode; // Retenciones
        AddAttribute(XMLDoc,XMLCurrNode,'TotalImpuestosRetenidos',FormatAmount(TotalRetention)); // TotalImpuestosRetenidos
      END;

      TempVATAmountLine.SETRANGE(Positive,TRUE);
      IF TempVATAmountLine.FINDSET THEN BEGIN
        // Impuestos->Traslados
        AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        REPEAT
          AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
          XMLCurrNode := XMLNewChild;

          IF TempVATAmountLine."Tax Category" = GetTaxCategoryExempt THEN BEGIN
            AddAttribute(XMLDoc,XMLCurrNode,'Base',FormatAmount(TempVATAmountLine."VAT Base"));
            AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',GetTaxCode(TempVATAmountLine."VAT %",TempVATAmountLine."VAT Amount"));
            AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Exento');
          END ELSE BEGIN
            AddAttribute(XMLDoc,XMLCurrNode,'Base',FormatAmount(TempVATAmountLine."VAT Base"));
            AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',GetTaxCode(TempVATAmountLine."VAT %",TempVATAmountLine."VAT Amount"));
            AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Tasa');
            AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuota',PADSTR(FormatAmount(TempVATAmountLine."VAT %" / 100),8,'0'));
            AddAttribute(XMLDoc,XMLCurrNode,'Importe',FormatAmount(TempVATAmountLine."VAT Amount"));
          END;

          XMLCurrNode := XMLCurrNode.ParentNode;
        UNTIL TempVATAmountLine.NEXT = 0;
        XMLCurrNode := XMLCurrNode.ParentNode; // Traslados
        AddAttribute(XMLDoc,XMLCurrNode,'TotalImpuestosTrasladados',FormatAmount(TotalTax)); // TotalImpuestosTrasladados
      END;

      XMLCurrNode := XMLCurrNode.ParentNode; // Impuestos
    END;

    LOCAL PROCEDURE CreateDocumentHeaderOriginalStr@1310105(VAR TempDocumentHeader@1310011 : TEMPORARY Record 10002;DateTimeFirstReqSent@1310006 : Text;FormaPago@1310004 : Text;SubTotal@1310003 : Decimal;TotalDiscount@1310000 : Decimal;VAR BlobManagement@1310012 : Codeunit 10146);
    BEGIN
      BlobManagement.Init;
      BlobManagement.Write('||4.0|'); // Version
      BlobManagement.Write(RemoveInvalidChars(TempDocumentHeader."No.") + '|'); // Folio
      BlobManagement.Write(DateTimeFirstReqSent + '|'); // Fecha
      BlobManagement.Write(FormaPago + '|'); // FormaPago
      BlobManagement.Write(GetCertificateSerialNo + '|'); // NoCertificado
      BlobManagement.Write(FormatAmount(SubTotal) + '|'); // SubTotal
      BlobManagement.Write(FormatAmount(TotalDiscount) + '|'); // Descuento
    END;

    [External]
    PROCEDURE CreateOriginalStr33@1020004(VAR TempDocumentHeader@1020001 : TEMPORARY Record 10002;VAR TempDocumentLine@1020003 : TEMPORARY Record 10003;DateTimeFirstReqSent@1020005 : Text;SubTotal@1020004 : Decimal;RetainAmt@1020007 : Decimal;IsCredit@1020006 : Boolean;VAR TempBlob@1020002 : Record 99008535);
    VAR
      TempCFDIRelationDocument@1310000 : TEMPORARY Record 27006;
    BEGIN
      CreateOriginalStr33Document(
        TempDocumentHeader,TempDocumentLine,TempCFDIRelationDocument,DateTimeFirstReqSent,IsCredit,TempBlob);
      SubTotal := 0 ;
      RetainAmt := 0;
    END;

    [External]
    PROCEDURE CreateOriginalStr33WithUUID@1310005(VAR TempDocumentHeader@1020001 : TEMPORARY Record 10002;VAR TempDocumentLine@1020003 : TEMPORARY Record 10003;DateTimeFirstReqSent@1020005 : Text;SubTotal@1020004 : Decimal;RetainAmt@1020007 : Decimal;IsCredit@1020006 : Boolean;VAR TempBlob@1020002 : Record 99008535;UUID@1310000 : Text[50]);
    VAR
      TempCFDIRelationDocument@1310001 : TEMPORARY Record 27006;
    BEGIN
      InitCFDIRelatedDocuments(TempCFDIRelationDocument,UUID,TempDocumentHeader."CFDI Relation");
      CreateOriginalStr33Document(
        TempDocumentHeader,TempDocumentLine,TempCFDIRelationDocument,DateTimeFirstReqSent,IsCredit,TempBlob);
      SubTotal := 0 ;
      RetainAmt := 0;
    END;

    LOCAL PROCEDURE CreateOriginalStr33Document@1310004(VAR TempDocumentHeader@1020001 : TEMPORARY Record 10002;VAR TempDocumentLine@1020003 : TEMPORARY Record 10003;VAR TempCFDIRelationDocument@1310002 : TEMPORARY Record 27006;DateTimeFirstReqSent@1020005 : Text;IsCredit@1020006 : Boolean;VAR TempBlob@1020002 : Record 99008535);
    VAR
      TempDocumentLineRetention@1310003 : TEMPORARY Record 10003;
      TempVATAmountLine@1310001 : TEMPORARY Record 290;
      BlobManagement@1020000 : Codeunit 10146;
      SATUtilities@1020008 : Codeunit 27030;
      SubTotal@1310005 : Decimal;
      TotalTax@1310004 : Decimal;
      TotalRetention@1310000 : Decimal;
      TotalDiscount@1020011 : Decimal;
    BEGIN
      PrepareDocumentData(
        TempDocumentLine,TempVATAmountLine,TempDocumentLineRetention,TempDocumentHeader."No.",
        SubTotal,TotalTax,TotalRetention,TotalDiscount);

      WITH TempDocumentHeader DO BEGIN
        CreateDocumentHeaderOriginalStr(
          TempDocumentHeader,DateTimeFirstReqSent,SATUtilities.GetSATPaymentMethod("Payment Method Code"),
          SubTotal,TotalDiscount,BlobManagement);

        IF "Currency Code" <> '' THEN BEGIN
          BlobManagement.Write("Currency Code" + '|'); // Moneda
          IF ("Currency Code" <> 'MXN') AND ("Currency Code" <> 'XXX') THEN
            BlobManagement.Write(FormatDecimal(1 / "Currency Factor",6) + '|'); // TipoCambio
        END;

        BlobManagement.Write(FormatAmount("Amount Including VAT") + '|'); // Total
        IF IsCredit THEN
          BlobManagement.Write(FORMAT('E') + '|') // Egreso
        ELSE
          BlobManagement.Write(FORMAT('I') + '|'); // Ingreso
        BlobManagement.Write("CFDI Export Code" + '|'); // Exportacion

        IF NOT Export THEN BEGIN
          GetCompanyInfo;
          GetCustomer("Bill-to/Pay-To No.");
        END;
        BlobManagement.Write(SATUtilities.GetSATPaymentTerm("Payment Terms Code") + '|'); // MetodoPago
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."SAT Postal Code") + '|'); // LugarExpedicion

        // InformacionGlobal
        IF Customer."CFDI General Public" THEN BEGIN
          BlobManagement.Write('01|'); // Periodicidad
          BlobManagement.Write(FormatMonth(FORMAT(DATE2DMY("Document Date",2))) + '|'); // Meses
          BlobManagement.Write(FORMAT(DATE2DMY("Document Date",3)) + '|'); // A¤o
        END;

        AddStrRelacionado(TempCFDIRelationDocument,BlobManagement); // CfdiRelacionados

        // Company Information (Emisor)
        BlobManagement.Write(CompanyInfo."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|'); // Nombre
        BlobManagement.Write(CompanyInfo."SAT Tax Regime Classification" + '|'); // RegimenFiscal

        // Customer information (Receptor)
        BlobManagement.Write(Customer."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars("Bill-to/Pay-To Name") + '|'); // Nombre
        BlobManagement.Write(
          GetSATPostalCode(Customer."Location Code",Customer."Post Code") + '|'); // DomicilioFiscalReceptor
        IF SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' THEN BEGIN
          BlobManagement.Write(SATUtilities.GetSATCountryCode(Customer."Country/Region Code") + '|'); // ResidenciaFiscal
          BlobManagement.Write(RemoveInvalidChars(Customer."VAT Registration No.") + '|'); // NumRegIDTrib
        END;
        BlobManagement.Write(Customer."SAT Tax Regime Classification" + '|'); // RegimenFiscalReceptor
        BlobManagement.Write(RemoveInvalidChars("CFDI Purpose") + '|'); // UsoCFDI

        FilterDocumentLines(TempDocumentLine,"No.");
        IF TempDocumentLine.FINDSET THEN
          REPEAT
            BlobManagement.Write(SATUtilities.GetSATItemClassification(TempDocumentLine.Type,TempDocumentLine."No.") + '|'); // ClaveProdServ
            BlobManagement.Write(TempDocumentLine."No." + '|'); // NoIdentificacion
            BlobManagement.Write(FORMAT(TempDocumentLine.Quantity,0,9) + '|'); // Cantidad
            BlobManagement.Write(SATUtilities.GetSATUnitofMeasure(TempDocumentLine."Unit of Measure Code") + '|'); // ClaveUnidad
            BlobManagement.Write(TempDocumentLine."Unit of Measure Code" + '|'); // Unidad
            BlobManagement.Write(EncodeString(TempDocumentLine.Description) + '|'); // Descripcion
            BlobManagement.Write(FormatAmount(TempDocumentLine."Unit Price/Direct Unit Cost") + '|'); // ValorUnitario
            BlobManagement.Write(FormatDecimal(TempDocumentLine.Quantity * TempDocumentLine."Unit Price/Direct Unit Cost",2) + '|'); // Importe
            BlobManagement.Write(FormatAmount(TempDocumentLine."Line Discount Amount") + '|'); // Descuento
            BlobManagement.Write(GetSubjectToTaxCode(TempDocumentLine) + '|'); // ObjetoImp
            AddStrImpuestoPerLine(TempDocumentLine,TempDocumentLineRetention,BlobManagement);
          UNTIL TempDocumentLine.NEXT = 0;

        CreateOriginalStr33TaxAmountLines(
          TempVATAmountLine,BlobManagement,TotalTax,TotalRetention);

        BlobManagement.WriteAllowOneCharacter('|');
        BlobManagement.Get(TempBlob);
      END;

      // FileManagement.BLOBExport(TempBlob,'OriginalString33.xml',TRUE);
    END;

    [External]
    PROCEDURE CreateOriginalStr33AdvanceSettle@1020084(VAR TempDocumentHeader@1020001 : TEMPORARY Record 10002;VAR TempDocumentLine@1020003 : TEMPORARY Record 10003;DateTimeFirstReqSent@1020005 : Text;SubTotal@1020004 : Decimal;RetainAmt@1020007 : Decimal;VAR TempBlob@1020002 : Record 99008535;UUID@1020006 : Text[50]);
    VAR
      TempCFDIRelationDocument@1310000 : TEMPORARY Record 27006;
      TempDocumentLineRetention@1310001 : TEMPORARY Record 10003;
      TempVATAmountLine@1310002 : TEMPORARY Record 290;
      BlobManagement@1020000 : Codeunit 10146;
      SATUtilities@1020008 : Codeunit 27030;
      TotalTax@1310004 : Decimal;
      TotalRetention@1310003 : Decimal;
      TotalDiscount@1020011 : Decimal;
    BEGIN
      RetainAmt := 0;
      PrepareDocumentData(
        TempDocumentLine,TempVATAmountLine,TempDocumentLineRetention,TempDocumentHeader."No.",
        SubTotal,TotalTax,TotalRetention,TotalDiscount);

      WITH TempDocumentHeader DO BEGIN
        CreateDocumentHeaderOriginalStr(
          TempDocumentHeader,DateTimeFirstReqSent,'30',
          SubTotal,TotalDiscount,BlobManagement);

        IF "Currency Code" <> '' THEN BEGIN
          BlobManagement.Write("Currency Code" + '|'); // Moneda
          IF ("Currency Code" <> 'MXN') AND ("Currency Code" <> 'XXX') THEN
            BlobManagement.Write(FormatDecimal(1 / "Currency Factor",6) + '|'); // TipoCambio
        END;

        BlobManagement.Write(FormatAmount(SubTotal - TotalDiscount + TotalTax - TotalRetention) + '|'); // Total
        BlobManagement.Write(FORMAT('I') + '|'); // Ingreso -- TipoDeComprante
        BlobManagement.Write("CFDI Export Code" + '|'); // Exportacion

        IF NOT Export THEN BEGIN
          GetCompanyInfo;
          GetCustomer("Bill-to/Pay-To No.");
        END;
        BlobManagement.Write(SATUtilities.GetSATPaymentTerm("Payment Terms Code") + '|'); // MetodoPago
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."SAT Postal Code") + '|'); // LugarExpedicion

        // Related documents
        InitCFDIRelatedDocuments(TempCFDIRelationDocument,UUID,"CFDI Relation");
        AddStrRelacionado(TempCFDIRelationDocument,BlobManagement); // CfdiRelacionados

        // Company Information (Emisor)
        BlobManagement.Write(CompanyInfo."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|'); // Nombre
        BlobManagement.Write(CompanyInfo."SAT Tax Regime Classification" + '|'); // RegimenFiscal

        // Customer information (Receptor)
        BlobManagement.Write(Customer."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars("Bill-to/Pay-To Name") + '|'); // Nombre
        BlobManagement.Write(
          GetSATPostalCode(Customer."Location Code",Customer."Post Code") + '|'); // DomicilioFiscalReceptor
        IF SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' THEN BEGIN
          BlobManagement.Write(SATUtilities.GetSATCountryCode(Customer."Country/Region Code") + '|'); // ResidenciaFiscal
          BlobManagement.Write(RemoveInvalidChars(Customer."VAT Registration No.") + '|'); // NumRegIDTrib
        END;
        BlobManagement.Write(Customer."SAT Tax Regime Classification" + '|'); // RegimenFiscalReceptor
        BlobManagement.Write(RemoveInvalidChars("CFDI Purpose") + '|'); // UsoCFDI

        FilterDocumentLines(TempDocumentLine,"No.");
        IF TempDocumentLine.FINDSET THEN
          REPEAT
            BlobManagement.Write(SATUtilities.GetSATItemClassification(TempDocumentLine.Type,TempDocumentLine."No.") + '|'); // ClaveProdServ
            BlobManagement.Write(TempDocumentLine."No." + '|'); // NoIdentificacion
            BlobManagement.Write(FORMAT(TempDocumentLine.Quantity,0,9) + '|'); // Cantidad
            BlobManagement.Write(SATUtilities.GetSATUnitofMeasure(TempDocumentLine."Unit of Measure Code") + '|'); // ClaveUnidad
            BlobManagement.Write(TempDocumentLine."Unit of Measure Code" + '|'); // Unidad
            BlobManagement.Write(EncodeString(TempDocumentLine.Description) + '|'); // Descripcion
            BlobManagement.Write(FormatAmount(TempDocumentLine."Unit Price/Direct Unit Cost") + '|'); // ValorUnitario
            BlobManagement.Write(FormatDecimal(TempDocumentLine.Quantity * TempDocumentLine."Unit Price/Direct Unit Cost",2) + '|'); // Importe
            BlobManagement.Write(FormatAmount(TempDocumentLine."Line Discount Amount") + '|'); // Descuento
            BlobManagement.Write(GetSubjectToTaxCode(TempDocumentLine) + '|'); // ObjetoImp
            TotalDiscount := TotalDiscount + TempDocumentLine."Line Discount Amount";

            AddStrImpuestoPerLine(TempDocumentLine,TempDocumentLineRetention,BlobManagement);
          UNTIL TempDocumentLine.NEXT = 0;

        CreateOriginalStr33TaxAmountLines(
          TempVATAmountLine,BlobManagement,TotalTax,TotalRetention);

        BlobManagement.WriteAllowOneCharacter('|');
        BlobManagement.Get(TempBlob);
      END;

      // FileManagement.BLOBExport(TempBlob,'OriginalStringAdvanceSettle.xml',TRUE);
    END;

    [External]
    PROCEDURE CreateOriginalStr33AdvancePayment@1020056(VAR TempDocumentHeader@1020004 : TEMPORARY Record 10002;VAR TempDocumentLine@1020001 : TEMPORARY Record 10003;DateTimeFirstReqSent@1020005 : Text;SubTotal@1020006 : Decimal;RetainAmt@1020003 : Decimal;VAR TempBlob@1020002 : Record 99008535);
    VAR
      BlobManagement@1020000 : Codeunit 10146;
      SATUtilities@1020008 : Codeunit 27030;
      TaxCode@1020010 : Code[10];
      TaxType@1020009 : 'Translado,Retencion';
      TotalTaxes@1020011 : Decimal;
      TaxAmount@1310001 : Decimal;
      TaxPercentage@1310002 : Decimal;
    BEGIN
      CalcDocumentTotal(TempDocumentLine,SubTotal,RetainAmt);
      WITH TempDocumentHeader DO BEGIN
        BlobManagement.Init;
        BlobManagement.Write('||4.0|'); // Version
        BlobManagement.Write(RemoveInvalidChars("No.") + '|'); // Folio
        BlobManagement.Write(DateTimeFirstReqSent + '|'); // Fecha
        BlobManagement.Write(SATUtilities.GetSATPaymentMethod("Payment Method Code") + '|'); // FormaPago
        BlobManagement.Write(GetCertificateSerialNo + '|'); // NoCertificado
        BlobManagement.Write(FormatDecimal(ROUND(SubTotal,1,'='),0) + '|'); // SubTotal
        BlobManagement.Write('XXX|'); // Moneda
        BlobManagement.Write(FormatDecimal(ROUND(SubTotal + RetainAmt,1,'='),0) + '|'); // Total
        BlobManagement.Write(FORMAT('I') + '|'); // TipoDeComprobante
        BlobManagement.Write("CFDI Export Code" + '|'); // Exportacion

        IF NOT Export THEN BEGIN
          GetCompanyInfo;
          GetCustomer("Bill-to/Pay-To No.");
        END;

        BlobManagement.Write('PUE|'); // MetodoPago
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."SAT Postal Code") + '|'); // LugarExpedicion

        // Company Information (Emisor)
        BlobManagement.Write(CompanyInfo."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|'); // Nombre
        BlobManagement.Write(CompanyInfo."SAT Tax Regime Classification" + '|'); // RegimenFiscal

        // Customer information (Receptor)
        BlobManagement.Write(Customer."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars("Bill-to/Pay-To Name") + '|'); // Nombre
        BlobManagement.Write(
          GetSATPostalCode(Customer."Location Code",Customer."Post Code") + '|'); // DomicilioFiscalReceptor
        IF SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' THEN BEGIN
          BlobManagement.Write(SATUtilities.GetSATCountryCode(Customer."Country/Region Code") + '|'); // ResidenciaFiscal
          BlobManagement.Write(RemoveInvalidChars(Customer."VAT Registration No.") + '|'); // NumRegIDTrib
        END;
        BlobManagement.Write(Customer."SAT Tax Regime Classification" + '|'); // RegimenFiscalReceptor
        BlobManagement.Write('P01|'); // UsoCFDI

        // Write the one line
        BlobManagement.Write('84111506|'); // ClaveProdServ
        // BlobManagement.Write(TempDocumentLine."No." + '|'); // NoIdentificacion
        BlobManagement.Write(FORMAT(1) + '|'); // Cantidad
        BlobManagement.Write('ACT|'); // ClaveUnidad
        BlobManagement.Write('Anticipo bien o servicio|'); // Descripcion
        BlobManagement.Write(FormatDecimal(ROUND(SubTotal,1,'='),0) + '|'); // ValorUnitario
        BlobManagement.Write(FormatDecimal(ROUND(SubTotal,1,'='),0) + '|'); // Importe
        BlobManagement.Write(FormatDecimal(0,0) + '|'); // Descuento

        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        IF TempDocumentLine.FINDSET THEN BEGIN
          TaxAmount := TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount;
          IF TaxAmount <> 0 THEN BEGIN
            BlobManagement.Write(FormatAmount(TempDocumentLine.Amount) + '|'); // Base
            TaxPercentage := GetTaxPercentage(TempDocumentLine.Amount,TaxAmount);
            // TaxCode := TaxCodeFromTaxRate(TempDocumentLine."VAT %" / 100,TaxType::Translado);
            TaxCode := TaxCodeFromTaxRate(TaxPercentage / 100,TaxType::Translado);

            BlobManagement.Write(TaxCode + '|'); // Impuesto
            IF (TempDocumentLine."VAT %" <> 0) OR (TaxAmount <> 0) THEN BEGIN// When Sales Tax code is % then Tasa, else Exento
              BlobManagement.Write('Tasa' + '|'); // TipoFactor
              // BlobManagement.Write(PADSTR(FormatAmount(TempDocumentLine."VAT %" / 100),8,'0') + '|'); // TasaOCuota
              BlobManagement.Write(PADSTR(FormatAmount(TaxPercentage / 100),8,'0') + '|'); // TasaOCuota
              BlobManagement.Write(
                FormatDecimal(TaxAmount,0) + '|') // Importe
            END ELSE
              BlobManagement.Write('Exento' + '|'); // TipoFactor
          END;
        END;

        TempDocumentLine.SETRANGE("Document No.","No.");
        TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
        IF TempDocumentLine.FINDSET THEN
          REPEAT
            TaxAmount := TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount;
            IF TaxAmount <> 0 THEN BEGIN
              // BlobManagement.Write(FormatAmount(TempDocumentLine.Amount) + '|'); // Base
              TaxPercentage := GetTaxPercentage(TempDocumentLine.Amount,TaxAmount);
              TaxCode := TaxCodeFromTaxRate(TaxPercentage / 100,TaxType::Translado);

              BlobManagement.Write(TaxCode + '|'); // Impuesto
              IF (TempDocumentLine."VAT %" <> 0) OR (TaxAmount <> 0) THEN BEGIN// When Sales Tax code is % then Tasa, else Exento
                BlobManagement.Write('Tasa' + '|'); // TipoFactor
                BlobManagement.Write(PADSTR(FormatAmount(TaxPercentage / 100),8,'0') + '|'); // TasaOCuota
                BlobManagement.Write(
                  FormatDecimal(TaxAmount,0) + '|') // Importe
              END ELSE
                BlobManagement.Write('Exento' + '|'); // TipoFactor
              TotalTaxes := TotalTaxes + TaxAmount;
            END;
          UNTIL TempDocumentLine.NEXT = 0;
        IF TotalTaxes <> 0 THEN
          BlobManagement.Write(FormatDecimal(TotalTaxes,0) + '|'); // TotalImpuestosTrasladados
        BlobManagement.WriteAllowOneCharacter('|');
        BlobManagement.Get(TempBlob);
      END;

      // FileManagement.BLOBExport(TempBlob,'OriginalString33.xml',TRUE);
    END;

    [External]
    PROCEDURE CreateOriginalStr33AdvanceReverse@1020014(VAR TempDocumentHeader@1020001 : TEMPORARY Record 10002;DateTimeReqSent@1020005 : Text;VAR TempBlob@1020002 : Record 99008535;UUID@1020006 : Text[50];AdvanceAmount@1020007 : Decimal);
    VAR
      BlobManagement@1020000 : Codeunit 10146;
      SATUtilities@1020008 : Codeunit 27030;
    BEGIN
      WITH TempDocumentHeader DO BEGIN
        BlobManagement.Init;
        BlobManagement.Write('||4.0|'); // Version
        BlobManagement.Write(RemoveInvalidChars("No.") + '|'); // Folio
        BlobManagement.Write(DateTimeReqSent + '|'); // Fecha
        BlobManagement.Write('30|'); // FormaPago
        BlobManagement.Write(GetCertificateSerialNo + '|'); // NoCertificado
        BlobManagement.Write(FormatDecimal(ROUND(AdvanceAmount,1,'='),0) + '|'); // SubTotal
        BlobManagement.Write('XXX|'); // Moneda

        BlobManagement.Write(FormatDecimal(ROUND(AdvanceAmount,1,'='),0) + '|'); // Total
        BlobManagement.Write(FORMAT('E') + '|'); // TipoDeComprobante
        BlobManagement.Write("CFDI Export Code" + '|'); // Exportacion

        IF NOT Export THEN
          GetCompanyInfo;

        BlobManagement.Write('PUE|'); // MetodoPago
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."SAT Postal Code") + '|'); // LugarExpedicion

        // Related documents
        BlobManagement.Write(GetAdvanceCFDIRelation("CFDI Relation") + '|'); // TipoRelacion
        BlobManagement.Write(UUID + '|'); // UUID

        // Company Information (Emisor)
        BlobManagement.Write(CompanyInfo."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|'); // Nombre
        BlobManagement.Write(CompanyInfo."SAT Tax Regime Classification" + '|'); // RegimenFiscal

        // Customer information (Receptor)
        BlobManagement.Write(Customer."RFC No." + '|'); // Rfc
        BlobManagement.Write(RemoveInvalidChars(Customer.Name) + '|'); // Nombre
        BlobManagement.Write(
          GetSATPostalCode(Customer."Location Code",Customer."Post Code") + '|'); // DomicilioFiscalReceptor
        IF SATUtilities.GetSATCountryCode(Customer."Country/Region Code") <> 'MEX' THEN BEGIN
          BlobManagement.Write(SATUtilities.GetSATCountryCode(Customer."Country/Region Code") + '|'); // ResidenciaFiscal
          BlobManagement.Write(RemoveInvalidChars(Customer."VAT Registration No.") + '|'); // NumRegIDTrib
        END;
        BlobManagement.Write(Customer."SAT Tax Regime Classification" + '|'); // RegimenFiscalReceptor
        BlobManagement.Write('P01|'); // UsoCFDI

        BlobManagement.Write('84111506|'); // ClaveProdServ
        BlobManagement.Write(FORMAT(1) + '|'); // Cantidad
        BlobManagement.Write('ACT|'); // ClaveUnidad
        BlobManagement.Write('Aplicacion de anticipo|'); // Descripcion
        BlobManagement.Write(FormatDecimal(ROUND(AdvanceAmount,1,'='),0) + '|'); // ValorUnitario
        BlobManagement.Write(FormatDecimal(ROUND(AdvanceAmount,1,'='),0) + '|'); // Importe
        BlobManagement.Write(FormatDecimal(0,0) + '||'); // Descuento

        BlobManagement.Get(TempBlob);
      END;

      // FileManagement.BLOBExport(TempBlob,'OriginalStringAdvanceReverse.xml',TRUE);
    END;

    LOCAL PROCEDURE CreateOriginalStr33Transfer@1310062(VAR TempDocumentHeader@1020001 : TEMPORARY Record 10002;VAR TempDocumentLine@1020003 : TEMPORARY Record 10003;DateTimeFirstReqSent@1020005 : Text;VAR TempBlob@1020002 : Record 99008535);
    VAR
      FixedAsset@1310001 : Record 5600;
      Employee@1310000 : Record 5200;
      Item@1310003 : Record 27;
      CFDITransportOperator@1310002 : Record 27007;
      BlobManagement@1020000 : Codeunit 10146;
      SATUtilities@1020008 : Codeunit 27030;
      DestinationRFCNo@1310005 : Text;
      HazardousMatExists@1310004 : Boolean;
      SATClassificationCode@1310006 : Code[10];
    BEGIN
      BlobManagement.Init;
      BlobManagement.Write('||4.0|'); // Version

      BlobManagement.Write(RemoveInvalidChars(TempDocumentHeader."No.") + '|'); // Folio
      BlobManagement.Write(DateTimeFirstReqSent + '|'); // Fecha
      BlobManagement.Write(GetCertificateSerialNo + '|'); // NoCertificado
      BlobManagement.Write('0|'); // SubTotal
      BlobManagement.Write('XXX|'); // Moneda
      BlobManagement.Write('0|'); // Total
      BlobManagement.Write('T|'); // Traslado
      BlobManagement.Write(TempDocumentHeader."CFDI Export Code" + '|'); // Exportacion
      BlobManagement.Write(RemoveInvalidChars(CompanyInfo."SAT Postal Code") + '|'); // LugarExpedicion

      // Company Information (Emisor)
      BlobManagement.Write(CompanyInfo."RFC No." + '|'); // Rfc
      BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|'); // Nombre
      BlobManagement.Write(CompanyInfo."SAT Tax Regime Classification" + '|'); // RegimenFiscal

      // Customer information (Receptor)
      BlobManagement.Write(GetTransferRFCNo + '|'); // Rfc
      BlobManagement.Write(RemoveInvalidChars(TempDocumentHeader."CFDI Purpose") + '|'); // UsoCFDI
      BlobManagement.Write(
        GetSATPostalCode(Customer."Location Code",Customer."Post Code") + '|'); // DomicilioFiscalReceptor
      BlobManagement.Write(Customer."SAT Tax Regime Classification" + '|'); // RegimenFiscalReceptor

      FilterDocumentLines(TempDocumentLine,TempDocumentHeader."No.");
      IF TempDocumentLine.FINDSET THEN
        REPEAT
          BlobManagement.Write(SATUtilities.GetSATItemClassification(TempDocumentLine.Type,TempDocumentLine."No.") + '|'); // ClaveProdServ
          BlobManagement.Write(TempDocumentLine."No." + '|'); // NoIdentificacion
          BlobManagement.Write(FORMAT(TempDocumentLine.Quantity,0,9) + '|'); // Cantidad
          BlobManagement.Write(SATUtilities.GetSATUnitofMeasure(TempDocumentLine."Unit of Measure Code") + '|'); // ClaveUnidad
          BlobManagement.Write(TempDocumentLine."Unit of Measure Code" + '|'); // Unidad
          BlobManagement.Write(EncodeString(TempDocumentLine.Description) + '|'); // Descripcion
          BlobManagement.Write('0|'); // ValorUnitario
          BlobManagement.Write('0|'); // Importe
          BlobManagement.Write(GetSubjectToTaxCode(TempDocumentLine) + '|'); // ObjetoImp
          IF TempDocumentHeader."Foreign Trade" THEN
            BlobManagement.Write(RemoveInvalidChars(FormatNumeroPedimento(TempDocumentLine)) + '|'); // NumeroPedimento
        UNTIL TempDocumentLine.NEXT = 0;

      // CartaPorte/Ubicaciones
      BlobManagement.Write('2.0|'); // Version
      IF TempDocumentHeader."Foreign Trade" THEN BEGIN
        BlobManagement.Write('S¡|'); // TranspInternac
        BlobManagement.Write('Salida|'); // EntradaSalidaMerc
        BlobManagement.Write('01|'); // ViaEntradaSalida
      END ELSE
        BlobManagement.Write('No|'); // TranspInternac

      BlobManagement.Write(FormatDecimal(TempDocumentHeader."Transit Distance",6) + '|'); // TotalDistRec

      AddStrCartaPorteUbicacion(
        'Origen',CompanyInfo."RFC No.",TempDocumentHeader."Transit-from Location",'OR',
        FormatDateTime(TempDocumentHeader."Transit-from Date/Time"),'',TempDocumentHeader."Foreign Trade",
        BlobManagement);
      DestinationRFCNo := Customer."RFC No.";
      IF DestinationRFCNo = '' THEN
        DestinationRFCNo := CompanyInfo."RFC No.";
      AddStrCartaPorteUbicacion(
        'Destino',DestinationRFCNo,TempDocumentHeader."Transit-to Location",'DE',
        FormatDateTime(TempDocumentHeader."Transit-from Date/Time" + TempDocumentHeader."Transit Hours" * 1000 * 60 * 60 ),
        FormatDecimal(TempDocumentHeader."Transit Distance",6),TempDocumentHeader."Foreign Trade",
        BlobManagement);

      // CartaPorte/Mercancias
      TempDocumentLine.SETRANGE("Document No.",TempDocumentHeader."No.");
      TempDocumentLine.CALCSUMS("Gross Weight");
      BlobManagement.Write(FormatDecimal(TempDocumentLine."Gross Weight",3) + '|'); // PesoBrutoTotal
      BlobManagement.Write(TempDocumentHeader."SAT Weight Unit Of Measure" + '|'); // UnidadPeso
      BlobManagement.Write(FormatDecimal(TempDocumentLine.COUNT,0) + '|'); // NumTotalMercancias
      IF TempDocumentLine.FINDSET THEN
        REPEAT
          IF TempDocumentLine.Type = TempDocumentLine.Type::Item THEN
            Item.GET(TempDocumentLine."No.")
          ELSE
            Item.INIT;
          SATClassificationCode := SATUtilities.GetSATItemClassification(TempDocumentLine.Type,TempDocumentLine."No.");
          BlobManagement.Write(SATClassificationCode + '|'); // BienesTransp
          BlobManagement.Write(EncodeString(TempDocumentLine.Description) + '|'); // Descripcion
          BlobManagement.Write(FORMAT(TempDocumentLine.Quantity,0,9) + '|'); // Cantidad
          BlobManagement.Write(SATUtilities.GetSATUnitofMeasure(TempDocumentLine."Unit of Measure Code") + '|'); // ClaveUnidad
          IF Item."SAT Hazardous Material" <> '' THEN BEGIN
            HazardousMatExists := TRUE;
            BlobManagement.Write('S¡|'); // MaterialPeligroso
            BlobManagement.Write(Item."SAT Hazardous Material" + '|'); // CveMaterialPeligroso
            BlobManagement.Write(Item."SAT Packaging Type" + '|'); // Embalaje
          END ELSE
            IF IsHazardousMaterialMandatory(SATClassificationCode) THEN
              BlobManagement.Write('No|');
          BlobManagement.Write(FormatDecimal(TempDocumentLine."Gross Weight",3) + '|'); // PesoEnKg
          BlobManagement.Write('0|'); // ValorMercancia
          BlobManagement.Write('MXN|'); // Moneda
          IF TempDocumentHeader."Foreign Trade" THEN BEGIN
            BlobManagement.Write('00000000-0000-0000-0000-000000000000' + '|'); // UUIDComercioExt
            BlobManagement.Write(DELCHR(Item."Tariff No.") + '|'); // FraccionArancelaria
          END;
        UNTIL TempDocumentLine.NEXT = 0;

      FixedAsset.GET(TempDocumentHeader."Vehicle Code");
      BlobManagement.Write(CompanyInfo."SCT Permission Type" + '|'); // PermSCT
      BlobManagement.Write(CompanyInfo."SCT Permission Number" + '|'); // NumPermisoSCT
      BlobManagement.Write(FixedAsset."SAT Federal Autotransport" + '|'); // ConfigVehicular
      BlobManagement.Write(FixedAsset."Vehicle Licence Plate" + '|'); // PlacaVM
      BlobManagement.Write(FORMAT(FixedAsset."Vehicle Year") + '|'); // AnioModeloVM

      // Seguros
      BlobManagement.Write(TempDocumentHeader."Insurer Name" + '|'); // AseguraRespCivil
      BlobManagement.Write(TempDocumentHeader."Insurer Policy Number" + '|'); // PolizaRespCivil
      IF HazardousMatExists THEN BEGIN
        BlobManagement.Write(TempDocumentHeader."Medical Insurer Name" + '|'); // AseguraMedAmbiente
        BlobManagement.Write(TempDocumentHeader."Medical Ins. Policy Number" + '|'); // PolizaMedAmbiente
      END;

      IF (TempDocumentHeader."Trailer 1" <> '') OR (TempDocumentHeader."Trailer 2" <> '') THEN BEGIN
        IF FixedAsset.GET(TempDocumentHeader."Trailer 1") THEN BEGIN
          BlobManagement.Write(FixedAsset."SAT Trailer Type" + '|'); // SubTipoRem
          BlobManagement.Write(FixedAsset."Vehicle Licence Plate" + '|'); // Placa
        END;
        IF FixedAsset.GET(TempDocumentHeader."Trailer 2") THEN BEGIN
          BlobManagement.Write(FixedAsset."SAT Trailer Type" + '|'); // SubTipoRem
          BlobManagement.Write(FixedAsset."Vehicle Licence Plate" + '|'); // Placa
        END;
      END;

      // CartaPorte/FiguraTransporte
      CFDITransportOperator.SETRANGE("Document Table ID",TempDocumentHeader."Document Table ID");
      CFDITransportOperator.SETRANGE("Document No.",TempDocumentHeader."No.");
      IF CFDITransportOperator.FINDSET THEN
        REPEAT
          Employee.GET(CFDITransportOperator."Operator Code");
          BlobManagement.Write('01|'); // TipoFigura
          BlobManagement.Write(Employee."RFC No." + '|'); // RFCFigura
          BlobManagement.Write(Employee."License No." + '|'); // NumLicencia
        UNTIL CFDITransportOperator.NEXT = 0;

      BlobManagement.WriteAllowOneCharacter('|');
      BlobManagement.Get(TempBlob);
    END;

    LOCAL PROCEDURE CreateOriginalStr33TaxAmountLines@1310047(VAR TempVATAmountLine@1310000 : TEMPORARY Record 290;VAR BlobManagement@1310006 : Codeunit 10146;TotalTax@1310003 : Decimal;TotalRetention@1310002 : Decimal);
    BEGIN
      TempVATAmountLine.RESET;
      IF TempVATAmountLine.ISEMPTY THEN
        EXIT;

      TempVATAmountLine.SETRANGE(Positive,FALSE);
      IF TempVATAmountLine.FINDSET THEN BEGIN
        REPEAT
          BlobManagement.Write(GetTaxCode(TempVATAmountLine."VAT %",TempVATAmountLine."VAT Amount") + '|'); // Impuesto
          BlobManagement.Write(FormatAmount(TempVATAmountLine."VAT Amount") + '|'); // Importe
        UNTIL TempVATAmountLine.NEXT = 0;
        BlobManagement.Write(FormatAmount(TotalRetention) + '|'); // TotalImpuestosRetenidos
      END;

      TempVATAmountLine.SETRANGE(Positive,TRUE);
      IF TempVATAmountLine.FINDSET THEN BEGIN
        REPEAT
          IF TempVATAmountLine."Tax Category" = GetTaxCategoryExempt THEN BEGIN
            BlobManagement.Write(FormatAmount(TempVATAmountLine."VAT Base") + '|'); // Base
            BlobManagement.Write(GetTaxCode(TempVATAmountLine."VAT %",TempVATAmountLine."VAT Amount") + '|'); // Impuesto
            BlobManagement.Write('Exento' + '|'); // TipoFactor
          END ELSE BEGIN
            BlobManagement.Write(FormatAmount(TempVATAmountLine."VAT Base") + '|'); // Base
            BlobManagement.Write(GetTaxCode(TempVATAmountLine."VAT %",TempVATAmountLine."VAT Amount") + '|'); // Impuesto
            BlobManagement.Write('Tasa' + '|'); // TipoFactor
            BlobManagement.Write(PADSTR(FormatAmount(TempVATAmountLine."VAT %" / 100),8,'0') + '|'); // TasaOCuota
            BlobManagement.Write(FormatAmount(TempVATAmountLine."VAT Amount") + '|'); // Importe
          END;
        UNTIL TempVATAmountLine.NEXT = 0;
        BlobManagement.Write(FormatAmount(TotalTax) + '|'); // TotalImpuestosTrasladados
      END;
    END;

    LOCAL PROCEDURE CreateDigitalSignature@1020021(OriginalString@1020000 : Text;VAR SignedString@1020002 : Text;VAR SerialNoOfCertificateUsed@1020005 : Text[250];VAR CertificateString@1020003 : Text);
    VAR
      IsolatedCertificate@1310001 : Record 1262;
      CertificateManagement@1310000 : Codeunit 1259;
      DotNet_ISignatureProvider@1310004 : Codeunit 10149;
      DotNet_SecureString@1310003 : Codeunit 3044;
    BEGIN
      GetGLSetup;
      IF NOT GLSetup."Sim. Signature" THEN BEGIN
        IsolatedCertificate.GET(GLSetup."SAT Certificate");
        CertificateManagement.GetPasswordAsSecureString(DotNet_SecureString,IsolatedCertificate);

        IF NOT SignDataWithCert(DotNet_ISignatureProvider,SignedString,
             OriginalString,CertificateManagement.GetCertAsBase64String(IsolatedCertificate),DotNet_SecureString)
        THEN
          ERROR(SATNotValidErr);

        CertificateString := DotNet_ISignatureProvider.LastUsedCertificate;
        SerialNoOfCertificateUsed := COPYSTR(DotNet_ISignatureProvider.LastUsedCertificateSerialNo,1,
            MAXSTRLEN(SerialNoOfCertificateUsed));
      END ELSE BEGIN
        SignedString := OriginalString;
        CertificateString := '';
        SerialNoOfCertificateUsed := '';
      END;
    END;

    LOCAL PROCEDURE SaveAsPDFOnServer@1020017(DocumentHeaderRef@1020000 : RecordRef;ReportNo@1020001 : Integer) : Text;
    VAR
      SalesInvoiceHeader@1020002 : Record 112;
      SalesCrMemoHeader@1020003 : Record 114;
      ServiceInvoiceHeader@1020004 : Record 5992;
      ServiceCrMemoHeader@1020005 : Record 5994;
      FileManagement@1020007 : Codeunit 419;
      DestinationFilePath@1020006 : Text;
    BEGIN
      DestinationFilePath := FileManagement.GetDirectoryName(FileManagement.ServerTempFileName(''));
      DestinationFilePath := DELCHR(DestinationFilePath,'>','\');
      DestinationFilePath += '\';
      CASE DocumentHeaderRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            DocumentHeaderRef.SETTABLE(SalesInvoiceHeader);
            SalesInvoiceHeader.SETRECFILTER;
            DestinationFilePath += SalesInvoiceHeader."No." + '.pdf';
            REPORT.SAVEASPDF(ReportNo,DestinationFilePath,SalesInvoiceHeader);
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            DocumentHeaderRef.SETTABLE(SalesCrMemoHeader);
            SalesCrMemoHeader.SETRECFILTER;
            DestinationFilePath += SalesCrMemoHeader."No." + '.pdf';
            REPORT.SAVEASPDF(ReportNo,DestinationFilePath,SalesCrMemoHeader);
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            DocumentHeaderRef.SETTABLE(ServiceInvoiceHeader);
            ServiceInvoiceHeader.SETRECFILTER;
            DestinationFilePath += ServiceInvoiceHeader."No." + '.pdf';
            REPORT.SAVEASPDF(ReportNo,DestinationFilePath,ServiceInvoiceHeader);
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            DocumentHeaderRef.SETTABLE(ServiceCrMemoHeader);
            ServiceCrMemoHeader.SETRECFILTER;
            DestinationFilePath += ServiceCrMemoHeader."No." + '.pdf';
            REPORT.SAVEASPDF(ReportNo,DestinationFilePath,ServiceCrMemoHeader);
          END;
      END;
      EXIT(DestinationFilePath);
    END;

    LOCAL PROCEDURE SendEmail@1020008(SendToAddress@1020001 : Text;Subject@1020007 : Text;MessageBody@1020008 : Text;FilePathEDoc@1020000 : Text;PDFFilePath@1020002 : Text;SendPDF@1020003 : Boolean;XMLInstream@1170000000 : InStream);
    VAR
      SMTPMail@1020005 : Codeunit 400;
      SendOK@1020004 : Boolean;
    BEGIN
      GetGLSetup;
      IF GLSetup."Sim. Send" THEN
        EXIT;

      SMTPMail.CreateMessage(CompanyInfo.Name,CompanyInfo."E-Mail",SendToAddress,Subject,MessageBody,TRUE);

      SMTPMail.AddAttachmentStream(XMLInstream,FilePathEDoc);
      IF SendPDF THEN
        SMTPMail.AddAttachment(PDFFilePath,'');

      SendOK := SMTPMail.TrySend;

      IF SendPDF THEN
        DeleteServerFile(PDFFilePath);

      IF NOT SendOK THEN
        ERROR(Text016,SMTPMail.GetLastSendMailErrorText);
    END;

    [External]
    PROCEDURE ImportElectronicInvoice@1020027(VAR PurchaseHeader@1020000 : Record 38);
    VAR
      TempTempBlob@1310000 : TEMPORARY Record 99008535;
      FileManagement@1020006 : Codeunit 419;
      XMLDOMManagement@1020008 : Codeunit 6224;
      XMLDoc@1020007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Node@1020003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      NodeList@1020005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      ServerFileName@1020001 : Text;
      ClientFileName@1020004 : Text;
    BEGIN
      IF NOT FileManagement.IsWebClient THEN BEGIN
        ClientFileName := FileManagement.OpenFileDialog(FileDialogTxt,'',FileManagement.GetToFilterText('','.xml'));
        IF ClientFileName = '' THEN
          EXIT;

        ServerFileName := FileManagement.UploadFileToServer(ClientFileName);
      END ELSE BEGIN
        ServerFileName := FileManagement.ServerTempFileName('xml');
        FileManagement.BLOBImportWithFilter(TempTempBlob,FileDialogTxt,'',FileFilterTxt,ExtensionFilterTxt);
        IF NOT TempTempBlob.Blob.HASVALUE THEN
          EXIT;
        FileManagement.BLOBExportToServerFile(TempTempBlob,ServerFileName);
      END;

      XMLDOMManagement.LoadXMLDocumentFromFile(ServerFileName,XMLDoc);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/4');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');

      // Import UUID
      NodeList := XMLDoc.DocumentElement.SelectNodes('//cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      IF NodeList.Count <> 0 THEN BEGIN
        Node := NodeList.Item(0);
        PurchaseHeader.VALIDATE("Fiscal Invoice Number PAC",Node.Attributes.GetNamedItem('UUID').Value);
        PurchaseHeader.MODIFY(TRUE);
      END ELSE
        ERROR(ImportFailedErr);
    END;

    LOCAL PROCEDURE WriteCompanyInfo33@1020002(VAR XMLDoc@1020001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLCurrNode@1020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLNewChild@1020004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      WITH CompanyInfo DO BEGIN
        // Emisor
        AddElementCFDI(XMLCurrNode,'Emisor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',"RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Nombre',Name);
        AddAttribute(XMLDoc,XMLCurrNode,'RegimenFiscal',"SAT Tax Regime Classification");
      END;
    END;

    LOCAL PROCEDURE InitXML@1020053(VAR XMLDoc@1020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLCurrNode@1020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLDOMManagement@1020001 : Codeunit 6224;
    BEGIN
      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      // Root element
      DocNameSpace := 'http://www.sat.gob.mx/cfd/4';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> ' +
        '<cfdi:Comprobante xmlns:cfdi="http://www.sat.gob.mx/cfd/4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
        'xsi:schemaLocation="http://www.sat.gob.mx/cfd/4 http://www.sat.gob.mx/sitio_internet/cfd/4/cfdv40.xsd"></cfdi:Comprobante>',
        XMLDoc);

      XMLCurrNode := XMLDoc.DocumentElement;
    END;

    LOCAL PROCEDURE InitXMLAdvancePayment@1020041(VAR XMLDoc@1020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLCurrNode@1020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLDOMManagement@1020001 : Codeunit 6224;
    BEGIN
      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      // Root element
      DocNameSpace := 'http://www.sat.gob.mx/cfd/4';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> ' +
        '<cfdi:Comprobante xmlns:cfdi="http://www.sat.gob.mx/cfd/4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
        'xsi:schemaLocation="http://www.sat.gob.mx/cfd/4 http://www.sat.gob.mx/sitio_internet/cfd/4/cfdv40.xsd ' +
        'http://www.sat.gob.mx/Pagos http://www.sat.gob.mx/sitio_internet/cfd/Pagos/Pagos10.xsd"></cfdi:Comprobante>',
        XMLDoc);

      XMLCurrNode := XMLDoc.DocumentElement;
    END;

    LOCAL PROCEDURE InitXMLCartaPorte@1310071(VAR XMLDoc@1020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLCurrNode@1020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLDOMManagement@1020001 : Codeunit 6224;
    BEGIN
      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      DocNameSpace := 'http://www.sat.gob.mx/cfd/4';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> ' +
        '<cfdi:Comprobante xmlns:cfdi="http://www.sat.gob.mx/cfd/4" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
        'xsi:schemaLocation="http://www.sat.gob.mx/cfd/4 http://www.sat.gob.mx/sitio_internet/cfd/4/cfdv40.xsd' +
        ' http://www.sat.gob.mx/CartaPorte20 http://www.sat.gob.mx/sitio_internet/cfd/CartaPorte/CartaPorte20.xsd" ' +
        'xmlns:cartaporte="http://www.sat.gob.mx/CartaPorte20"></cfdi:Comprobante>',
        XMLDoc);

      XMLCurrNode := XMLDoc.DocumentElement;
    END;

    LOCAL PROCEDURE AddElementCFDI@1000010(VAR XMLNode@1000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1000003 : Text;NodeText@1000002 : Text;NameSpace@1000001 : Text;VAR CreatedXMLNode@1000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      NewChildNode@1000005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NodeName := 'cfdi:' + NodeName;
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element',NodeName,NameSpace);
      IF ISNULL(NewChildNode) THEN
        EXIT(FALSE);

      IF NodeText <> '' THEN
        NewChildNode.Value := RemoveInvalidChars(NodeText);
      XMLNode.AppendChild(NewChildNode);
      CreatedXMLNode := NewChildNode;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddElement@1020039(VAR XMLNode@1000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1000003 : Text;NodeText@1000002 : Text;NameSpace@1000001 : Text;VAR CreatedXMLNode@1000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      NewChildNode@1000005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element',NodeName,NameSpace);
      IF ISNULL(NewChildNode) THEN
        EXIT(FALSE);

      IF NodeText <> '' THEN
        NewChildNode.Value := RemoveInvalidChars(NodeText);
      XMLNode.AppendChild(NewChildNode);
      CreatedXMLNode := NewChildNode;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddAttribute@1000009(VAR XMLDomDocParam@1000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLDomNode@1000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";AttribName@1000002 : Text;AttribValue@1000003 : Text) : Boolean;
    BEGIN
      AddAttributeSimple(
        XMLDomDocParam,XMLDomNode,AttribName,RemoveInvalidChars(AttribValue));
    END;

    LOCAL PROCEDURE AddAttributeSimple@1310053(VAR XMLDomDocParam@1000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLDomNode@1000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";AttribName@1000002 : Text;AttribValue@1000003 : Text) : Boolean;
    VAR
      XMLDomAttribute@1000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
    BEGIN
      XMLDomAttribute := XMLDomDocParam.CreateAttribute(AttribName);
      IF ISNULL(XMLDomAttribute) THEN
        EXIT(FALSE);

      IF AttribValue <> '' THEN BEGIN
        XMLDomAttribute.Value := AttribValue;
        XMLDomNode.Attributes.SetNamedItem(XMLDomAttribute);
      END;
      CLEAR(XMLDomAttribute);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE EncodeString@1310014(InputText@1310000 : Text) : Text;
    VAR
      TypeHelper@1310001 : Codeunit 10;
    BEGIN
      InputText := DELCHR(InputText,'<>');
      EXIT(TypeHelper.HtmlEncode(InputText));
    END;

    LOCAL PROCEDURE FormatAmount@1000017(InAmount@1000000 : Decimal) : Text;
    BEGIN
      EXIT(FORMAT(ABS(InAmount),0,'<Precision,' + FORMAT(CurrencyDecimalPlaces) + ':' +
          FORMAT(CurrencyDecimalPlaces) + '><Standard Format,1>'));
    END;

    LOCAL PROCEDURE FormatDecimal@1020074(InAmount@1000000 : Decimal;DecimalPlaces@1020000 : Integer) : Text;
    BEGIN
      EXIT(
        FormatDecimalRange(InAmount,DecimalPlaces,DecimalPlaces));
    END;

    LOCAL PROCEDURE FormatDecimalRange@1310036(InAmount@1000000 : Decimal;DecimalPlacesFrom@1020000 : Integer;DecimalPlacesTo@1310000 : Integer) : Text;
    BEGIN
      EXIT(
        FORMAT(ABS(InAmount),0,'<Precision,' + FORMAT(DecimalPlacesFrom) + ':' + FORMAT(DecimalPlacesTo) + '><Standard Format,1>'));
    END;

    LOCAL PROCEDURE FormatMonth@1310115(Month@1310000 : Text) : Text;
    BEGIN
      IF STRLEN(Month) = 2 THEN
        EXIT(Month);
      EXIT('0' + Month);
    END;

    LOCAL PROCEDURE FilterDocumentLines@1310035(VAR TempDocumentLine@1310000 : TEMPORARY Record 10003;DocumentNo@1310001 : Code[20]);
    BEGIN
      TempDocumentLine.RESET;
      TempDocumentLine.SETRANGE("Document No.",DocumentNo);
      TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
      TempDocumentLine.SETRANGE("Retention Attached to Line No.",0);
    END;

    LOCAL PROCEDURE RemoveInvalidChars@1020005(PassedStr@1020000 : Text) : Text;
    BEGIN
      PassedStr := DELCHR(PassedStr,'=','|');
      PassedStr := RemoveExtraWhiteSpaces(PassedStr);
      EXIT(PassedStr);
    END;

    LOCAL PROCEDURE GetReportNo@1020016(VAR ReportSelection@1020000 : Record 77) : Integer;
    BEGIN
      ReportSelection.SETFILTER("Report ID",'<>0');
      IF ReportSelection.FINDFIRST THEN
        EXIT(ReportSelection."Report ID");
      EXIT(0);
    END;

    LOCAL PROCEDURE ConvertDateTimeToTimeZone@1310037(InputDateTime@1310000 : DateTime;TimeZone@1310001 : Text) : DateTime;
    VAR
      TypeHelper@1310002 : Codeunit 10;
    BEGIN
      EXIT(TypeHelper.ConvertDateTimeFromUTCToTimeZone(InputDateTime,TimeZone));
    END;

    LOCAL PROCEDURE ConvertCurrentDateTimeToTimeZone@1310027(TimeZone@1310001 : Text) : DateTime;
    VAR
      TypeHelper@1310002 : Codeunit 10;
    BEGIN
      EXIT(TypeHelper.ConvertDateTimeFromUTCToTimeZone(CURRENTDATETIME,TimeZone));
    END;

    LOCAL PROCEDURE ConvertCurrency@1310124(CurrencyCode@1310000 : Code[10]) : Code[10];
    BEGIN
      IF CurrencyCode IN ['','XXX','MXN'] THEN
        EXIT(GLSetup."LCY Code");
      EXIT(CurrencyCode);
    END;

    LOCAL PROCEDURE FormatDateTime@1020040(DateTime@1020000 : DateTime) : Text[50];
    BEGIN
      EXIT(FORMAT(DateTime,0,'<Year4>-<Month,2>-<Day,2>T<Hours24,2>:<Minutes,2>:<Seconds,2>'));
    END;

    LOCAL PROCEDURE FormatAsDateTime@1020007(DocDate@1020000 : Date;DocTime@1020001 : Time;TimeZone@1310000 : Text) : Text[50];
    BEGIN
      EXIT(
        FormatDateTime(
          ConvertDateTimeToTimeZone(CREATEDATETIME(DocDate,DocTime),TimeZone)));
    END;

    LOCAL PROCEDURE GetGLSetup@1020009();
    BEGIN
      GetGLSetupOnce;
      GLSetup.TESTFIELD("SAT Certificate");
    END;

    LOCAL PROCEDURE GetGLSetupOnce@1310012();
    BEGIN
      IF GLSetupRead THEN
        EXIT;

      GLSetup.GET;
      GLSetupRead := TRUE;
    END;

    LOCAL PROCEDURE GetCompanyInfo@1020015();
    BEGIN
      CompanyInfo.GET;
    END;

    LOCAL PROCEDURE GetCheckCompanyInfo@1310046();
    BEGIN
      GetCompanyInfo;
      CompanyInfo.TESTFIELD(Name);
      CompanyInfo.TESTFIELD("RFC No.");
      CompanyInfo.TESTFIELD(Address);
      CompanyInfo.TESTFIELD(City);
      CompanyInfo.TESTFIELD("Country/Region Code");
      CompanyInfo.TESTFIELD("Post Code");
      CompanyInfo.TESTFIELD("E-Mail");
      CompanyInfo.TESTFIELD("Tax Scheme");
    END;

    LOCAL PROCEDURE GetCustomer@1020020(CustomerNo@1020000 : Code[20]);
    BEGIN
      IF NOT Customer.GET(CustomerNo) THEN
        EXIT;
      Customer.TESTFIELD("RFC No.");
      Customer.TESTFIELD("Country/Region Code");
    END;

    LOCAL PROCEDURE GetAdvanceCFDIRelation@1310010(CFDIRelation@1310000 : Code[10]) : Code[10];
    BEGIN
      IF CFDIRelation = '' THEN
        EXIT('07'); // Hardcoded for Advance Settle
      // 01 = Credit memo, 06 = Invoice
      EXIT(CFDIRelation);
    END;

    LOCAL PROCEDURE IsNonTaxableVATLine@1310028(DocumentLine@1310000 : Record 10003) : Boolean;
    VAR
      VATPostingSetup@1310001 : Record 325;
    BEGIN
      IF NOT VATPostingSetup.GET(DocumentLine."VAT Bus. Posting Group",DocumentLine."VAT Prod. Posting Group") THEN
        EXIT(FALSE);

      EXIT(VATPostingSetup."CFDI Non-Taxable");
    END;

    LOCAL PROCEDURE IsVATExemptLine@1310026(DocumentLine@1310000 : Record 10003) : Boolean;
    VAR
      VATPostingSetup@1310001 : Record 325;
    BEGIN
      IF NOT VATPostingSetup.GET(DocumentLine."VAT Bus. Posting Group",DocumentLine."VAT Prod. Posting Group") THEN
        EXIT(FALSE);

      EXIT(VATPostingSetup."CFDI VAT Exemption");
    END;

    LOCAL PROCEDURE CalcDocumentTotal@1310049(VAR DocumentLine@1310000 : Record 10003;VAR SubTotal@1020002 : Decimal;VAR RetainAmt@1020001 : Decimal);
    BEGIN
      IF DocumentLine.FINDSET THEN
        REPEAT
          IF DocumentLine."Retention Attached to Line No." = 0 THEN BEGIN
            SubTotal += DocumentLine.Quantity * DocumentLine."Unit Price/Direct Unit Cost";
            RetainAmt += DocumentLine."Amount Including VAT" - DocumentLine.Amount;
          END ELSE
            RetainAmt += DocumentLine."Amount Including VAT";
        UNTIL DocumentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE PrepareDocumentData@1310043(VAR TempDocumentLine@1310000 : TEMPORARY Record 10003;VAR TempVATAmountLine@1310005 : TEMPORARY Record 290;VAR TempDocumentLineRetention@1310006 : TEMPORARY Record 10003;DocumentNo@1310001 : Code[20];VAR SubTotal@1310007 : Decimal;VAR TotalTax@1310002 : Decimal;VAR TotalRetention@1310003 : Decimal;VAR TotalDiscount@1310004 : Decimal);
    BEGIN
      TempDocumentLine.RESET;
      TempDocumentLine.SETRANGE("Document No.",DocumentNo);
      TempDocumentLine.SETFILTER(Type,'<>%1',TempDocumentLine.Type::" ");
      IF TempDocumentLine.FINDSET THEN
        REPEAT
          InsertTempVATAmountLine(TempVATAmountLine,TempDocumentLine);
          IF TempDocumentLine."Retention Attached to Line No." <> 0 THEN BEGIN
            TempDocumentLineRetention := TempDocumentLine;
            TempDocumentLineRetention.INSERT;
          END;
          IF TempDocumentLine."Retention Attached to Line No." = 0 THEN BEGIN
            SubTotal += TempDocumentLine.Quantity * TempDocumentLine."Unit Price/Direct Unit Cost";
            TotalTax += TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount;
          END ELSE
            TotalRetention += TempDocumentLine."Amount Including VAT";
          TotalDiscount := TotalDiscount + TempDocumentLine."Line Discount Amount";
        UNTIL TempDocumentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE RemoveExtraWhiteSpaces@1020018(StrParam@1020000 : Text) StrReturn : Text;
    VAR
      Cntr1@1020001 : Integer;
      Cntr2@1020002 : Integer;
      WhiteSpaceFound@1020003 : Boolean;
    BEGIN
      StrParam := DELCHR(StrParam,'<>',' ');
      WhiteSpaceFound := FALSE;
      Cntr2 := 1;
      FOR Cntr1 := 1 TO STRLEN(StrParam) DO
        IF StrParam[Cntr1] <> ' ' THEN BEGIN
          WhiteSpaceFound := FALSE;
          StrReturn[Cntr2] := StrParam[Cntr1];
          Cntr2 += 1;
        END ELSE
          IF NOT WhiteSpaceFound THEN BEGIN
            WhiteSpaceFound := TRUE;
            StrReturn[Cntr2] := StrParam[Cntr1];
            Cntr2 += 1;
          END;
    END;

    LOCAL PROCEDURE InvokeMethod@1020036(VAR XMLDoc@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";MethodType@1020004 : 'Request Stamp,Cancel') : Text;
    VAR
      PACWebService@1020002 : Record 10000;
      PACWebServiceDetail@1020000 : Record 10001;
      IsolatedCertificate@1310001 : Record 1262;
      CertificateManagement@1310000 : Codeunit 1259;
      EInvoiceObjectFactory@1020005 : Codeunit 10147;
      DotNet_SecureString@1310003 : Codeunit 3044;
      IWebServiceInvoker@1020003 : DotNet "'Microsoft.Dynamics.Nav.MX, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.MX.WebServiceInvokers.IWebServiceInvoker";
      SecureStringPassword@1310002 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Security.SecureString";
    BEGIN
      GetGLSetup;
      IF GLSetup."Sim. Request Stamp" THEN
        EXIT;
      IF NOT IsPACEnvironmentEnabled THEN
        ERROR(Text014,GLSetup.FIELDCAPTION("PAC Environment"),GLSetup.TABLECAPTION,GLSetup."PAC Environment");

      EInvoiceObjectFactory.GetWebServiceInvoker(IWebServiceInvoker);

      // Depending on the chosen service provider, this section needs to be modified.
      // The parameters for the invoked method need to be added in the correct order.
      CASE MethodType OF
        MethodType::"Request Stamp":
          BEGIN
            IF NOT PACWebServiceDetail.GET(GLSetup."PAC Code",GLSetup."PAC Environment",PACWebServiceDetail.Type::"Request Stamp") THEN BEGIN
              PACWebServiceDetail.Type := PACWebServiceDetail.Type::"Request Stamp";
              ERROR(Text009,PACWebServiceDetail.Type,GLSetup.FIELDCAPTION("PAC Code"),
                GLSetup.FIELDCAPTION("PAC Environment"),GLSetup.TABLECAPTION);
            END;
            IWebServiceInvoker.AddParameter(XMLDoc.InnerXml);
            IWebServiceInvoker.AddParameter(FALSE);
          END;
        MethodType::Cancel:
          BEGIN
            IF NOT PACWebServiceDetail.GET(GLSetup."PAC Code",GLSetup."PAC Environment",PACWebServiceDetail.Type::Cancel) THEN
              BEGIN
              PACWebServiceDetail.Type := PACWebServiceDetail.Type::Cancel;
              ERROR(Text009,PACWebServiceDetail.Type,GLSetup.FIELDCAPTION("PAC Code"),
                GLSetup.FIELDCAPTION("PAC Environment"),GLSetup.TABLECAPTION);
            END;
            IWebServiceInvoker.AddParameter(XMLDoc.InnerXml);
          END;
      END;

      PACWebService.GET(GLSetup."PAC Code");
      IF PACWebService.Certificate = '' THEN
        ERROR(Text012,PACWebService.FIELDCAPTION(Certificate),PACWebService.TABLECAPTION,GLSetup.TABLECAPTION);

      IsolatedCertificate.GET(PACWebService.Certificate);

      CertificateManagement.GetPasswordAsSecureString(DotNet_SecureString,IsolatedCertificate);
      DotNet_SecureString.GetSecureString(SecureStringPassword);

      EXIT(IWebServiceInvoker.InvokeMethodWithCertificate(PACWebServiceDetail.Address,
          PACWebServiceDetail."Method Name",CertificateManagement.GetCertAsBase64String(IsolatedCertificate),SecureStringPassword));
    END;

    LOCAL PROCEDURE CreateQRCodeInput@1020046(IssuerRFC@1020000 : Text;CustomerRFC@1020001 : Text;Amount@1020002 : Decimal;UUID@1020003 : Text) QRCodeInput : Text[95];
    BEGIN
      QRCodeInput :=
        '?re=' +
        COPYSTR(IssuerRFC,1,13) +
        '&rr=' +
        COPYSTR(CustomerRFC,1,13) +
        '&tt=' +
        CONVERTSTR(FORMAT(Amount,0,'<Integer,10><Filler Character,0><Decimals,7>'),',','.') +
        '&id=' +
        COPYSTR(FORMAT(UUID),1,36);
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqSalesInv@1020049(VAR SalesInvoiceHeader@1020000 : Record 112) : Text[50];
    BEGIN
      IF SalesInvoiceHeader."Date/Time First Req. Sent" <> '' THEN
        EXIT(SalesInvoiceHeader."Date/Time First Req. Sent");

      SalesInvoiceHeader."Date/Time First Req. Sent" :=
        FormatAsDateTime(SalesInvoiceHeader."Document Date",TIME,GetTimeZoneFromDocument(SalesInvoiceHeader));
      EXIT(SalesInvoiceHeader."Date/Time First Req. Sent");
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqSalesCr@1020050(VAR SalesCrMemoHeader@1020000 : Record 114) : Text[50];
    BEGIN
      IF SalesCrMemoHeader."Date/Time First Req. Sent" <> '' THEN
        EXIT(SalesCrMemoHeader."Date/Time First Req. Sent");

      SalesCrMemoHeader."Date/Time First Req. Sent" :=
        FormatAsDateTime(SalesCrMemoHeader."Document Date",TIME,GetTimeZoneFromDocument(SalesCrMemoHeader));
      EXIT(SalesCrMemoHeader."Date/Time First Req. Sent");
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqServInv@1020051(VAR ServiceInvoiceHeader@1020000 : Record 5992) : Text[50];
    BEGIN
      IF ServiceInvoiceHeader."Date/Time First Req. Sent" <> '' THEN
        EXIT(ServiceInvoiceHeader."Date/Time First Req. Sent");

      ServiceInvoiceHeader."Date/Time First Req. Sent" :=
        FormatAsDateTime(ServiceInvoiceHeader."Document Date",TIME,GetTimeZoneFromDocument(ServiceInvoiceHeader));
      EXIT(ServiceInvoiceHeader."Date/Time First Req. Sent");
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqServCr@1020052(VAR ServiceCrMemoHeader@1020000 : Record 5994) : Text[50];
    BEGIN
      IF ServiceCrMemoHeader."Date/Time First Req. Sent" <> '' THEN
        EXIT(ServiceCrMemoHeader."Date/Time First Req. Sent");

      ServiceCrMemoHeader."Date/Time First Req. Sent" :=
        FormatAsDateTime(ServiceCrMemoHeader."Document Date",TIME,GetTimeZoneFromDocument(ServiceCrMemoHeader));
      EXIT(ServiceCrMemoHeader."Date/Time First Req. Sent");
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqPayment@1020068(VAR CustLedgerEntry@1020000 : Record 21) : Text[50];
    BEGIN
      IF CustLedgerEntry."Date/Time First Req. Sent" <> '' THEN
        EXIT(CustLedgerEntry."Date/Time First Req. Sent");

      CustLedgerEntry."Date/Time First Req. Sent" :=
        FormatAsDateTime(CustLedgerEntry."Document Date",TIME,GetTimeZoneFromCustomer(CustLedgerEntry."Customer No."));
      EXIT(CustLedgerEntry."Date/Time First Req. Sent");
    END;

    LOCAL PROCEDURE GetTimeZoneFromDocument@1310019(DocumentHeaderVariant@1310000 : Variant) : Text;
    VAR
      DocumentHeader@1310002 : Record 10002;
      PostCode@1310001 : Record 225;
      TransferShipmentHeader@1310005 : Record 5744;
      DataTypeManagement@1310006 : Codeunit 701;
      RecRef@1310004 : RecordRef;
      TimeZone@1310003 : Text;
    BEGIN
      DataTypeManagement.GetRecordRef(DocumentHeaderVariant,RecRef);
      IF RecRef.NUMBER = DATABASE::"Transfer Shipment Header" THEN BEGIN
        RecRef.SETTABLE(TransferShipmentHeader);
        IF PostCode.GET(TransferShipmentHeader."Transfer-from Post Code",TransferShipmentHeader."Transfer-from City")THEN
          EXIT(PostCode."Time Zone");
        PostCode.GET(CompanyInfo."Post Code",CompanyInfo.City);
        EXIT(PostCode."Time Zone");
      END;

      DocumentHeader.TRANSFERFIELDS(DocumentHeaderVariant);
      IF PostCode.GET(DocumentHeader."Ship-to/Buy-from Post Code",DocumentHeader."Ship-to/Buy-from City") THEN
        EXIT(PostCode."Time Zone");

      IF PostCode.GET(DocumentHeader."Sell-to/Buy-from Post Code",DocumentHeader."Sell-to/Buy-From City") THEN
        EXIT(PostCode."Time Zone");
      TimeZone := GetTimeZoneFromCustomer(DocumentHeader."Sell-to/Buy-from No.");
      IF TimeZone <> '' THEN
        EXIT(TimeZone);

      IF PostCode.GET(DocumentHeader."Bill-to/Pay-To Post Code",DocumentHeader."Bill-to/Pay-To City") THEN
        EXIT(PostCode."Time Zone");
      EXIT(GetTimeZoneFromCustomer(DocumentHeader."Bill-to/Pay-To No."));
    END;

    LOCAL PROCEDURE GetTimeZoneFromCustomer@1310020(CustomerNo@1310000 : Code[20]) : Text;
    VAR
      PostCode@1310001 : Record 225;
    BEGIN
      Customer.GET(CustomerNo);
      IF PostCode.GET(Customer."Post Code",Customer.City) THEN
        EXIT(PostCode."Time Zone");
      EXIT('');
    END;

    LOCAL PROCEDURE DeleteServerFile@1020047(ServerFileName@1020000 : Text);
    BEGIN
      IF ERASE(ServerFileName) THEN;
    END;

    LOCAL PROCEDURE CreateQRCode@1020089(QRCodeInput@1020047 : Text[95];VAR TempBLOB@1020048 : Record 99008535);
    VAR
      EInvoiceObjectFactory@1310001 : Codeunit 10147;
    BEGIN
      CLEAR(TempBLOB);
      EInvoiceObjectFactory.GetBarCodeBlob(QRCodeInput,TempBLOB);
    END;

    LOCAL PROCEDURE TextToBlob@1020048(VAR TempBlob@1020000 : Record 99008535;Content@1020001 : Text);
    VAR
      OutStream@1020002 : OutStream;
      BigString@1020003 : BigText;
    BEGIN
      CLEAR(TempBlob);
      BigString.ADDTEXT(Content);
      TempBlob.Blob.CREATEOUTSTREAM(OutStream);
      BigString.WRITE(OutStream);
    END;

    LOCAL PROCEDURE TextToBlobUTF8@1310081(VAR TempBlob@1020000 : Record 99008535;Content@1020001 : Text);
    VAR
      OutStream@1020002 : OutStream;
      BigString@1020003 : BigText;
    BEGIN
      CLEAR(TempBlob);
      BigString.ADDTEXT(Content);
      TempBlob.Blob.CREATEOUTSTREAM(OutStream,TEXTENCODING::UTF8);
      BigString.WRITE(OutStream);
    END;

    [External]
    PROCEDURE CreateAbstractDocument@1020090(DocumentHeaderVariant@1020000 : Variant;VAR TempDocumentHeader@1020001 : TEMPORARY Record 10002;VAR TempDocumentLine@1020002 : TEMPORARY Record 10003;AdvanceSettle@1020007 : Boolean);
    VAR
      SalesInvoiceHeader@1020005 : Record 112;
      SalesInvoiceLine@1020006 : Record 113;
      SalesCrMemoHeader@1310002 : Record 114;
      SalesCrMemoLine@1310003 : Record 115;
      ServiceInvoiceHeader@1310001 : Record 5992;
      ServiceInvoiceLine@1310004 : Record 5993;
      ServiceCrMemoHeader@1310000 : Record 5994;
      ServiceCrMemoLine@1310005 : Record 5995;
      DataTypeManagement@1020003 : Codeunit 701;
      RecRef@1020004 : RecordRef;
      LineVatPercent@1020009 : Decimal;
    BEGIN
      DataTypeManagement.GetRecordRef(DocumentHeaderVariant,RecRef);
      CASE RecRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            RecRef.SETTABLE(SalesInvoiceHeader);
            TempDocumentHeader.TRANSFERFIELDS(SalesInvoiceHeader);
            TempDocumentHeader."Document Table ID" := RecRef.NUMBER;
            UpdateAbstractDocument(TempDocumentHeader);
            SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
            TempDocumentHeader."Amount Including VAT" := SalesInvoiceHeader."Amount Including VAT";
            TempDocumentHeader.INSERT;

            SalesInvoiceLine.RESET;
            SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
            SalesInvoiceLine.SETFILTER(Type,'<>%1',SalesInvoiceLine.Type::" ");
            IF AdvanceSettle THEN
              SalesInvoiceLine.SETFILTER("Prepayment Line",'=0');

            IF SalesInvoiceLine.FINDSET THEN
              REPEAT
                TempDocumentLine.TRANSFERFIELDS(SalesInvoiceLine);
                IF SalesInvoiceHeader."Prices Including VAT" THEN
                  CalcDocumentLineForPricesInclVAT(TempDocumentLine,SalesInvoiceHeader."Currency Code");
                TempDocumentLine."Line Discount Amount" :=
                  TempDocumentLine."Line Discount Amount" + SalesInvoiceLine."Inv. Discount Amount";
                TempDocumentLine.INSERT;
                IF TempDocumentHeader."Location Code" = '' THEN
                  TempDocumentHeader."Location Code" := TempDocumentLine."Location Code";
              UNTIL SalesInvoiceLine.NEXT = 0;
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            RecRef.SETTABLE(SalesCrMemoHeader);
            TempDocumentHeader.TRANSFERFIELDS(SalesCrMemoHeader);
            TempDocumentHeader."Document Table ID" := RecRef.NUMBER;
            UpdateAbstractDocument(TempDocumentHeader);
            SalesCrMemoHeader.CALCFIELDS("Amount Including VAT");
            TempDocumentHeader."Amount Including VAT" := SalesCrMemoHeader."Amount Including VAT";
            TempDocumentHeader.INSERT;

            SalesCrMemoLine.RESET;
            SalesCrMemoLine.SETRANGE("Document No.",SalesCrMemoHeader."No.");
            SalesCrMemoLine.SETFILTER(Type,'<>%1',SalesCrMemoLine.Type::" ");
            IF SalesCrMemoLine.FINDSET THEN
              REPEAT
                TempDocumentLine.TRANSFERFIELDS(SalesCrMemoLine);
                IF SalesCrMemoHeader."Prices Including VAT" THEN
                  CalcDocumentLineForPricesInclVAT(TempDocumentLine,SalesCrMemoHeader."Currency Code");
                TempDocumentLine."Line Discount Amount" :=
                  TempDocumentLine."Line Discount Amount" + SalesCrMemoLine."Inv. Discount Amount";
                TempDocumentLine.INSERT;
                IF TempDocumentHeader."Location Code" = '' THEN
                  TempDocumentHeader."Location Code" := TempDocumentLine."Location Code";
              UNTIL SalesCrMemoLine.NEXT = 0;
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            RecRef.SETTABLE(ServiceInvoiceHeader);
            TempDocumentHeader.TRANSFERFIELDS(ServiceInvoiceHeader);
            TempDocumentHeader."Document Table ID" := RecRef.NUMBER;
            UpdateAbstractDocument(TempDocumentHeader);
            ServiceInvoiceHeader.CALCFIELDS("Amount Including VAT");
            TempDocumentHeader."Amount Including VAT" := ServiceInvoiceHeader."Amount Including VAT";
            TempDocumentHeader.INSERT;

            ServiceInvoiceLine.RESET;
            ServiceInvoiceLine.SETRANGE("Document No.",ServiceInvoiceHeader."No.");
            ServiceInvoiceLine.SETFILTER(Type,'<>%1',ServiceInvoiceLine.Type::" ");
            IF ServiceInvoiceLine.FINDSET THEN
              REPEAT
                TempDocumentLine.TRANSFERFIELDS(ServiceInvoiceLine);
                TempDocumentLine.Type := MapServiceTypeToTempDocType(ServiceInvoiceLine.Type);
                LineVatPercent :=
                  ((ServiceInvoiceLine."Amount Including VAT" - ServiceInvoiceLine.Amount) / ServiceInvoiceLine.Amount);
                TempDocumentLine."VAT %" := (LineVatPercent * 100);
                IF ServiceInvoiceHeader."Prices Including VAT" THEN
                  CalcDocumentLineForPricesInclVAT(TempDocumentLine,ServiceInvoiceHeader."Currency Code");
                TempDocumentLine."Line Discount Amount" :=
                  TempDocumentLine."Line Discount Amount" + ServiceInvoiceLine."Inv. Discount Amount";
                TempDocumentLine.INSERT;
                IF TempDocumentHeader."Location Code" = '' THEN
                  TempDocumentHeader."Location Code" := TempDocumentLine."Location Code";
              UNTIL ServiceInvoiceLine.NEXT = 0;
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            RecRef.SETTABLE(ServiceCrMemoHeader);
            TempDocumentHeader.TRANSFERFIELDS(ServiceCrMemoHeader);
            TempDocumentHeader."Document Table ID" := RecRef.NUMBER;
            UpdateAbstractDocument(TempDocumentHeader);
            ServiceCrMemoHeader.CALCFIELDS("Amount Including VAT");
            TempDocumentHeader."Amount Including VAT" := ServiceCrMemoHeader."Amount Including VAT";
            TempDocumentHeader.INSERT;

            ServiceCrMemoLine.RESET;
            ServiceCrMemoLine.SETRANGE("Document No.",ServiceCrMemoHeader."No.");
            ServiceCrMemoLine.SETFILTER(Type,'<>%1',ServiceCrMemoLine.Type::" ");
            IF ServiceCrMemoLine.FINDSET THEN
              REPEAT
                TempDocumentLine.TRANSFERFIELDS(ServiceCrMemoLine);
                TempDocumentLine.Type := MapServiceTypeToTempDocType(ServiceCrMemoLine.Type);
                LineVatPercent :=
                  ((ServiceCrMemoLine."Amount Including VAT" - ServiceCrMemoLine.Amount) / ServiceCrMemoLine.Amount);
                TempDocumentLine."VAT %" := (LineVatPercent * 100);
                IF ServiceCrMemoHeader."Prices Including VAT" THEN
                  CalcDocumentLineForPricesInclVAT(TempDocumentLine,ServiceCrMemoHeader."Currency Code");
                TempDocumentLine."Line Discount Amount" :=
                  TempDocumentLine."Line Discount Amount" + ServiceCrMemoLine."Inv. Discount Amount";
                TempDocumentLine.INSERT;
                IF TempDocumentHeader."Location Code" = '' THEN
                  TempDocumentHeader."Location Code" := TempDocumentLine."Location Code";
              UNTIL ServiceCrMemoLine.NEXT = 0;
          END;
      END;
      TempDocumentHeader.MODIFY;
    END;

    PROCEDURE CreateTempDocumentTransfer@1310143(DocumentHeaderVariant@1020000 : Variant;VAR TempDocumentHeader@1020001 : TEMPORARY Record 10002;VAR TempDocumentLine@1020002 : TEMPORARY Record 10003);
    VAR
      SalesShipmentHeader@1020005 : Record 110;
      SalesShipmentLine@1020006 : Record 111;
      TransferShipmentHeader@1310002 : Record 5744;
      TransferShipmentLine@1310003 : Record 5745;
      DataTypeManagement@1020003 : Codeunit 701;
      RecRef@1020004 : RecordRef;
    BEGIN
      DataTypeManagement.GetRecordRef(DocumentHeaderVariant,RecRef);
      CASE RecRef.NUMBER OF
        DATABASE::"Sales Shipment Header":
          BEGIN
            RecRef.SETTABLE(SalesShipmentHeader);
            TempDocumentHeader.TRANSFERFIELDS(SalesShipmentHeader);
            TempDocumentHeader."Document Table ID" := RecRef.NUMBER;
            TempDocumentHeader."CFDI Purpose" := 'P01';
            TempDocumentHeader."Transit-from Location" := SalesShipmentHeader."Location Code";
            UpdateAbstractDocument(TempDocumentHeader);
            TempDocumentHeader.INSERT;
            SalesShipmentLine.SETRANGE("Document No.",SalesShipmentHeader."No.");
            SalesShipmentLine.SETFILTER(Type,'<>%1',SalesShipmentLine.Type::" ");
            IF SalesShipmentLine.FINDSET THEN
              REPEAT
                TempDocumentLine.TRANSFERFIELDS(SalesShipmentLine);
                TempDocumentLine.INSERT;
                IF TempDocumentHeader."Location Code" = '' THEN
                  TempDocumentHeader."Location Code" := TempDocumentLine."Location Code";
              UNTIL SalesShipmentLine.NEXT = 0;
          END;
        DATABASE::"Transfer Shipment Header":
          BEGIN
            RecRef.SETTABLE(TransferShipmentHeader);
            TempDocumentHeader.INIT;
            TempDocumentHeader."No." := TransferShipmentHeader."No.";
            TempDocumentHeader."Posting Date" := TransferShipmentHeader."Posting Date";
            TempDocumentHeader."Document Date" := TransferShipmentHeader."Transfer Order Date";
            TempDocumentHeader."Ship-to/Buy-from Post Code" := TransferShipmentHeader."Transfer-from Post Code";
            TempDocumentHeader."Ship-to/Buy-from City" := TransferShipmentHeader."Transfer-from City";
            TempDocumentHeader."Transit-from Date/Time" := TransferShipmentHeader."Transit-from Date/Time";
            TempDocumentHeader."Transit Hours" := TransferShipmentHeader."Transit Hours";
            TempDocumentHeader."Transit Distance" := TransferShipmentHeader."Transit Distance";
            TempDocumentHeader."Insurer Name" := TransferShipmentHeader."Insurer Name";
            TempDocumentHeader."Insurer Policy Number" := TransferShipmentHeader."Insurer Policy Number";
            TempDocumentHeader."Foreign Trade" := TransferShipmentHeader."Foreign Trade";
            TempDocumentHeader."Vehicle Code" := TransferShipmentHeader."Vehicle Code";
            TempDocumentHeader."Trailer 1" := TransferShipmentHeader."Trailer 1";
            TempDocumentHeader."Trailer 2" := TransferShipmentHeader."Trailer 2";
            TempDocumentHeader."CFDI Purpose" := 'P01';
            TempDocumentHeader."CFDI Export Code" := TransferShipmentHeader."CFDI Export Code";
            TempDocumentHeader."Transit-from Location" := TransferShipmentHeader."Transfer-from Code";
            TempDocumentHeader."Transit-to Location" := TransferShipmentHeader."Transfer-to Code";
            TempDocumentHeader."Location Code" := TempDocumentHeader."Transit-to Location";
            TempDocumentHeader."Medical Insurer Name" := TransferShipmentHeader."Medical Insurer Name";
            TempDocumentHeader."Medical Ins. Policy Number" := TransferShipmentHeader."Medical Ins. Policy Number";
            TempDocumentHeader."SAT Weight Unit Of Measure" := TransferShipmentHeader."SAT Weight Unit Of Measure";
            TempDocumentHeader."Document Table ID" := RecRef.NUMBER;
            UpdateAbstractDocument(TempDocumentHeader);
            TempDocumentHeader.INSERT;
            TransferShipmentLine.SETRANGE("Document No.",TransferShipmentHeader."No.");
            IF TransferShipmentLine.FINDSET THEN
              REPEAT
                TempDocumentLine.INIT;
                TempDocumentLine."Document No." := TransferShipmentLine."Document No.";
                TempDocumentLine."Line No." := TransferShipmentLine."Line No.";
                TempDocumentLine.Type := TempDocumentLine.Type::Item;
                TempDocumentLine."No." := TransferShipmentLine."Item No.";
                TempDocumentLine.Description := TransferShipmentLine.Description;
                TempDocumentLine."Unit of Measure Code" := TransferShipmentLine."Unit of Measure Code";
                TempDocumentLine.Quantity := TransferShipmentLine.Quantity;
                TempDocumentLine."Gross Weight" := TransferShipmentLine."Gross Weight";
                TempDocumentLine."Location Code" := TempDocumentLine."Location Code";
                TempDocumentLine.INSERT;
                IF TempDocumentHeader."Location Code" = '' THEN
                  TempDocumentHeader."Location Code" := TempDocumentLine."Location Code";
              UNTIL TransferShipmentLine.NEXT = 0;
          END;
      END;
      TempDocumentHeader.MODIFY;
    END;

    LOCAL PROCEDURE UpdateAbstractDocument@1310096(VAR TempDocumentHeader@1310000 : TEMPORARY Record 10002);
    BEGIN
      IF TempDocumentHeader."Currency Code" = '' THEN BEGIN
        TempDocumentHeader."Currency Code" := GLSetup."LCY Code";
        TempDocumentHeader."Currency Factor" := 1.0;
      END;
    END;

    LOCAL PROCEDURE CreateOriginalString@1310243(VAR TempDocumentHeader@1310000 : TEMPORARY Record 10002;VAR TempDocumentLine@1310001 : TEMPORARY Record 10003;VAR TempCFDIRelationDocument@1310018 : TEMPORARY Record 27006;VAR TempBlobOriginalString@1310004 : Record 99008535;DateTimeFirstReqSent@1310003 : Text[50];UUID@1310007 : Text[50];IsTransfer@1310002 : Boolean;IsReverse@1310005 : Boolean;AdvanceAmount@1310006 : Decimal;IsPrepayment@1310008 : Boolean;IsAdvanceSettle@1310009 : Boolean);
    BEGIN
      IF IsTransfer THEN BEGIN
        CreateOriginalStr33Transfer(TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,TempBlobOriginalString);
        EXIT;
      END;

      IF IsReverse THEN BEGIN
        CreateOriginalStr33AdvanceReverse(
          TempDocumentHeader,DateTimeFirstReqSent,TempBlobOriginalString,UUID,AdvanceAmount);
        EXIT;
      END;

      IF IsPrepayment THEN BEGIN
        CreateOriginalStr33AdvancePayment(TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,0,0,
          TempBlobOriginalString);
        EXIT;
      END;

      IF IsAdvanceSettle THEN BEGIN
        CreateOriginalStr33AdvanceSettle(TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,0,0,
          TempBlobOriginalString,UUID);
        EXIT;
      END;

      CreateOriginalStr33Document(
        TempDocumentHeader,TempDocumentLine,TempCFDIRelationDocument,
        DateTimeFirstReqSent,
        TempDocumentHeader."Document Table ID" IN [DATABASE::"Sales Cr.Memo Header",DATABASE::"Service Cr.Memo Header"],
        TempBlobOriginalString)
    END;

    LOCAL PROCEDURE CreateOriginalXML@1310249(VAR TempDocumentHeader@1310016 : TEMPORARY Record 10002;VAR TempDocumentLine@1310015 : TEMPORARY Record 10003;VAR TempCFDIRelationDocument@1310012 : TEMPORARY Record 27006;XMLDoc@1310017 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";SignedString@1310018 : Text;Certificate@1310022 : Text;CertificateSerialNo@1310019 : Text[250];DateTimeFirstReqSent@1310010 : Text[50];UUID@1310009 : Text[50];IsTransfer@1310008 : Boolean;IsReverse@1310007 : Boolean;AdvanceAmount@1310006 : Decimal;IsPrepayment@1310005 : Boolean;IsAdvanceSettle@1310004 : Boolean);
    BEGIN
      IF IsTransfer THEN BEGIN
        CreateXMLDocument33Transfer(
          TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,SignedString,Certificate,CertificateSerialNo,XMLDoc);
        EXIT;
      END;

      IF IsReverse THEN BEGIN
        CreateXMLDocument33AdvanceReverse(
          TempDocumentHeader,DateTimeFirstReqSent,SignedString,Certificate,CertificateSerialNo,XMLDoc,UUID,AdvanceAmount);
        EXIT;
      END;

      IF IsPrepayment THEN BEGIN
        CreateXMLDocument33AdvancePayment(
          TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,SignedString,Certificate,CertificateSerialNo,
          XMLDoc);
        EXIT;
      END;

      IF IsAdvanceSettle THEN BEGIN
        CreateXMLDocument33AdvanceSettle(
          TempDocumentHeader,TempDocumentLine,DateTimeFirstReqSent,SignedString,Certificate,CertificateSerialNo,
          XMLDoc,UUID);
        EXIT;
      END;

      CreateXMLDocument33(
        TempDocumentHeader,TempDocumentLine,TempCFDIRelationDocument,
        DateTimeFirstReqSent,SignedString,Certificate,CertificateSerialNo,
        TempDocumentHeader."Document Table ID" IN [DATABASE::"Sales Cr.Memo Header",DATABASE::"Service Cr.Memo Header"],XMLDoc)
    END;

    LOCAL PROCEDURE CalcDocumentLineForPricesInclVAT@1310032(VAR DocumentLine@1310000 : Record 10003;CurrencyCode@1310001 : Code[10]);
    VAR
      Currency@1310002 : Record 4;
    BEGIN
      IF DocumentLine."VAT %" = 0 THEN
        EXIT;

      IF NOT Currency.GET(CurrencyCode) THEN
        Currency.INIT;
      Currency.InitRoundingPrecision;
      DocumentLine."Unit Price/Direct Unit Cost" :=
        ROUND(DocumentLine."Unit Price/Direct Unit Cost" / (1 + DocumentLine."VAT %" / 100),Currency."Unit-Amount Rounding Precision");
      DocumentLine.Amount := DocumentLine.Quantity * DocumentLine."Unit Price/Direct Unit Cost";
      DocumentLine."Line Discount Amount" :=
        ROUND(DocumentLine.Amount * DocumentLine."Line Discount %" / 100,Currency."Amount Rounding Precision");
      DocumentLine.Amount -= DocumentLine."Line Discount Amount";
    END;

    LOCAL PROCEDURE GetCertificateSerialNo@1020061() : Text;
    VAR
      TempBlob@1020005 : Record 99008535;
      IsolatedCertificate@1310001 : Record 1262;
      CertificateManagement@1310000 : Codeunit 1259;
      BlobManagement@1020004 : Codeunit 10146;
      DotNet_SecureString@1310004 : Codeunit 3044;
      DotNet_ISignatureProvider@1310005 : Codeunit 10149;
      SerialNo@1020002 : Text;
      CertificateString@1310003 : Text;
      SignedString@1310002 : Text;
    BEGIN
      GetGLSetup;
      IF NOT GLSetup."Sim. Signature" THEN BEGIN
        BlobManagement.Get(TempBlob);
        IsolatedCertificate.GET(GLSetup."SAT Certificate");
        CertificateString := CertificateManagement.GetCertAsBase64String(IsolatedCertificate);

        CertificateManagement.GetPasswordAsSecureString(DotNet_SecureString,IsolatedCertificate);
        IF NOT SignDataWithCert(DotNet_ISignatureProvider,SignedString,'DummyString',CertificateString,DotNet_SecureString)
        THEN
          ERROR(SATNotValidErr);

        SerialNo := DotNet_ISignatureProvider.LastUsedCertificateSerialNo;
        EXIT(SerialNo);
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE TaxCodeFromTaxRate@1020006(TaxRate@1020000 : Decimal;TaxType@1020001 : 'Translado,Retencion') : Code[10];
    BEGIN
      IF (TaxType = TaxType::Translado) AND (TaxRate = 0.16) THEN
        EXIT('002'); // IVA

      IF (TaxType = TaxType::Retencion) AND (TaxRate = 0.1) THEN
        EXIT('001');

      IF (TaxType = TaxType::Retencion) AND (TaxRate IN [0.1..0.11]) THEN
        EXIT('002');

      IF (TaxType = TaxType::Retencion) AND ((TaxRate >= 0.0) AND (TaxRate <= 0.16)) THEN
        EXIT('002'); // IVA

      IF (TaxType = TaxType::Retencion) AND ((TaxRate >= 0.0) AND (TaxRate <= 0.35)) THEN
        EXIT('001'); // ISR

      CASE TaxRate OF
        0.265,0.3,0.53,0.5,1.6,0.304,0.25,0.09,0.08,0.07,0.06,0.03:
          IF (TaxRate = 0.03) AND (TaxType <> TaxType::Retencion) THEN
            EXIT('003'); // IEPS
      END;

      IF (TaxRate >= 0.0) AND (TaxRate <= 43.77) THEN
        EXIT('003'); // IEPS
    END;

    [External]
    PROCEDURE RequestPaymentStampDocument@1020058(VAR CustLedgerEntry@1020000 : Record 21);
    VAR
      SourceCodeSetup@1020004 : Record 242;
      Selection@1020003 : Integer;
      ElectronicDocumentStatus@1020006 : Option;
    BEGIN
      IF CustLedgerEntry."Document Type" <> CustLedgerEntry."Document Type"::Payment THEN
        ERROR(StampErr,CustLedgerEntry."Document Type");

      // Called from Send Action
      Export := FALSE;
      GetCompanyInfo;
      GetGLSetup;
      SourceCodeSetup.GET;
      Selection := STRMENU(Text008,3);

      ElectronicDocumentStatus := CustLedgerEntry."Electronic Document Status";
      CASE Selection OF
        1:// Request Stamp
          BEGIN
            EDocActionValidation(EDocAction::"Request Stamp",ElectronicDocumentStatus);
            RequestPaymentStamp(CustLedgerEntry);
          END;
        2:// Send
          BEGIN
            EDocActionValidation(EDocAction::Send,ElectronicDocumentStatus);
            SendPayment(CustLedgerEntry);
          END;
        3:// Request Stamp and Send
          BEGIN
            EDocActionValidation(EDocAction::"Request Stamp",ElectronicDocumentStatus);
            RequestPaymentStamp(CustLedgerEntry);
            COMMIT;
            EDocActionValidation(EDocAction::Send,ElectronicDocumentStatus);
            SendPayment(CustLedgerEntry);
          END;
      END;
    END;

    PROCEDURE RequestPaymentStamp@1020024(CustLedgerEntry@1020000 : Record 21);
    VAR
      Customer@1020004 : Record 18;
      DetailedCustLedgEntry@1020015 : Record 379;
      TempDetailedCustLedgEntry@1020017 : TEMPORARY Record 379;
      TempBlobOriginalString@1020008 : Record 99008535;
      TempBlobDigitalStamp@1020019 : Record 99008535;
      XMLDOMManagement@1020010 : Codeunit 6224;
      OutStrOriginalDoc@1020012 : OutStream;
      OutStrSignedDoc@1020020 : OutStream;
      XMLDoc@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocResult@1170000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      Environment@1020022 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Environment";
      OriginalString@1020006 : Text;
      SignedString@1020007 : Text;
      Certificate@1020005 : Text;
      Response@1020002 : Text;
      DateTimeFirstReqSent@1020003 : Text[50];
      CertificateSerialNo@1020014 : Text[250];
    BEGIN
      Export := TRUE;
      Customer.GET(CustLedgerEntry."Customer No.");

      DetailedCustLedgEntry.SETRANGE("Entry Type",DetailedCustLedgEntry."Entry Type"::Application);
      DetailedCustLedgEntry.SETRANGE("Applied Cust. Ledger Entry No.",CustLedgerEntry."Entry No.");
      DetailedCustLedgEntry.SETFILTER("Initial Document Type",'=%1|=%2',
        DetailedCustLedgEntry."Initial Document Type"::Invoice,
        DetailedCustLedgEntry."Initial Document Type"::"Credit Memo");
      IF DetailedCustLedgEntry.FINDSET THEN BEGIN
        REPEAT
          CLEAR(TempDetailedCustLedgEntry);
          TempDetailedCustLedgEntry.TRANSFERFIELDS(DetailedCustLedgEntry,TRUE);
          TempDetailedCustLedgEntry.INSERT;
        UNTIL DetailedCustLedgEntry.NEXT = 0;
      END;
      DetailedCustLedgEntry.SETRANGE("Cust. Ledger Entry No.",CustLedgerEntry."Entry No.");
      DetailedCustLedgEntry.SETRANGE("Applied Cust. Ledger Entry No.");
      DetailedCustLedgEntry.SETRANGE("Initial Document Type",DetailedCustLedgEntry."Initial Document Type"::Payment);
      DetailedCustLedgEntry.SETFILTER("Document Type",'=%1|=%2',
        DetailedCustLedgEntry."Initial Document Type"::Invoice,
        DetailedCustLedgEntry."Initial Document Type"::"Credit Memo");
      IF DetailedCustLedgEntry.FINDSET THEN BEGIN
        REPEAT
          CLEAR(TempDetailedCustLedgEntry);
          TempDetailedCustLedgEntry.TRANSFERFIELDS(DetailedCustLedgEntry,TRUE);
          TempDetailedCustLedgEntry.Amount := -ABS(TempDetailedCustLedgEntry.Amount);
          TempDetailedCustLedgEntry."Amount (LCY)" := -ABS(TempDetailedCustLedgEntry."Amount (LCY)");
          TempDetailedCustLedgEntry.INSERT;
        UNTIL DetailedCustLedgEntry.NEXT = 0;
      END;
      IF NOT CheckPaymentStamp(CustLedgerEntry,TempDetailedCustLedgEntry) THEN
        ERROR(UnableToStampErr);

      DateTimeFirstReqSent := GetDateTimeOfFirstReqPayment(CustLedgerEntry);
      CurrencyDecimalPlaces := GetCurrencyDecimalPlaces(CustLedgerEntry."Currency Code");

      // Create Payment Digital Stamp
      CreateOriginalPaymentStr33(
        Customer,CustLedgerEntry,TempDetailedCustLedgEntry,DateTimeFirstReqSent,TempBlobOriginalString);

      OriginalString := TempBlobOriginalString.ReadAsText(Environment.NewLine,TEXTENCODING::MSDos);
      CreateDigitalSignature(OriginalString,SignedString,CertificateSerialNo,Certificate);
      TextToBlob(TempBlobDigitalStamp,SignedString);

      // Create Payment Original XML
      CreateXMLPayment33(
        Customer,CustLedgerEntry,TempDetailedCustLedgEntry,DateTimeFirstReqSent,SignedString,
        Certificate,CertificateSerialNo,XMLDoc);

      WITH CustLedgerEntry DO BEGIN
        "Original String" := TempBlobOriginalString.Blob;
        "Digital Stamp SAT" := TempBlobDigitalStamp.Blob;
        "Certificate Serial No." := CertificateSerialNo;
        "Original Document XML".CREATEOUTSTREAM(OutStrOriginalDoc);
        "Signed Document XML".CREATEOUTSTREAM(OutStrSignedDoc);
        XMLDoc.Save(OutStrOriginalDoc);
        MODIFY;
        // CALCFIELDS("Original Document XML");
        // TempBlob.Blob := "Original Document XML";
        // FileManagement.BLOBExport(TempBlob,'PaymentXML.xml',TRUE);
      END;

      COMMIT;

      Response := InvokeMethod(XMLDoc,MethodType::"Request Stamp");

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        XMLDOMManagement.LoadXMLDocumentFromText(Response,XMLDocResult);
        XMLDocResult.Save(OutStrSignedDoc);
      END;

      // WITH CustLedgerEntry DO BEGIN
      // CALCFIELDS("Signed Document XML");
      // TempBlob.Blob := "Signed Document XML";
      // FileManagement.BLOBExport(TempBlob,'SignedPaymentDocument.xml',TRUE);
      // END;

      ProcessResponseEPayment(CustLedgerEntry,EDocAction::"Request Stamp");
      CustLedgerEntry.MODIFY;
    END;

    LOCAL PROCEDURE CheckPaymentStamp@1020063(CustLedgerEntry@1020000 : Record 21;VAR DetailedCustLedgEntry@1310000 : Record 379) : Boolean;
    VAR
      CustLedgerEntryLoc@1020001 : Record 21;
      CustLedgerEntryLoc2@1020003 : Record 21;
      ServiceCrMemoHeader@1020004 : Record 5994;
      SalesCrMemoHeader@1020005 : Record 114;
      ServiceSourceCode@1020006 : Code[10];
    BEGIN
      IF DetailedCustLedgEntry.FINDFIRST THEN BEGIN
        IF DetailedCustLedgEntry."Document Type" = DetailedCustLedgEntry."Document Type"::Payment THEN
          CustLedgerEntryLoc.SETRANGE("Entry No.",DetailedCustLedgEntry."Cust. Ledger Entry No.")
        ELSE
          CustLedgerEntryLoc.SETRANGE("Entry No.",DetailedCustLedgEntry."Applied Cust. Ledger Entry No.");
        IF CustLedgerEntryLoc.FINDFIRST THEN BEGIN
          CustLedgerEntryLoc2.SETRANGE("Closed by Entry No.",CustLedgerEntryLoc."Entry No.");
          CustLedgerEntryLoc2.SETRANGE("Date/Time Stamped",'');
          CustLedgerEntryLoc2.SETCURRENTKEY("Entry No.");
          IF CustLedgerEntryLoc2.FINDSET THEN
            REPEAT
              IF CustLedgerEntryLoc2."Entry No." < CustLedgerEntry."Entry No." THEN
                // Before we throw warning, check to see if this is a credit memo
                IF CustLedgerEntryLoc2."Document Type" = CustLedgerEntryLoc2."Document Type"::"Credit Memo" THEN BEGIN
                  // Find the corresponding record
                  SourceCodeSetup.GET;
                  IF SourceCodeSetup."Service Management" <> '' THEN
                    ServiceSourceCode := SourceCodeSetup."Service Management";
                  IF CustLedgerEntryLoc2."Source Code" = ServiceSourceCode THEN
                    IF ServiceCrMemoHeader.GET(CustLedgerEntryLoc2."Document No.") THEN
                      IF ServiceCrMemoHeader."Fiscal Invoice Number PAC" <> '' THEN
                        EXIT(TRUE);
                  IF SalesCrMemoHeader.GET(CustLedgerEntryLoc2."Document No.") THEN
                    IF SalesCrMemoHeader."Fiscal Invoice Number PAC" <> '' THEN
                      EXIT(TRUE);
                  EXIT(FALSE);
                END;
              IF DetailedCustLedgEntry."Document Type" = DetailedCustLedgEntry."Document Type"::Payment THEN
                IF CustLedgerEntryLoc2."Entry No." = CustLedgerEntry."Entry No." THEN
                  EXIT(TRUE);
              IF DetailedCustLedgEntry."Document Type" = DetailedCustLedgEntry."Document Type"::Invoice THEN
                EXIT(TRUE);
            UNTIL CustLedgerEntryLoc2.NEXT = 0
          ELSE
            EXIT(TRUE);
        END;
      END;
    END;

    LOCAL PROCEDURE SumStampedPayments@1020085(CustLedgerEntry@1020000 : Record 21) : Decimal;
    VAR
      DetailedCustLedgEntry@1020002 : Record 379;
      CustLedgerEntryLoc@1020001 : Record 21;
      CustLedgerEntryLoc2@1020003 : Record 21;
      StampedAmount@1020004 : Decimal;
    BEGIN
      DetailedCustLedgEntry.RESET;
      DetailedCustLedgEntry.SETRANGE("Applied Cust. Ledger Entry No.",CustLedgerEntry."Entry No.");
      DetailedCustLedgEntry.SETRANGE("Initial Document Type",DetailedCustLedgEntry."Initial Document Type"::Invoice);
      IF DetailedCustLedgEntry.FINDFIRST THEN BEGIN
        CustLedgerEntryLoc.SETRANGE("Entry No.",DetailedCustLedgEntry."Cust. Ledger Entry No.");
        IF CustLedgerEntryLoc.FINDFIRST THEN BEGIN
          CustLedgerEntryLoc2.SETRANGE("Closed by Entry No.",CustLedgerEntryLoc."Entry No.");
          CustLedgerEntryLoc2.SETFILTER("Date/Time Stamped",'<>%1','');
          CustLedgerEntryLoc2.SETCURRENTKEY("Entry No.");
          IF CustLedgerEntryLoc2.FINDSET THEN
            REPEAT
              StampedAmount += CustLedgerEntryLoc2."Closed by Amount";
            UNTIL CustLedgerEntryLoc2.NEXT = 0;
          EXIT(StampedAmount);
        END;
      END;
    END;

    LOCAL PROCEDURE SendPayment@1020059(VAR CustLedgerEntry@1020004 : Record 21);
    BEGIN
      SendEPayment(CustLedgerEntry);
    END;

    LOCAL PROCEDURE SendEPayment@1020060(VAR CustLedgerEntry@1020000 : Record 21);
    VAR
      CustLedgerEntryLoc@1020002 : Record 21;
      CustLedgerEntryLoc2@1020004 : Record 21;
      TempBlob@1020001 : Record 99008535;
      XMLInstream@1020003 : InStream;
      FileNameEdoc@1020006 : Text;
    BEGIN
      GetCustomer(CustLedgerEntry."Customer No.");
      Customer.TESTFIELD("E-Mail");
      IF CustLedgerEntry."No. of E-Documents Sent" <> 0 THEN
        IF NOT CONFIRM(PaymentsAlreadySentQst) THEN
          ERROR('');

      // Export XML
      CustLedgerEntry.CALCFIELDS("Signed Document XML");
      TempBlob.Blob := CustLedgerEntry."Signed Document XML";
      TempBlob.Blob.CREATEINSTREAM(XMLInstream);
      FileNameEdoc := CustLedgerEntry."Document No." + '.xml';
      CustLedgerEntryLoc2."Signed Document XML" := TempBlob.Blob;
      CustLedgerEntryLoc2."Signed Document XML" := CustLedgerEntryLoc2."Signed Document XML";

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(PaymentNoMsg,CustLedgerEntry."Document No."),
        STRSUBSTNO(PaymentAttachmentMsg,CustLedgerEntry."Document No."),FileNameEdoc,'',FALSE,XMLInstream);

      CustLedgerEntryLoc.GET(CustLedgerEntry."Entry No.");
      CustLedgerEntryLoc."No. of E-Documents Sent" := CustLedgerEntryLoc."No. of E-Documents Sent" + 1;
      IF NOT CustLedgerEntryLoc."Electronic Document Sent" THEN
        CustLedgerEntryLoc."Electronic Document Sent" := TRUE;
      CustLedgerEntryLoc."Electronic Document Status" := CustLedgerEntryLoc."Electronic Document Status"::Sent;
      CustLedgerEntryLoc."Date/Time Sent" :=
        FormatDateTime(ConvertCurrentDateTimeToTimeZone(GetTimeZoneFromCustomer(CustLedgerEntry."Customer No.")));
      CustLedgerEntryLoc.MODIFY;

      MESSAGE(Text001,CustLedgerEntry."Document No.");
    END;

    LOCAL PROCEDURE ProcessResponseEPayment@1020073(VAR CustLedgerEntry@1020000 : Record 21;Action@1020007 : Option);
    VAR
      TempBlob@1020002 : Record 99008535;
      PACWebService@1020003 : Record 10000;
      XMLDOMManagement@1020015 : Codeunit 6224;
      XMLDoc@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLDocResult@1310000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      XMLCurrNode@1020010 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020012 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      NamespaceManager@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020008 : Text[95];
      ErrorDescription@1020009 : Text[250];
    BEGIN
      GetGLSetup;
      GetCheckCompanyInfo;
      // Switch from sales hdr Bill-toCustomerNo. to just Customer no.
      GetCustomer(CustLedgerEntry."Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      IF ISNULL(XMLDocResult) THEN
        XMLDocResult := XMLDocResult.XmlDocument;

      CustLedgerEntry.CALCFIELDS("Signed Document XML");
      CustLedgerEntry."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDOMManagement.LoadXMLDocumentFromInStream(InStr,XMLDocResult);
      CLEAR(CustLedgerEntry."Signed Document XML");
      XMLCurrNode := XMLDocResult.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      CustLedgerEntry."PAC Web Service Name" := PACWebService.Name;

      IF XMLCurrNode.Value <> '1' THEN BEGIN
        CustLedgerEntry."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        ErrorDescription := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Detalle');
        IF NOT ISNULL(XMLCurrNode) THEN
          ErrorDescription := ErrorDescription + ': ' + XMLCurrNode.Value;
        IF STRLEN(ErrorDescription) > 250 THEN
          ErrorDescription := COPYSTR(ErrorDescription,1,247) + '...';
        CustLedgerEntry."Error Description" := ErrorDescription;
        CASE Action OF
          EDocAction::"Request Stamp":
            CustLedgerEntry."Electronic Document Status" := CustLedgerEntry."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            BEGIN
              CustLedgerEntry."Electronic Document Status" := CustLedgerEntry."Electronic Document Status"::"Cancel Error";
              CustLedgerEntry."Date/Time Canceled" := '';
            END;
        END;
        EXIT;
      END;

      CustLedgerEntry."Error Code" := '';
      CustLedgerEntry."Error Description" := '';
      IF Action = EDocAction::Cancel THEN BEGIN
        CustLedgerEntry."Electronic Document Status" := CustLedgerEntry."Electronic Document Status"::Canceled;
        EXIT;
      END;

      XMLCurrNode := XMLDocResult.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;

      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;
      FOR Counter := 0 TO (NodeCount - 1) DO BEGIN
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,TRUE));
      END;

      CustLedgerEntry."Signed Document XML".CREATEOUTSTREAM(OutStr);

      XMLDoc.Save(OutStr);
      // *****Does any of this need to change for Payments?
      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/4');
      NamespaceManager.AddNamespace('pago20','http://www.sat.gob.mx/Pagos20');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      CustLedgerEntry."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      CustLedgerEntry."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('NoCertificadoSAT');
      CustLedgerEntry."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('SelloSAT');

      CLEAR(OutStr);
      CustLedgerEntry."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);
      // Certificate Serial
      CustLedgerEntry."Electronic Document Status" := CustLedgerEntry."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      CustLedgerEntry.CALCFIELDS(Amount);
      QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",CustLedgerEntry.Amount,
          FORMAT(CustLedgerEntry."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      CustLedgerEntry."QR Code" := TempBlob.Blob;

      // FileManagement.BLOBExport(TempBlob,'PaymentResponse.xml',TRUE);
    END;

    LOCAL PROCEDURE CreateXMLPayment33@1020062(VAR TempCustomer@1020000 : TEMPORARY Record 18;VAR TempCustLedgerEntry@1020009 : TEMPORARY Record 21;VAR TempDetailedCustLedgEntry@1020013 : TEMPORARY Record 379;DateTimeFirstReqSent@1020007 : Text[50];SignedString@1020001 : Text;Certificate@1020002 : Text;CertificateSerialNo@1020008 : Text[250];VAR XMLDoc@1020005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument");
    VAR
      CustLedgerEntry2@1020016 : Record 21;
      CustomerBankAccount@1020017 : Record 287;
      TempVATAmountLine@1310006 : TEMPORARY Record 290;
      TempVATAmountLinePmt@1310002 : TEMPORARY Record 290;
      TempVATAmountLineTotal@1310007 : TEMPORARY Record 290;
      DetailedCustLedgEntryPmt@1310009 : Record 379;
      SATUtilities@1020012 : Codeunit 27030;
      XMLCurrNode@1020006 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020011 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      SumOfStamped@1020003 : Decimal;
      PaymentAmount@1020023 : Decimal;
      PaymentAmountLCY@1310000 : Decimal;
      UUID@1020014 : Text[50];
      DomicilioFiscalReceptor@1310001 : Text;
      DocAmountInclVAT@1310012 : Decimal;
      SubjectToTax@1310013 : Text;
      TipoCambioP@1310008 : Decimal;
      CurrencyFactorInvoice@1310010 : Decimal;
      CurrencyFactorPayment@1310011 : Decimal;
      EquivalenciaDR@1310014 : Decimal;
    BEGIN
      InitPaymentXML(XMLDoc,XMLCurrNode);
      WITH TempCustLedgerEntry DO BEGIN
        AddAttribute(XMLDoc,XMLCurrNode,'Version','4.0');
        AddAttribute(XMLDoc,XMLCurrNode,'Folio',"Document No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',DateTimeFirstReqSent);
        AddAttribute(XMLDoc,XMLCurrNode,'Sello',SignedString);
        AddAttribute(XMLDoc,XMLCurrNode,'NoCertificado',CertificateSerialNo);
        AddAttribute(XMLDoc,XMLCurrNode,'Certificado',Certificate);
        AddAttribute(XMLDoc,XMLCurrNode,'SubTotal','0');
        AddAttribute(XMLDoc,XMLCurrNode,'Moneda','XXX');
        AddAttribute(XMLDoc,XMLCurrNode,'Total','0');
        AddAttribute(XMLDoc,XMLCurrNode,'TipoDeComprobante','P');// Pago
        AddAttribute(XMLDoc,XMLCurrNode,'Exportacion',TempCustomer."CFDI Export Code");
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo."SAT Postal Code");

        // Emisor
        WriteCompanyInfo33(XMLDoc,XMLCurrNode);

        TempDetailedCustLedgEntry.FINDFIRST;
        GetPmtDataFromFirstDoc(TempDetailedCustLedgEntry,DomicilioFiscalReceptor);

        // Receptor
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Rfc',TempCustomer."RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'Nombre',TempCustomer.Name);
        AddAttribute(XMLDoc,XMLCurrNode,'DomicilioFiscalReceptor',DomicilioFiscalReceptor);
        IF SATUtilities.GetSATCountryCode(TempCustomer."Country/Region Code") <> 'MEX' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'ResidenciaFiscal',SATUtilities.GetSATCountryCode(TempCustomer."Country/Region Code"));
          AddAttribute(XMLDoc,XMLCurrNode,'NumRegIdTrib',TempCustomer."VAT Registration No.");
        END;
        AddAttribute(XMLDoc,XMLCurrNode,'RegimenFiscalReceptor',TempCustomer."SAT Tax Regime Classification");
        AddAttribute(XMLDoc,XMLCurrNode,'UsoCFDI','CP01');

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveProdServ','84111506');
        AddAttribute(XMLDoc,XMLCurrNode,'NoIdentificacion','');
        AddAttribute(XMLDoc,XMLCurrNode,'Cantidad','1');
        AddAttribute(XMLDoc,XMLCurrNode,'ClaveUnidad','ACT');
        AddAttribute(XMLDoc,XMLCurrNode,'Unidad','');
        AddAttribute(XMLDoc,XMLCurrNode,'Descripcion','Pago');
        AddAttribute(XMLDoc,XMLCurrNode,'ValorUnitario','0');
        AddAttribute(XMLDoc,XMLCurrNode,'Importe','0');
        AddAttribute(XMLDoc,XMLCurrNode,'ObjetoImp','01');

        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;

        // Complemento
        AddElementCFDI(XMLCurrNode,'Complemento','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Pagos
        DocNameSpace := 'http://www.sat.gob.mx/Pagos20';
        AddElementPago(XMLCurrNode,'Pagos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'xmlns:pago20','http://www.sat.gob.mx/Pagos20');
        AddAttribute(XMLDoc,XMLCurrNode,'Version','2.0');

        // Pagos->Pago
        GetPaymentData(
          TempDetailedCustLedgEntry,DetailedCustLedgEntryPmt,TempVATAmountLine,TempVATAmountLinePmt,TempVATAmountLineTotal,
          CurrencyFactorPayment,CurrencyFactorInvoice,PaymentAmount,PaymentAmountLCY,TipoCambioP,"Entry No.");

        AddElementPago(XMLCurrNode,'Totales','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        AddNodePagoTotales(XMLDoc,XMLCurrNode,TempVATAmountLineTotal);
        AddAttribute(XMLDoc,XMLCurrNode,'MontoTotalPagos',FormatAmount(PaymentAmountLCY));
        XMLCurrNode := XMLCurrNode.ParentNode;

        AddElementPago(XMLCurrNode,'Pago','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'FechaPago',FormatAsDateTime("Posting Date",0T,''));
        AddAttribute(XMLDoc,XMLCurrNode,'FormaDePagoP',SATUtilities.GetSATPaymentMethod(TempCustomer."Payment Method Code"));
        AddAttribute(XMLDoc,XMLCurrNode,'MonedaP',ConvertCurrency("Currency Code"));
        IF GLSetup."Disable CFDI Payment Details" THEN
          TipoCambioP := 1 / "Original Currency Factor"
        ELSE
          TipoCambioP := PaymentAmountLCY / PaymentAmount;
        IF ConvertCurrency("Currency Code") <> GLSetup."LCY Code" THEN
          AddAttribute(XMLDoc,XMLCurrNode,'TipoCambioP',FormatDecimal(TipoCambioP,6))
        ELSE
          AddAttribute(XMLDoc,XMLCurrNode,'TipoCambioP','1');

        AddAttribute(XMLDoc,XMLCurrNode,'Monto',FormatAmount(PaymentAmount));
        IF (TempCustomer."Currency Code" <> 'MXN') AND (TempCustomer."Currency Code" <> 'XXX') THEN
          IF TempCustomer."Preferred Bank Account Code" <> '' THEN
            AddAttribute(XMLDoc,XMLCurrNode,'NomBancoOrdExt',TempCustomer."Preferred Bank Account Code")
          ELSE BEGIN
            CustomerBankAccount.RESET;
            CustomerBankAccount.SETRANGE("Customer No.",TempCustomer."No.");
            IF CustomerBankAccount.FINDFIRST THEN // Find the first one...
              AddAttribute(XMLDoc,XMLCurrNode,'NomBancoOrdExt',CustomerBankAccount."Bank Account No.")
            ELSE // Put in a blank number
              AddAttribute(XMLDoc,XMLCurrNode,'NomBancoOrdExt','');
          END;

        IF TempDetailedCustLedgEntry.FINDSET THEN
          REPEAT
            // DoctoRelacionado
            AddElementPago(XMLCurrNode,'DoctoRelacionado','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;
            IF TempDetailedCustLedgEntry."Document Type" = TempDetailedCustLedgEntry."Document Type"::Payment THEN
              CustLedgerEntry2.GET(TempDetailedCustLedgEntry."Cust. Ledger Entry No.")
            ELSE
              CustLedgerEntry2.GET(TempDetailedCustLedgEntry."Applied Cust. Ledger Entry No.");

            GetRelatedDocumentData(
              TempDetailedCustLedgEntry,CustLedgerEntry2."Document No.",CustLedgerEntry2."Source Code",
              TempVATAmountLine,UUID,DocAmountInclVAT,SubjectToTax);

            UpdatePartialPaymentAmounts(TempDetailedCustLedgEntry,CustLedgerEntry2,TempVATAmountLine);

            AddAttribute(XMLDoc,XMLCurrNode,'IdDocumento',UUID);// this needs to be changed
            AddAttribute(XMLDoc,XMLCurrNode,'Folio',CustLedgerEntry2."Document No.");
            AddAttribute(XMLDoc,XMLCurrNode,'MonedaDR',ConvertCurrency(CustLedgerEntry2."Currency Code"));

            IF GLSetup."Disable CFDI Payment Details" THEN
              EquivalenciaDR := CustLedgerEntry2."Original Currency Factor" / "Original Currency Factor"
            ELSE BEGIN
              CurrencyFactorInvoice := TempDetailedCustLedgEntry.Amount / TempDetailedCustLedgEntry."Amount (LCY)";
              IF ConvertCurrency(CustLedgerEntry2."Currency Code") = GLSetup."LCY Code" THEN
                EquivalenciaDR := ROUND(CurrencyFactorInvoice / CurrencyFactorPayment,0.000001)
              ELSE
                EquivalenciaDR := ROUND(CurrencyFactorPayment / CurrencyFactorInvoice,0.000001);
            END;
            IF ConvertCurrency(CustLedgerEntry2."Currency Code") = ConvertCurrency("Currency Code") THEN
              AddAttribute(XMLDoc,XMLCurrNode,'EquivalenciaDR','1')
            ELSE
              AddAttribute(XMLDoc,XMLCurrNode,'EquivalenciaDR',FormatDecimal(EquivalenciaDR,6));

            AddAttribute(XMLDoc,XMLCurrNode,'NumParcialidad','1');
            SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
            AddAttribute(
              XMLDoc,XMLCurrNode,'ImpSaldoAnt',FormatAmount(DocAmountInclVAT + SumOfStamped));
            AddAttribute(XMLDoc,XMLCurrNode,'ImpPagado',FormatAmount(TempDetailedCustLedgEntry.Amount));
            AddAttribute(XMLDoc,XMLCurrNode,'ImpSaldoInsoluto',
              FormatAmount(DocAmountInclVAT + (TempDetailedCustLedgEntry.Amount + SumOfStamped)));
            AddAttribute(XMLDoc,XMLCurrNode,'ObjetoImpDR',SubjectToTax);

            AddNodePagoImpuestosDR(XMLDoc,XMLCurrNode,XMLNewChild,TempVATAmountLine);

            XMLCurrNode := XMLCurrNode.ParentNode;
          UNTIL TempDetailedCustLedgEntry.NEXT = 0;

        // ImpuestosP
        AddNodePagoImpuestosP(XMLDoc,XMLCurrNode,XMLNewChild,TempVATAmountLinePmt,DetailedCustLedgEntryPmt."Currency Code");

        XMLCurrNode := XMLCurrNode.ParentNode; // Pago
        XMLCurrNode := XMLCurrNode.ParentNode; // Pagos
      END;
    END;

    [External]
    PROCEDURE CreateOriginalPaymentStr33@1020064(VAR TempCustomer@1020001 : TEMPORARY Record 18;VAR TempCustLedgerEntry@1020003 : TEMPORARY Record 21;VAR TempDetailedCustLedgEntry@1020010 : TEMPORARY Record 379;DateTimeFirstReqSent@1020005 : Text;VAR TempBlob@1020002 : Record 99008535);
    VAR
      CustLedgerEntry2@1020006 : Record 21;
      CustomerBankAccount@1020004 : Record 287;
      TempVATAmountLine@1310003 : TEMPORARY Record 290;
      TempVATAmountLinePmt@1310006 : TEMPORARY Record 290;
      TempVATAmountLineTotal@1310002 : TEMPORARY Record 290;
      DetailedCustLedgEntryPmt@1310007 : Record 379;
      BlobManagement@1020000 : Codeunit 10146;
      SATUtilities@1020008 : Codeunit 27030;
      SumOfStamped@1020007 : Decimal;
      PaymentAmount@1020020 : Decimal;
      PaymentAmountLCY@1310000 : Decimal;
      UUID@1020009 : Text[50];
      DomicilioFiscalReceptor@1310001 : Text;
      DocAmountInclVAT@1310004 : Decimal;
      SubjectToTax@1310005 : Text;
      TipoCambioP@1310008 : Decimal;
      CurrencyFactorInvoice@1310009 : Decimal;
      CurrencyFactorPayment@1310010 : Decimal;
      EquivalenciaDR@1310011 : Decimal;
    BEGIN
      WITH TempCustLedgerEntry DO BEGIN
        BlobManagement.Init;
        BlobManagement.Write('||4.0|'); // Version
        BlobManagement.Write("Document No." + '|');// Folio...PaymentNo.
        BlobManagement.Write(DateTimeFirstReqSent + '|'); // Fecha
        BlobManagement.Write(GetCertificateSerialNo + '|'); // NoCertificado
        BlobManagement.Write('0|');// Subtotal
        BlobManagement.Write('XXX|');// Monenda***notWritingOptional
        BlobManagement.Write('0|');// Total
        BlobManagement.Write('P|');// TipoDeComprobante
        BlobManagement.Write(TempCustomer."CFDI Export Code" + '|');// Exportacion

        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."SAT Postal Code") + '|');// LugarExpedicion

        // Emisor
        GetCompanyInfo;
        BlobManagement.Write(CompanyInfo."RFC No." + '|');// RfcNoFromCompany
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|');// Nombre
        BlobManagement.Write(CompanyInfo."SAT Tax Regime Classification" + '|');// RegimenFiscal

        TempDetailedCustLedgEntry.FINDFIRST;
        GetPmtDataFromFirstDoc(TempDetailedCustLedgEntry,DomicilioFiscalReceptor);

        // Receptor
        BlobManagement.Write(TempCustomer."RFC No." + '|');// ReceptorCustomerRfcNo.
        BlobManagement.Write(TempCustomer.Name + '|'); // Nombre
        BlobManagement.Write(DomicilioFiscalReceptor + '|');// DomicilioFiscalReceptor
        IF SATUtilities.GetSATCountryCode(TempCustomer."Country/Region Code") <> 'MEX' THEN BEGIN
          BlobManagement.Write(SATUtilities.GetSATCountryCode(TempCustomer."Country/Region Code") + '|');// ResidenciaFiscal
          BlobManagement.Write(RemoveInvalidChars(TempCustomer."VAT Registration No.") + '|');// NumRegIdTrib
        END;
        BlobManagement.Write(TempCustomer."SAT Tax Regime Classification" + '|');// RegimenFiscalReceptor
        BlobManagement.Write('CP01|');// UsoCFDIHCtoP01fixedValueForPayment

        // Conceptos->Concepto
        BlobManagement.Write('84111506' + '|');// ClaveProdServ
        BlobManagement.Write('1' + '|');// Cantidad
        BlobManagement.Write('ACT' + '|');// ClaveUnidad
        BlobManagement.Write('Pago' + '|');// Descripcion
        BlobManagement.Write('0' + '|');// ValorUnitario
        BlobManagement.Write('0' + '|');// Importe
        BlobManagement.Write('01' + '|');// ObjetoImp

        // Pagos
        BlobManagement.Write('2.0' + '|');// VersionForPagoHCto1.0

        GetPaymentData(
          TempDetailedCustLedgEntry,DetailedCustLedgEntryPmt,TempVATAmountLine,TempVATAmountLinePmt,TempVATAmountLineTotal,
          CurrencyFactorPayment,CurrencyFactorInvoice,PaymentAmount,PaymentAmountLCY,TipoCambioP,"Entry No.");

        // Pagos->Pago
        // Totales
        AddStrPagoTotales(TempVATAmountLineTotal,BlobManagement);
        BlobManagement.Write(FormatAmount(PaymentAmountLCY) + '|');// Totales/MontoTotalPagos

        BlobManagement.Write(FormatAsDateTime("Posting Date",0T,'') + '|');// FechaPagoSetToPD
        BlobManagement.Write(SATUtilities.GetSATPaymentMethod(TempCustomer."Payment Method Code") + '|');// FormaDePagoP
        BlobManagement.Write(ConvertCurrency("Currency Code") + '|');// MonedaP

        IF GLSetup."Disable CFDI Payment Details" THEN
          TipoCambioP := 1 / "Original Currency Factor"
        ELSE
          TipoCambioP := PaymentAmountLCY / PaymentAmount;
        IF ConvertCurrency("Currency Code") <> GLSetup."LCY Code" THEN
          BlobManagement.Write(FormatDecimal(TipoCambioP,6) + '|') // TipoCambioP
        ELSE
          BlobManagement.Write('1|');

        BlobManagement.Write(FormatAmount(PaymentAmount) + '|'); // Monto

        IF (TempCustomer."Currency Code" <> 'MXN') AND (TempCustomer."Currency Code" <> 'XXX') THEN
          IF TempCustomer."Preferred Bank Account Code" <> '' THEN
            BlobManagement.Write(TempCustomer."Preferred Bank Account Code" + '|')
          ELSE BEGIN
            CustomerBankAccount.RESET;
            CustomerBankAccount.SETRANGE("Customer No.",TempCustomer."No.");
            IF CustomerBankAccount.FINDFIRST THEN // Find the first one...
              BlobManagement.Write(CustomerBankAccount."Bank Account No." + '|')
            ELSE
              BlobManagement.Write('' + '|');
          END;

        IF TempDetailedCustLedgEntry.FINDSET THEN
          REPEAT
            // DoctoRelacionado
            IF TempDetailedCustLedgEntry."Document Type" = TempDetailedCustLedgEntry."Document Type"::Payment THEN
              CustLedgerEntry2.GET(TempDetailedCustLedgEntry."Cust. Ledger Entry No.")
            ELSE
              CustLedgerEntry2.GET(TempDetailedCustLedgEntry."Applied Cust. Ledger Entry No.");

            GetRelatedDocumentData(
              TempDetailedCustLedgEntry,CustLedgerEntry2."Document No.",CustLedgerEntry2."Source Code",
              TempVATAmountLine,UUID,DocAmountInclVAT,SubjectToTax);

            UpdatePartialPaymentAmounts(TempDetailedCustLedgEntry,CustLedgerEntry2,TempVATAmountLine);

            BlobManagement.Write(UUID + '|');// IdDocumento
            BlobManagement.Write(CustLedgerEntry2."Document No." + '|');// Folio
            BlobManagement.Write(ConvertCurrency(CustLedgerEntry2."Currency Code") + '|'); // MonedaDR

            IF GLSetup."Disable CFDI Payment Details" THEN
              EquivalenciaDR := CustLedgerEntry2."Original Currency Factor" / "Original Currency Factor"
            ELSE BEGIN
              CurrencyFactorInvoice := TempDetailedCustLedgEntry.Amount / TempDetailedCustLedgEntry."Amount (LCY)";
              IF ConvertCurrency(CustLedgerEntry2."Currency Code") = GLSetup."LCY Code" THEN
                EquivalenciaDR := ROUND(CurrencyFactorInvoice / CurrencyFactorPayment,0.000001)
              ELSE
                EquivalenciaDR := ROUND(CurrencyFactorPayment / CurrencyFactorInvoice,0.000001);
            END;
            IF ConvertCurrency(CustLedgerEntry2."Currency Code") = ConvertCurrency("Currency Code") THEN
              BlobManagement.Write('1|')
            ELSE
              BlobManagement.Write(FormatDecimal(EquivalenciaDR,6) + '|');

            BlobManagement.Write('1|');// NumParcialidad
            SumOfStamped := SumStampedPayments(TempCustLedgerEntry);
            BlobManagement.Write(FormatAmount(DocAmountInclVAT + SumOfStamped) + '|');// ImpSaldoAnt
            BlobManagement.Write(FormatAmount(TempDetailedCustLedgEntry.Amount) + '|'); // ImpPagado
            BlobManagement.Write(
              FormatAmount(DocAmountInclVAT + (TempDetailedCustLedgEntry.Amount + SumOfStamped)) + '|');// ImpSaldoInsoluto
            BlobManagement.Write(SubjectToTax + '|'); // ObjetoImpDR

            AddStrPagoImpuestosDR(TempVATAmountLine,BlobManagement);
          UNTIL TempDetailedCustLedgEntry.NEXT = 0;

        // ImpuestosP
        AddStrPagoImpuestosP(TempVATAmountLinePmt,BlobManagement,DetailedCustLedgEntryPmt."Currency Code");

        // Need one more pipe character at end of built string...
        BlobManagement.WriteAllowOneCharacter('|');
        BlobManagement.Get(TempBlob);
        // FileManagement.BLOBExport(TempBlob,'OriginalStringPayment.xml',TRUE);
      END;
    END;

    LOCAL PROCEDURE InitPaymentXML@1020065(VAR XMLDoc@1020002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLCurrNode@1020000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      XMLDOMManagement@1020001 : Codeunit 6224;
    BEGIN
      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      // Root element
      DocNameSpace := 'http://www.sat.gob.mx/cfd/4';
      XMLDOMManagement.LoadXMLDocumentFromText('<?xml version="1.0" encoding="UTF-8" ?> ' +
        '<cfdi:Comprobante xmlns:cfdi="http://www.sat.gob.mx/cfd/4" xmlns="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
        'xsi:schemaLocation="http://www.sat.gob.mx/cfd/4 http://www.sat.gob.mx/sitio_internet/cfd/4/cfdv40.xsd' +
        ' http://www.sat.gob.mx/Pagos20 http://www.sat.gob.mx/sitio_internet/cfd/Pagos/Pagos20.xsd" ' +
        'xmlns:pago20="http://www.sat.gob.mx/Pagos20"></cfdi:Comprobante>',
        XMLDoc);

      XMLCurrNode := XMLDoc.DocumentElement;
    END;

    LOCAL PROCEDURE InitCFDIRelatedDocuments@1310023(VAR TempCFDIRelationDocument@1310000 : TEMPORARY Record 27006;UUID@1310001 : Text[50];RelationType@1310002 : Code[10]);
    BEGIN
      IF UUID = '' THEN
        EXIT;
      TempCFDIRelationDocument.INIT;
      TempCFDIRelationDocument."SAT Relation Type" := RelationType;
      TempCFDIRelationDocument."Fiscal Invoice Number PAC" := UUID;
      TempCFDIRelationDocument.INSERT;
    END;

    LOCAL PROCEDURE GetPaymentData@1310175(VAR TempDetailedCustLedgEntry@1310000 : TEMPORARY Record 379;VAR DetailedCustLedgEntryPmt@1310008 : Record 379;VAR TempVATAmountLine@1310002 : TEMPORARY Record 290;VAR TempVATAmountLinePmt@1310013 : TEMPORARY Record 290;VAR TempVATAmountLineTotal@1310014 : TEMPORARY Record 290;VAR CurrencyFactorPayment@1310009 : Decimal;VAR CurrencyFactorInvoice@1310006 : Decimal;VAR PaymentAmount@1310010 : Decimal;VAR PaymentAmountLCY@1310011 : Decimal;VAR TipoCambioP@1310012 : Decimal;PaymentEntryNo@1310007 : Integer);
    VAR
      CustLedgerEntry2@1310001 : Record 21;
      UUID@1310005 : Text[50];
      DocAmountInclVAT@1310004 : Decimal;
      SubjectToTax@1310003 : Text;
    BEGIN
      GetPmtCustDtldEntry(DetailedCustLedgEntryPmt,PaymentEntryNo);
      DetailedCustLedgEntryPmt.CALCSUMS(Amount,"Amount (LCY)");
      PaymentAmount := ABS(DetailedCustLedgEntryPmt.Amount);
      PaymentAmountLCY := ABS(DetailedCustLedgEntryPmt."Amount (LCY)");
      IF GLSetup."Disable CFDI Payment Details" THEN
        EXIT;

      CurrencyFactorPayment := DetailedCustLedgEntryPmt.Amount / DetailedCustLedgEntryPmt."Amount (LCY)";
      IF TempDetailedCustLedgEntry.FINDSET THEN
        REPEAT
          IF TempDetailedCustLedgEntry."Document Type" = TempDetailedCustLedgEntry."Document Type"::Payment THEN
            CustLedgerEntry2.GET(TempDetailedCustLedgEntry."Cust. Ledger Entry No.")
          ELSE
            CustLedgerEntry2.GET(TempDetailedCustLedgEntry."Applied Cust. Ledger Entry No.");
          GetRelatedDocumentData(
            TempDetailedCustLedgEntry,CustLedgerEntry2."Document No.",CustLedgerEntry2."Source Code",
            TempVATAmountLine,UUID,DocAmountInclVAT,SubjectToTax);

          UpdatePartialPaymentAmounts(TempDetailedCustLedgEntry,CustLedgerEntry2,TempVATAmountLine);

          CurrencyFactorInvoice := TempDetailedCustLedgEntry.Amount / TempDetailedCustLedgEntry."Amount (LCY)";

          IF ConvertCurrency(DetailedCustLedgEntryPmt."Currency Code") = GLSetup."LCY Code" THEN
            TipoCambioP := ROUND(CurrencyFactorPayment / CurrencyFactorInvoice,0.000001)
          ELSE
            TipoCambioP := ROUND(CurrencyFactorInvoice / CurrencyFactorPayment,0.000001);
          IF ConvertCurrency(CustLedgerEntry2."Currency Code") = GLSetup."LCY Code" THEN
            InsertTempVATAmountLinePmt(TempVATAmountLinePmt,TempVATAmountLine,TipoCambioP)
          ELSE
            InsertTempVATAmountLinePmt(TempVATAmountLinePmt,TempVATAmountLine,1 / TipoCambioP);

          InsertTempVATAmountLinePmtTotals(
            TempVATAmountLineTotal,TempVATAmountLine,CustLedgerEntry2."Original Currency Factor");
        UNTIL TempDetailedCustLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE GetPmtDataFromFirstDoc@1310110(DetailedCustLedgEntry@1310002 : Record 379;VAR DomicilioFiscalReceptor@1310000 : Text);
    VAR
      CustLedgerEntry@1310003 : Record 21;
      Customer@1310010 : Record 18;
      SalesInvoiceHeader@1310006 : Record 112;
      SalesCrMemoHeader@1310007 : Record 114;
      ServiceInvoiceHeader@1310008 : Record 5992;
      ServiceCrMemoHeader@1310009 : Record 5994;
      TableID@1310011 : Integer;
    BEGIN
      Customer.GET(DetailedCustLedgEntry."Customer No.");
      DomicilioFiscalReceptor := GetSATPostalCode(Customer."Location Code",Customer."Post Code");
      IF DetailedCustLedgEntry."Document Type" = DetailedCustLedgEntry."Document Type"::Payment THEN
        CustLedgerEntry.GET(DetailedCustLedgEntry."Cust. Ledger Entry No.")
      ELSE
        CustLedgerEntry.GET(DetailedCustLedgEntry."Applied Cust. Ledger Entry No.");

      TableID := GetRelatedDocumentTableID(DetailedCustLedgEntry,CustLedgerEntry."Source Code");

      CASE TableID OF
        DATABASE::"Sales Invoice Header":
          SalesInvoiceHeader.GET(CustLedgerEntry."Document No.");
        DATABASE::"Sales Cr.Memo Header":
          SalesCrMemoHeader.GET(CustLedgerEntry."Document No.");
        DATABASE::"Service Invoice Header":
          ServiceInvoiceHeader.GET(CustLedgerEntry."Document No.");
        DATABASE::"Service Cr.Memo Header":
          ServiceCrMemoHeader.GET(CustLedgerEntry."Document No.");
      END;
    END;

    LOCAL PROCEDURE GetPmtCustDtldEntry@1310116(VAR DetailedCustLedgEntryPmt@1310000 : Record 379;EntryNo@1310001 : Integer);
    BEGIN
      DetailedCustLedgEntryPmt.SETRANGE("Entry Type",DetailedCustLedgEntryPmt."Entry Type"::Application);
      DetailedCustLedgEntryPmt.SETRANGE("Applied Cust. Ledger Entry No.",EntryNo);
      DetailedCustLedgEntryPmt.SETRANGE("Initial Document Type",DetailedCustLedgEntryPmt."Initial Document Type"::Payment);
      IF DetailedCustLedgEntryPmt.FINDFIRST THEN ;
    END;

    LOCAL PROCEDURE GetRelatedDocumentTableID@1310112(DetailedCustLedgEntry@1310000 : Record 379;EntrySourceCode@1310001 : Code[10]) : Integer;
    VAR
      ServiceDoc@1310002 : Boolean;
      InvoiceDoc@1310003 : Boolean;
    BEGIN
      SourceCodeSetup.GET;
      IF (SourceCodeSetup."Service Management" <> '') AND (EntrySourceCode = SourceCodeSetup."Service Management") THEN
        ServiceDoc := TRUE;

      IF DetailedCustLedgEntry."Initial Document Type" = DetailedCustLedgEntry."Initial Document Type"::Invoice THEN
        InvoiceDoc := TRUE
      ELSE
        IF DetailedCustLedgEntry."Initial Document Type" = DetailedCustLedgEntry."Initial Document Type"::Payment THEN
          IF DetailedCustLedgEntry."Document Type" = DetailedCustLedgEntry."Document Type"::Invoice THEN
            InvoiceDoc := TRUE;

      IF ServiceDoc THEN BEGIN
        IF InvoiceDoc THEN
          EXIT(DATABASE::"Service Invoice Header");
        EXIT(DATABASE::"Service Cr.Memo Header");
      END;

      IF InvoiceDoc THEN
        EXIT(DATABASE::"Sales Invoice Header");
      EXIT(DATABASE::"Sales Cr.Memo Header");
    END;

    LOCAL PROCEDURE GetRelatedDocumentData@1310129(DetailedCustLedgEntry@1310007 : Record 379;DocumentNo@1310010 : Code[20];EntrySourceCode@1310008 : Code[10];VAR TempVATAmountLine@1310000 : TEMPORARY Record 290;VAR FiscalInvoiceNumberPAC@1310001 : Text[50];VAR DocAmountInclVAT@1310009 : Decimal;VAR SubjectToTax@1310011 : Text);
    VAR
      SalesInvoiceHeader@1310028 : Record 112;
      ServiceInvoiceHeader@1310025 : Record 5992;
      SalesCrMemoHeader@1310024 : Record 114;
      ServiceCrMemoHeader@1310023 : Record 5994;
      TempDocumentHeader@1310022 : TEMPORARY Record 10002;
      TempDocumentLine@1310021 : TEMPORARY Record 10003;
      TempDocumentLineRetention@1310020 : TEMPORARY Record 10003;
      SubTotal@1310006 : Decimal;
      TotalTax@1310005 : Decimal;
      TotalRetention@1310004 : Decimal;
      TotalDiscount@1310003 : Decimal;
      TableId@1310002 : Integer;
    BEGIN
      TableId := GetRelatedDocumentTableID(DetailedCustLedgEntry,EntrySourceCode);
      TempVATAmountLine.DELETEALL;

      CASE TableId OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            SalesInvoiceHeader.GET(DocumentNo);
            CreateAbstractDocument(SalesInvoiceHeader,TempDocumentHeader,TempDocumentLine,FALSE);
            PrepareDocumentData(
              TempDocumentLine,TempVATAmountLine,TempDocumentLineRetention,TempDocumentHeader."No.",
              SubTotal,TotalTax,TotalRetention,TotalDiscount);
            FiscalInvoiceNumberPAC := SalesInvoiceHeader."Fiscal Invoice Number PAC";
            SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
            DocAmountInclVAT := SalesInvoiceHeader."Amount Including VAT";
            SubjectToTax := GetSubjectToTaxFromDocument(DATABASE::"Sales Invoice Header",SalesInvoiceHeader."No.");
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            SalesCrMemoHeader.GET(DocumentNo);
            CreateAbstractDocument(SalesCrMemoHeader,TempDocumentHeader,TempDocumentLine,FALSE);
            PrepareDocumentData(
              TempDocumentLine,TempVATAmountLine,TempDocumentLineRetention,TempDocumentHeader."No.",
              SubTotal,TotalTax,TotalRetention,TotalDiscount);
            FiscalInvoiceNumberPAC := SalesCrMemoHeader."Fiscal Invoice Number PAC";
            SalesCrMemoHeader.CALCFIELDS("Amount Including VAT");
            DocAmountInclVAT := -SalesCrMemoHeader."Amount Including VAT";
            SubjectToTax := GetSubjectToTaxFromDocument(DATABASE::"Sales Cr.Memo Header",SalesCrMemoHeader."No.");
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            ServiceInvoiceHeader.GET(DocumentNo);
            CreateAbstractDocument(ServiceInvoiceHeader,TempDocumentHeader,TempDocumentLine,FALSE);
            PrepareDocumentData(
              TempDocumentLine,TempVATAmountLine,TempDocumentLineRetention,TempDocumentHeader."No.",
              SubTotal,TotalTax,TotalRetention,TotalDiscount);
            FiscalInvoiceNumberPAC := ServiceInvoiceHeader."Fiscal Invoice Number PAC";
            ServiceInvoiceHeader.CALCFIELDS("Amount Including VAT");
            DocAmountInclVAT := ServiceInvoiceHeader."Amount Including VAT";
            SubjectToTax := GetSubjectToTaxFromDocument(DATABASE::"Service Invoice Header",ServiceInvoiceHeader."No.");
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            ServiceCrMemoHeader.GET(DocumentNo);
            CreateAbstractDocument(ServiceCrMemoHeader,TempDocumentHeader,TempDocumentLine,FALSE);
            PrepareDocumentData(
              TempDocumentLine,TempVATAmountLine,TempDocumentLineRetention,TempDocumentHeader."No.",
              SubTotal,TotalTax,TotalRetention,TotalDiscount);
            FiscalInvoiceNumberPAC := ServiceCrMemoHeader."Fiscal Invoice Number PAC";
            ServiceCrMemoHeader.CALCFIELDS("Amount Including VAT");
            DocAmountInclVAT := -ServiceCrMemoHeader."Amount Including VAT";
            SubjectToTax := GetSubjectToTaxFromDocument(DATABASE::"Service Cr.Memo Header",ServiceCrMemoHeader."No.");
          END;
      END;
    END;

    PROCEDURE GetUUIDFromOriginalPrepayment@1020011(SalesInvoiceHeader@1020000 : Record 112;VAR SalesInvoiceNumber@1020002 : Code[20]) : Text[50];
    VAR
      SalesInvoiceHeader2@1020001 : Record 112;
    BEGIN
      // First, get the common sales order number
      SalesInvoiceHeader2.RESET;
      SalesInvoiceHeader2.SETFILTER("Prepayment Order No.",'=%1',SalesInvoiceHeader."Order No.");
      IF SalesInvoiceHeader2.FINDFIRST THEN BEGIN // We have the prepayment invoice
        SalesInvoiceNumber := SalesInvoiceHeader2."No.";
        EXIT(SalesInvoiceHeader2."Fiscal Invoice Number PAC");
      END;
      EXIT('');
    END;

    LOCAL PROCEDURE GetRelationDocumentsInvoice@1310017(VAR CFDIRelationDocument@1310000 : Record 27006;DocumentHeader@1310002 : Record 10002;DocumentTableID@1310003 : Integer);
    VAR
      CFDIRelationDocumentFrom@1310001 : Record 27006;
    BEGIN
      CFDIRelationDocumentFrom.SETRANGE("Document Table ID",DocumentTableID);
      CFDIRelationDocumentFrom.SETRANGE("Document Type",0);
      CFDIRelationDocumentFrom.SETRANGE("Document No.",DocumentHeader."No.");
      CFDIRelationDocumentFrom.SETRANGE("Customer No.",DocumentHeader."Bill-to/Pay-To No.");

      IF CFDIRelationDocumentFrom.FINDSET THEN
        REPEAT
          CFDIRelationDocument := CFDIRelationDocumentFrom;
          IF CFDIRelationDocument."SAT Relation Type" = '' THEN
            CFDIRelationDocument."SAT Relation Type" := DocumentHeader."CFDI Relation";
          CFDIRelationDocument.INSERT;
        UNTIL CFDIRelationDocumentFrom.NEXT = 0;
    END;

    LOCAL PROCEDURE GetRelationDocumentsSalesCreditMemo@1310018(VAR CFDIRelationDocument@1310000 : Record 27006;SalesCrMemoHeader@1310001 : Record 114;DocumentHeader@1310003 : Record 10002);
    VAR
      SalesInvoiceHeader@1310002 : Record 112;
    BEGIN
      GetRelationDocumentsInvoice(CFDIRelationDocument,DocumentHeader,DATABASE::"Sales Cr.Memo Header");

      IF (SalesCrMemoHeader."Applies-to Doc. Type" = SalesCrMemoHeader."Applies-to Doc. Type"::Invoice) AND
         SalesInvoiceHeader.GET(SalesCrMemoHeader."Applies-to Doc. No.")
      THEN
        InsertAppliedRelationDocument(
          CFDIRelationDocument,SalesCrMemoHeader."No.",SalesInvoiceHeader."No.",SalesCrMemoHeader."CFDI Relation",
          SalesInvoiceHeader."Fiscal Invoice Number PAC");
    END;

    LOCAL PROCEDURE GetRelationDocumentsServiceCreditMemo@1310038(VAR CFDIRelationDocument@1310000 : Record 27006;ServiceCrMemoHeader@1310001 : Record 5994;DocumentHeader@1310003 : Record 10002);
    VAR
      ServiceInvoiceHeader@1310002 : Record 5992;
    BEGIN
      GetRelationDocumentsInvoice(CFDIRelationDocument,DocumentHeader,DATABASE::"Service Cr.Memo Header");

      IF (ServiceCrMemoHeader."Applies-to Doc. Type" = ServiceCrMemoHeader."Applies-to Doc. Type"::Invoice) AND
         ServiceInvoiceHeader.GET(ServiceCrMemoHeader."Applies-to Doc. No.")
      THEN
        InsertAppliedRelationDocument(
          CFDIRelationDocument,ServiceCrMemoHeader."No.",ServiceInvoiceHeader."No.",ServiceCrMemoHeader."CFDI Relation",
          ServiceInvoiceHeader."Fiscal Invoice Number PAC");
    END;

    LOCAL PROCEDURE InsertAppliedRelationDocument@1310031(VAR CFDIRelationDocument@1310000 : Record 27006;DocumentNo@1310001 : Code[20];RelatedDocumentNo@1310002 : Code[20];RelationType@1310004 : Code[10];FiscalInvoiceNumberPAC@1310003 : Text[50]);
    BEGIN
      WITH CFDIRelationDocument DO BEGIN
        SETRANGE("Fiscal Invoice Number PAC",FiscalInvoiceNumberPAC);
        IF NOT FINDFIRST THEN BEGIN
          INIT;
          "Document No." := DocumentNo;
          "Related Doc. Type" := "Related Doc. Type"::Invoice;
          "Related Doc. No." := RelatedDocumentNo;
          "SAT Relation Type" := RelationType;
          "Fiscal Invoice Number PAC" := FiscalInvoiceNumberPAC;
          INSERT;
        END;
        SETRANGE("Fiscal Invoice Number PAC");
      END;
    END;

    LOCAL PROCEDURE AddElementPago@1020114(VAR XMLNode@1000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1000003 : Text;NodeText@1000002 : Text;NameSpace@1000001 : Text;VAR CreatedXMLNode@1000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      NewChildNode@1000005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NodeName := 'pago20:' + NodeName;
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element',NodeName,NameSpace);
      IF ISNULL(NewChildNode) THEN
        EXIT(FALSE);

      IF NodeText <> '' THEN
        NewChildNode.Value := RemoveInvalidChars(NodeText);
      XMLNode.AppendChild(NewChildNode);
      CreatedXMLNode := NewChildNode;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddElementCartaPorte@1310060(VAR XMLNode@1000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1000003 : Text;NodeText@1000002 : Text;NameSpace@1000001 : Text;VAR CreatedXMLNode@1000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      NewChildNode@1000005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NodeName := 'cartaporte:' + NodeName;
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element',NodeName,NameSpace);
      IF ISNULL(NewChildNode) THEN
        EXIT(FALSE);

      IF NodeText <> '' THEN
        NewChildNode.Value := RemoveInvalidChars(NodeText);
      XMLNode.AppendChild(NewChildNode);
      CreatedXMLNode := NewChildNode;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddNodeRelacionado@1310003(VAR XMLDoc@1310000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLCurrNode@1310001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR XMLNewChild@1310002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR TempCFDIRelationDocument@1310003 : TEMPORARY Record 27006);
    VAR
      SATRelationshipType@1310005 : Record 27011;
    BEGIN
      IF TempCFDIRelationDocument.ISEMPTY THEN
        EXIT;

      IF SATRelationshipType.FINDSET THEN
        REPEAT
          TempCFDIRelationDocument.SETRANGE("SAT Relation Type",SATRelationshipType."SAT Relationship Type");

          IF  TempCFDIRelationDocument.FINDSET THEN BEGIN
            AddElementCFDI(XMLCurrNode,'CfdiRelacionados','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;
            AddAttribute(XMLDoc,XMLCurrNode,'TipoRelacion',SATRelationshipType."SAT Relationship Type");

            REPEAT
              AddElementCFDI(XMLCurrNode,'CfdiRelacionado','',DocNameSpace,XMLNewChild);
              XMLCurrNode := XMLNewChild;
              AddAttribute(XMLDoc,XMLCurrNode,'UUID',TempCFDIRelationDocument."Fiscal Invoice Number PAC");
              XMLCurrNode := XMLCurrNode.ParentNode;
            UNTIL TempCFDIRelationDocument.NEXT = 0;

            XMLCurrNode := XMLCurrNode.ParentNode;
          END;
        UNTIL SATRelationshipType.NEXT = 0;

      TempCFDIRelationDocument.SETRANGE("SAT Relation Type");
    END;

    LOCAL PROCEDURE AddStrRelacionado@1310029(VAR TempCFDIRelationDocument@1310004 : TEMPORARY Record 27006;VAR BlobManagement@1310002 : Codeunit 10146);
    VAR
      SATRelationshipType@1310000 : Record 27011;
    BEGIN
      IF TempCFDIRelationDocument.ISEMPTY THEN
        EXIT;

      IF SATRelationshipType.FINDSET THEN
        REPEAT
          TempCFDIRelationDocument.SETRANGE("SAT Relation Type",SATRelationshipType."SAT Relationship Type");

          IF TempCFDIRelationDocument.FINDSET THEN BEGIN
            BlobManagement.Write(RemoveInvalidChars(SATRelationshipType."SAT Relationship Type") + '|');
            REPEAT
              BlobManagement.Write(RemoveInvalidChars(TempCFDIRelationDocument."Fiscal Invoice Number PAC") + '|');
            UNTIL TempCFDIRelationDocument.NEXT = 0;
          END;
        UNTIL SATRelationshipType.NEXT = 0;

      TempCFDIRelationDocument.SETRANGE("SAT Relation Type");
    END;

    LOCAL PROCEDURE AddNodeImpuestoPerLine@1310045(TempDocumentLine@1310000 : TEMPORARY Record 10003;VAR TempDocumentLineRetention@1310002 : TEMPORARY Record 10003;VAR XMLDoc@1310013 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";XMLCurrNode@1310008 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";XMLNewChild@1310007 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    BEGIN
      IF GetSubjectToTaxCode(TempDocumentLine) <> '02' THEN
        EXIT;
      IF IsNonTaxableVATLine(TempDocumentLine) THEN
        EXIT;

      // Impuestos->Traslados/Retenciones
      AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;

      AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;
      AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
      AddNodeTrasladoRetentionPerLine(
        XMLDoc,XMLCurrNode,XMLNewChild,
        TempDocumentLine.Amount,TempDocumentLine."VAT %",TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount,
        IsVATExemptLine(TempDocumentLine));
      XMLCurrNode := XMLCurrNode.ParentNode; // Traslados

      TempDocumentLineRetention.SETRANGE("Retention Attached to Line No.",TempDocumentLine."Line No.");
      IF TempDocumentLineRetention.FINDSET THEN BEGIN
        AddElementCFDI(XMLCurrNode,'Retenciones','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        REPEAT
          AddElementCFDI(XMLCurrNode,'Retencion','',DocNameSpace,XMLNewChild);
          AddNodeTrasladoRetentionPerLine(
            XMLDoc,XMLCurrNode,XMLNewChild,
            TempDocumentLine.Amount,TempDocumentLineRetention."Retention VAT %",
            TempDocumentLineRetention."Unit Price/Direct Unit Cost" * TempDocumentLineRetention.Quantity,
            IsVATExemptLine(TempDocumentLineRetention));
        UNTIL TempDocumentLineRetention.NEXT = 0;
        XMLCurrNode := XMLCurrNode.ParentNode; // Retenciones
      END;

      XMLCurrNode := XMLCurrNode.ParentNode; // Impuestos
    END;

    LOCAL PROCEDURE AddNodeTrasladoRetentionPerLine@1310065(XMLDoc@1310003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";XMLCurrNode@1310001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";XMLNewChild@1310000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";BaseAmount@1310005 : Decimal;VATPct@1310007 : Decimal;VATAmount@1310008 : Decimal;IsVATExempt@1310002 : Boolean);
    BEGIN
      XMLCurrNode := XMLNewChild;

      AddAttribute(XMLDoc,XMLCurrNode,'Base',FormatAmount(BaseAmount));
      AddAttribute(XMLDoc,XMLCurrNode,'Impuesto',GetTaxCode(VATPct,VATAmount)); // Used to be IVA
      IF NOT IsVATExempt THEN BEGIN // When Sales Tax code is % then Tasa, else Exento
        AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Tasa');
        AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuota',PADSTR(FormatDecimal(VATPct / 100,6),8,'0'));
        AddAttribute(XMLDoc,XMLCurrNode,'Importe',FormatDecimalRange(VATAmount,CurrencyDecimalPlaces,6))
      END ELSE
        AddAttribute(XMLDoc,XMLCurrNode,'TipoFactor','Exento');

      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    LOCAL PROCEDURE AddStrImpuestoPerLine@1310058(TempDocumentLine@1310014 : TEMPORARY Record 10003;VAR TempDocumentLineRetention@1310013 : TEMPORARY Record 10003;VAR BlobManagement@1310015 : Codeunit 10146);
    BEGIN
      IF GetSubjectToTaxCode(TempDocumentLine) <> '02' THEN
        EXIT;
      IF IsNonTaxableVATLine(TempDocumentLine) THEN
        EXIT;

      AddStrTrasladoRetentionPerLine(
        BlobManagement,
        TempDocumentLine.Amount,TempDocumentLine."VAT %",TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount,
        IsVATExemptLine(TempDocumentLine));

      TempDocumentLineRetention.SETRANGE("Retention Attached to Line No.",TempDocumentLine."Line No.");
      IF TempDocumentLineRetention.FINDSET THEN
        REPEAT
          AddStrTrasladoRetentionPerLine(
            BlobManagement,
            TempDocumentLine.Amount,TempDocumentLineRetention."Retention VAT %",
            TempDocumentLineRetention."Unit Price/Direct Unit Cost" * TempDocumentLineRetention.Quantity,
            IsVATExemptLine(TempDocumentLineRetention));
        UNTIL TempDocumentLineRetention.NEXT = 0;
    END;

    LOCAL PROCEDURE AddStrTrasladoRetentionPerLine@1310092(VAR BlobManagement@1310015 : Codeunit 10146;BaseAmount@1310005 : Decimal;VATPct@1310002 : Decimal;VATAmount@1310001 : Decimal;IsVATExempt@1310000 : Boolean);
    BEGIN
      BlobManagement.Write(FormatAmount(BaseAmount) + '|'); // Base
      BlobManagement.Write(GetTaxCode(VATPct,VATAmount) + '|'); // Impuesto
      IF NOT IsVATExempt THEN BEGIN // When Sales Tax code is % then Tasa, else Exento
        BlobManagement.Write('Tasa' + '|'); // TipoFactor
        BlobManagement.Write(PADSTR(FormatDecimal(VATPct / 100,6),8,'0') + '|'); // TasaOCuota
        BlobManagement.Write(FormatDecimalRange(VATAmount,CurrencyDecimalPlaces,6) + '|') // Importe
      END ELSE
        BlobManagement.Write('Exento' + '|'); // TipoFactor
    END;

    LOCAL PROCEDURE AddNodeCartaPorteUbicacion@1310111(TipoUbicacion@1310004 : Text;RFCNo@1310005 : Text;LocationCode@1310003 : Code[10];LocationPrefix@1310010 : Text[2];FechaHoraSalidaLlegada@1310008 : Text;DistanciaRecorrida@1310006 : Text;ForeignTrade@1310007 : Boolean;VAR XMLDoc@1310002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";XMLCurrNode@1310001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";XMLNewChild@1310000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      Location@1310009 : Record 14;
    BEGIN
      Location.GET(LocationCode);
      AddElementCartaPorte(XMLCurrNode,'Ubicacion','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;
      AddAttribute(XMLDoc,XMLCurrNode,'TipoUbicacion',TipoUbicacion);
      IF Location."ID Ubicacion" <> 0 THEN
        AddAttribute(XMLDoc,XMLCurrNode,'IDUbicacion',LocationPrefix + FORMAT(Location."ID Ubicacion"));
      AddAttribute(XMLDoc,XMLCurrNode,'RFCRemitenteDestinatario',RFCNo);
      AddAttribute(XMLDoc,XMLCurrNode,'FechaHoraSalidaLlegada',FechaHoraSalidaLlegada);
      IF ForeignTrade THEN
        AddAttribute(XMLDoc,XMLCurrNode,'TipoEstacion','01');
      IF DistanciaRecorrida <> '' THEN
        AddAttribute(XMLDoc,XMLCurrNode,'DistanciaRecorrida',DistanciaRecorrida);

      AddNodeCartaPorteDomicilio(Location,XMLDoc,XMLCurrNode,XMLNewChild);
      XMLCurrNode := XMLCurrNode.ParentNode; // Ubicacion
    END;

    LOCAL PROCEDURE AddStrCartaPorteUbicacion@1310131(TipoUbicacion@1310004 : Text;RFCNo@1310005 : Text;LocationCode@1310003 : Code[10];LocationPrefix@1310010 : Text[2];FechaHoraSalidaLlegada@1310008 : Text;DistanciaRecorrida@1310006 : Text;ForeignTrade@1310007 : Boolean;VAR BlobManagement@1310011 : Codeunit 10146);
    VAR
      Location@1310009 : Record 14;
    BEGIN
      Location.GET(LocationCode);

      BlobManagement.Write(TipoUbicacion + '|'); // TipoUbicacion
      IF Location."ID Ubicacion" <> 0 THEN
        BlobManagement.Write(LocationPrefix + FORMAT(Location."ID Ubicacion") + '|'); // IDUbicacion
      BlobManagement.Write(RFCNo + '|'); // RFCRemitenteDestinatario
      BlobManagement.Write(FechaHoraSalidaLlegada + '|'); // FechaHoraSalidaLlegada
      IF ForeignTrade THEN
        BlobManagement.Write('01|'); // TipoEstacion
      IF DistanciaRecorrida <> '' THEN
        BlobManagement.Write(DistanciaRecorrida + '|'); // DistanciaRecorrida

      AddStrCartaPorteDomicilio(Location,BlobManagement);
    END;

    LOCAL PROCEDURE AddNodeCartaPorteDomicilio@1310061(Location@1310004 : Record 14;VAR XMLDoc@1310002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";XMLCurrNode@1310001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";XMLNewChild@1310000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode");
    VAR
      SATSuburb@1310003 : Record 27029;
      SATUtilities@1310006 : Codeunit 27030;
    BEGIN
      SATSuburb.GET(Location."SAT Suburb ID");
      AddElementCartaPorte(XMLCurrNode,'Domicilio','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;
      AddAttribute(XMLDoc,XMLCurrNode,'Calle',Location.Address);
      AddAttribute(XMLDoc,XMLCurrNode,'Localidad',Location."SAT Locality Code");
      AddAttribute(XMLDoc,XMLCurrNode,'Municipio',Location."SAT Municipality Code");
      AddAttribute(XMLDoc,XMLCurrNode,'Estado',Location."SAT State Code");
      AddAttribute(XMLDoc,XMLCurrNode,'Pais',SATUtilities.GetSATCountryCode(Location."Country/Region Code"));
      AddAttribute(XMLDoc,XMLCurrNode,'CodigoPostal',SATSuburb."Postal Code");
      AddAttribute(XMLDoc,XMLCurrNode,'Colonia',SATSuburb."Suburb Code");
      XMLCurrNode := XMLCurrNode.ParentNode; // Domicilio
    END;

    LOCAL PROCEDURE AddStrCartaPorteDomicilio@1310073(Location@1310004 : Record 14;VAR BlobManagement@1310000 : Codeunit 10146);
    VAR
      SATSuburb@1310001 : Record 27029;
      SATUtilities@1310002 : Codeunit 27030;
    BEGIN
      SATSuburb.GET(Location."SAT Suburb ID");
      BlobManagement.Write(Location.Address + '|'); // Calle
      BlobManagement.Write(SATSuburb."Suburb Code" + '|'); // Colonia
      BlobManagement.Write(Location."SAT Locality Code" + '|'); // Localidad
      BlobManagement.Write(Location."SAT Municipality Code" + '|'); // Municipio
      BlobManagement.Write(Location."SAT State Code" + '|'); // Estado
      BlobManagement.Write(SATUtilities.GetSATCountryCode(Location."Country/Region Code") + '|'); // Pais
      BlobManagement.Write(SATSuburb."Postal Code" + '|'); // CodigoPostal
    END;

    LOCAL PROCEDURE AddNodePagoImpuestosDR@1310152(VAR XMLDoc@1310002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";XMLCurrNode@1310001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";XMLNewChild@1310000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR TempVATAmountLine@1310003 : TEMPORARY Record 290);
    BEGIN
      IF TempVATAmountLine.ISEMPTY THEN
        EXIT;

      AddElementPago(XMLCurrNode,'ImpuestosDR','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;
      AddElementPago(XMLCurrNode,'TrasladosDR','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;

      IF TempVATAmountLine.FINDFIRST THEN
        REPEAT
          AddElementPago(XMLCurrNode,'TrasladoDR','',DocNameSpace,XMLNewChild);
          XMLCurrNode := XMLNewChild;
          IF TempVATAmountLine."Tax Category" = GetTaxCategoryExempt THEN BEGIN
            AddAttribute(XMLDoc,XMLCurrNode,'BaseDR',FormatDecimal(TempVATAmountLine."VAT Base",2));
            AddAttribute(XMLDoc,XMLCurrNode,'ImpuestoDR',GetTaxCode(TempVATAmountLine."VAT %",TempVATAmountLine."VAT Amount"));
            AddAttribute(XMLDoc,XMLCurrNode,'TipoFactorDR','Exento');
          END ELSE BEGIN
            AddAttribute(XMLDoc,XMLCurrNode,'BaseDR',FormatDecimal(TempVATAmountLine."VAT Base",2));
            AddAttribute(XMLDoc,XMLCurrNode,'ImpuestoDR',GetTaxCode(TempVATAmountLine."VAT %",TempVATAmountLine."VAT Amount"));
            AddAttribute(XMLDoc,XMLCurrNode,'TipoFactorDR','Tasa');
            AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuotaDR',PADSTR(FormatAmount(TempVATAmountLine."VAT %" / 100),8,'0'));
            AddAttribute(XMLDoc,XMLCurrNode,'ImporteDR',FormatDecimal(TempVATAmountLine."VAT Amount",2));
          END;
          XMLCurrNode := XMLCurrNode.ParentNode;
        UNTIL TempVATAmountLine.NEXT = 0;

      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    LOCAL PROCEDURE AddStrPagoImpuestosDR@1310157(VAR TempVATAmountLine@1310003 : TEMPORARY Record 290;VAR BlobManagement@1310004 : Codeunit 10146);
    BEGIN
      IF TempVATAmountLine.ISEMPTY THEN
        EXIT;

      IF TempVATAmountLine.FINDSET THEN
        REPEAT
          IF TempVATAmountLine."Tax Category" = GetTaxCategoryExempt THEN BEGIN
            BlobManagement.Write(FormatDecimal(TempVATAmountLine."VAT Base",2) + '|'); // BaseDR
            BlobManagement.Write(GetTaxCode(TempVATAmountLine."VAT %",TempVATAmountLine."VAT Amount") + '|'); // ImpuestoDR
            BlobManagement.Write('Exento' + '|'); // TipoFactorDR
          END ELSE BEGIN
            BlobManagement.Write(FormatDecimal(TempVATAmountLine."VAT Base",2) + '|'); // BaseDR
            BlobManagement.Write(GetTaxCode(TempVATAmountLine."VAT %",TempVATAmountLine."VAT Amount") + '|'); // ImpuestoDR
            BlobManagement.Write('Tasa' + '|'); // TipoFactorDR
            BlobManagement.Write(PADSTR(FormatAmount(TempVATAmountLine."VAT %" / 100),8,'0') + '|'); // TasaOCuota
            BlobManagement.Write(FormatDecimal(TempVATAmountLine."VAT Amount",2) + '|'); // ImporteDR
          END;
        UNTIL TempVATAmountLine.NEXT = 0;
    END;

    LOCAL PROCEDURE AddNodePagoImpuestosP@1310122(VAR XMLDoc@1310002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";XMLCurrNode@1310001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";XMLNewChild@1310000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR TempVATAmountLinePmt@1310003 : TEMPORARY Record 290;CurrencyCode@1310004 : Code[10]);
    VAR
      Decimals@1310005 : Integer;
    BEGIN
      IF TempVATAmountLinePmt.ISEMPTY THEN
        EXIT;

      IF ConvertCurrency(CurrencyCode) = GLSetup."LCY Code" THEN
        Decimals := 2
      ELSE
        Decimals := 6;

      AddElementPago(XMLCurrNode,'ImpuestosP','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;
      AddElementPago(XMLCurrNode,'TrasladosP','',DocNameSpace,XMLNewChild);
      XMLCurrNode := XMLNewChild;

      IF TempVATAmountLinePmt.FINDFIRST THEN
        REPEAT
          AddElementPago(XMLCurrNode,'TrasladoP','',DocNameSpace,XMLNewChild);
          XMLCurrNode := XMLNewChild;

          IF TempVATAmountLinePmt."Tax Category" = GetTaxCategoryExempt THEN BEGIN
            AddAttribute(XMLDoc,XMLCurrNode,'BaseP',FormatDecimal(ROUND(TempVATAmountLinePmt."VAT Base",0.000001,'<'),Decimals));
            AddAttribute(XMLDoc,XMLCurrNode,'ImpuestoP',GetTaxCode(TempVATAmountLinePmt."VAT %",TempVATAmountLinePmt."VAT Amount"));
            AddAttribute(XMLDoc,XMLCurrNode,'TipoFactorP','Exento');
          END ELSE BEGIN
            AddAttribute(XMLDoc,XMLCurrNode,'BaseP',FormatDecimal(ROUND(TempVATAmountLinePmt."VAT Base",0.000001,'<'),Decimals));
            AddAttribute(XMLDoc,XMLCurrNode,'ImpuestoP',GetTaxCode(TempVATAmountLinePmt."VAT %",TempVATAmountLinePmt."VAT Amount"));
            AddAttribute(XMLDoc,XMLCurrNode,'TipoFactorP','Tasa');
            AddAttribute(XMLDoc,XMLCurrNode,'TasaOCuotaP',PADSTR(FormatAmount(TempVATAmountLinePmt."VAT %" / 100),8,'0'));
            AddAttribute(
              XMLDoc,XMLCurrNode,'ImporteP',FormatDecimal(ROUND(TempVATAmountLinePmt."VAT Amount",0.000001,'<'),Decimals));
          END;
          XMLCurrNode := XMLCurrNode.ParentNode;
        UNTIL TempVATAmountLinePmt.NEXT = 0;

      XMLCurrNode := XMLCurrNode.ParentNode;
      XMLCurrNode := XMLCurrNode.ParentNode;
    END;

    LOCAL PROCEDURE AddStrPagoImpuestosP@1310121(VAR TempVATAmountLinePmt@1310003 : TEMPORARY Record 290;VAR BlobManagement@1310004 : Codeunit 10146;CurrencyCode@1310001 : Code[10]);
    VAR
      Decimals@1310000 : Integer;
    BEGIN
      IF TempVATAmountLinePmt.ISEMPTY THEN
        EXIT;

      IF ConvertCurrency(CurrencyCode) = GLSetup."LCY Code" THEN
        Decimals := 2
      ELSE
        Decimals := 6;

      IF TempVATAmountLinePmt.FINDFIRST THEN
        REPEAT
          IF TempVATAmountLinePmt."Tax Category" = GetTaxCategoryExempt THEN BEGIN
            BlobManagement.Write(FormatDecimal(ROUND(TempVATAmountLinePmt."VAT Base",0.000001,'<'),Decimals) + '|'); // BaseP
            BlobManagement.Write(GetTaxCode(TempVATAmountLinePmt."VAT %",TempVATAmountLinePmt."VAT Amount") + '|'); // ImpuestoP
            BlobManagement.Write('Exento' + '|'); // TipoFactorP
          END ELSE BEGIN
            BlobManagement.Write(FormatDecimal(ROUND(TempVATAmountLinePmt."VAT Base",0.000001,'<'),Decimals) + '|'); // BaseP
            BlobManagement.Write(GetTaxCode(TempVATAmountLinePmt."VAT %",TempVATAmountLinePmt."VAT Amount") + '|'); // ImpuestoP
            BlobManagement.Write('Tasa' + '|'); // TipoFactorP
            BlobManagement.Write(PADSTR(FormatAmount(TempVATAmountLinePmt."VAT %" / 100),8,'0') + '|'); // TasaOCuota
            BlobManagement.Write(FormatDecimal(ROUND(TempVATAmountLinePmt."VAT Amount",0.000001,'<'),Decimals) + '|'); // ImporteP
          END;
        UNTIL TempVATAmountLinePmt.NEXT = 0;
    END;

    LOCAL PROCEDURE AddNodePagoTotales@1310120(VAR XMLDoc@1310003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";XMLCurrNode@1310002 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";VAR TempVATAmountLineTotal@1310000 : TEMPORARY Record 290);
    BEGIN
      IF TempVATAmountLineTotal.FINDSET THEN
        REPEAT
          IF TempVATAmountLineTotal.Positive AND (TempVATAmountLineTotal."VAT %" = 16) THEN BEGIN
            AddAttribute(XMLDoc,XMLCurrNode,'TotalTrasladosBaseIVA16',FormatDecimal(TempVATAmountLineTotal."VAT Base",2));
            AddAttribute(XMLDoc,XMLCurrNode,'TotalTrasladosImpuestoIVA16',FormatDecimal(TempVATAmountLineTotal."VAT Amount",2));
          END;
          IF TempVATAmountLineTotal.Positive AND (TempVATAmountLineTotal."VAT %" = 8) THEN BEGIN
            AddAttribute(XMLDoc,XMLCurrNode,'TotalTrasladosBaseIVA8',FormatDecimal(TempVATAmountLineTotal."VAT Base",2));
            AddAttribute(XMLDoc,XMLCurrNode,'TotalTrasladosImpuestoIVA8',FormatDecimal(TempVATAmountLineTotal."VAT Amount",2));
          END;
          IF TempVATAmountLineTotal.Positive AND (TempVATAmountLineTotal."VAT %" = 0) THEN
            IF TempVATAmountLineTotal."Tax Category" = GetTaxCategoryExempt THEN
              AddAttribute(XMLDoc,XMLCurrNode,'TotalTrasladosBaseIVAExento',FormatDecimal(TempVATAmountLineTotal."VAT Base",2))
            ELSE BEGIN
              AddAttribute(XMLDoc,XMLCurrNode,'TotalTrasladosBaseIVA0',FormatDecimal(TempVATAmountLineTotal."VAT Base",2));
              AddAttribute(XMLDoc,XMLCurrNode,'TotalTrasladosImpuestoIVA0',FormatDecimal(TempVATAmountLineTotal."VAT Amount",2));
            END;
        UNTIL TempVATAmountLineTotal.NEXT = 0;
    END;

    LOCAL PROCEDURE AddStrPagoTotales@1310123(VAR TempVATAmountLineTotal@1310001 : TEMPORARY Record 290;VAR BlobManagement@1310000 : Codeunit 10146);
    BEGIN
      IF TempVATAmountLineTotal.ISEMPTY THEN
        EXIT;

      TempVATAmountLineTotal.SETRANGE(Positive,TRUE);
      TempVATAmountLineTotal.SETRANGE("VAT %",16);
      IF TempVATAmountLineTotal.FINDFIRST THEN BEGIN
        BlobManagement.Write(FormatDecimal(TempVATAmountLineTotal."VAT Base",2) + '|'); // TotalTrasladosBaseIVA16
        BlobManagement.Write(FormatDecimal(TempVATAmountLineTotal."VAT Amount",2) + '|'); // TotalTrasladosImpuestoIVA16
      END;
      TempVATAmountLineTotal.SETRANGE("VAT %",8);
      IF TempVATAmountLineTotal.FINDFIRST THEN BEGIN
        BlobManagement.Write(FormatDecimal(TempVATAmountLineTotal."VAT Base",2) + '|'); // TotalTrasladosBaseIVA8
        BlobManagement.Write(FormatDecimal(TempVATAmountLineTotal."VAT Amount",2) + '|'); // TotalTrasladosImpuestoIVA8
      END;
      TempVATAmountLineTotal.SETRANGE("VAT %",0);
      TempVATAmountLineTotal.SETRANGE("Tax Category",'');
      IF TempVATAmountLineTotal.FINDFIRST THEN BEGIN
        BlobManagement.Write(FormatDecimal(TempVATAmountLineTotal."VAT Base",2) + '|'); // TotalTrasladosBaseIVA0
        BlobManagement.Write(FormatDecimal(TempVATAmountLineTotal."VAT Amount",2) + '|'); // TotalTrasladosImpuestoIVA0
      END;
      TempVATAmountLineTotal.SETRANGE("Tax Category",GetTaxCategoryExempt);
      IF TempVATAmountLineTotal.FINDFIRST THEN
        BlobManagement.Write(FormatDecimal(TempVATAmountLineTotal."VAT Base",2) + '|'); // Exento
      TempVATAmountLineTotal.RESET;
    END;

    LOCAL PROCEDURE IsInvoicePrepaymentSettle@1020070(InvoiceNumber@1020000 : Code[20];VAR AdvanceAmount@1020002 : Decimal) : Boolean;
    VAR
      SalesInvoiceLine@1020001 : Record 113;
    BEGIN
      SalesInvoiceLine.RESET;
      SalesInvoiceLine.SETFILTER("Document No.",'=%1',InvoiceNumber);
      IF SalesInvoiceLine.FINDSET THEN
        REPEAT
          IF SalesInvoiceLine."Prepayment Line" THEN BEGIN
            AdvanceAmount := SalesInvoiceLine."Amount Including VAT";
            EXIT(TRUE);
          END;
        UNTIL SalesInvoiceLine.NEXT = 0;
      EXIT(FALSE);
    END;

    LOCAL PROCEDURE MapServiceTypeToTempDocType@1020025(Type@1020000 : ' ,Item,Resource,Cost,G/L Account') : Integer;
    VAR
      TrueType@1020001 : ' ,G/L Account,Item,Resource,Fixed Asset,Charge (Item)';
    BEGIN
      CASE Type OF
        Type::Item:
          EXIT(TrueType::Item);
        Type::Resource:
          EXIT(TrueType::Resource);
        Type::"G/L Account":
          EXIT(TrueType::"G/L Account");
        ELSE
          EXIT(TrueType::" ");
      END;
    END;

    LOCAL PROCEDURE GetAdvanceAmountFromSettledInvoice@1020093(SalesInvoiceHeader@1020000 : Record 112) : Decimal;
    VAR
      SalesInvoiceLine@1020001 : Record 113;
    BEGIN
      SalesInvoiceLine.RESET;
      SalesInvoiceLine.SETRANGE("Document No.",SalesInvoiceHeader."No.");
      SalesInvoiceLine.SETFILTER("Prepayment Line",'=1');
      IF SalesInvoiceLine.FINDFIRST THEN
        EXIT(ABS(SalesInvoiceLine."Amount Including VAT"));
    END;

    LOCAL PROCEDURE GetCurrencyDecimalPlaces@1020057(CurrencyCode@1020000 : Code[10]) : Integer;
    BEGIN
      CASE CurrencyCode OF
        'CLF':
          EXIT(4);
        'BHD','IQD','JOD','KWD','LYD','OMR','TND':
          EXIT(3);
        'BIF','BYR','CLP','DJF','GNF','ISK','JPY','KMF','KRW','PYG','RWF',
        'UGX','UYI','VND','VUV','XAF','XAG','XAU','XBA','XBB','XBC','XBD',
        'XDR','XOF','XPD','XPF','XPT','XSU','XTS','XUA','XXX':
          EXIT(0);
        ELSE
          EXIT(2);
      END;
    END;

    LOCAL PROCEDURE GetSATPostalCode@1310094(LocationCode@1310001 : Code[10];PostCode@1310003 : Code[20]) : Code[20];
    VAR
      Location@1310000 : Record 14;
    BEGIN
      IF Location.GET(LocationCode) THEN
        EXIT(Location.GetSATPostalCode);

      EXIT(PostCode);
    END;

    LOCAL PROCEDURE GetTaxPercentage@1310002(Amount@1310000 : Decimal;Tax@1310001 : Decimal) : Decimal;
    BEGIN
      EXIT(ROUND(Tax / Amount,0.01,'=') * 100);
    END;

    LOCAL PROCEDURE GetTaxCode@1310056(VATPct@1310000 : Decimal;VATAmount@1310001 : Decimal) TaxCode : Code[10];
    VAR
      TaxType@1310003 : 'Translado,Retencion';
    BEGIN
      TaxCode := '002';
      IF VATPct <> 0 THEN
        IF VATAmount >= 0 THEN
          TaxCode := TaxCodeFromTaxRate(VATPct / 100,TaxType::Translado)
        ELSE
          TaxCode := TaxCodeFromTaxRate(VATPct / 100,TaxType::Retencion);
    END;

    LOCAL PROCEDURE GetSubjectToTaxFromDocument@1310106(TableID@1310000 : Integer;DocumentNo@1310001 : Code[20]) : Text;
    VAR
      SalesInvoiceLine@1310002 : Record 113;
      SalesCrMemoLine@1310003 : Record 115;
      ServiceInvoiceLine@1310004 : Record 5993;
      ServiceCrMemoLine@1310005 : Record 5995;
      DocumentLine@1310006 : Record 10003;
    BEGIN
      CASE TableID OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
            SalesInvoiceLine.FINDFIRST;
            DocumentLine.TRANSFERFIELDS(SalesInvoiceLine);
            EXIT(GetSubjectToTaxCode(DocumentLine));
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            SalesCrMemoLine.SETRANGE("Document No.",DocumentNo);
            SalesCrMemoLine.FINDFIRST;
            DocumentLine.TRANSFERFIELDS(SalesCrMemoLine);
            EXIT(GetSubjectToTaxCode(DocumentLine));
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            ServiceInvoiceLine.SETRANGE("Document No.",DocumentNo);
            ServiceInvoiceLine.FINDFIRST;
            DocumentLine.TRANSFERFIELDS(ServiceInvoiceLine);
            EXIT(GetSubjectToTaxCode(DocumentLine));
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            ServiceCrMemoLine.SETRANGE("Document No.",DocumentNo);
            ServiceCrMemoLine.FINDFIRST;
            DocumentLine.TRANSFERFIELDS(ServiceCrMemoLine);
            EXIT(GetSubjectToTaxCode(DocumentLine));
          END;
      END;
    END;

    LOCAL PROCEDURE GetSubjectToTaxCode@1310099(DocumentLine@1310000 : Record 10003) : Text;
    VAR
      VATPostingSetup@1310001 : Record 325;
    BEGIN
      IF NOT VATPostingSetup.GET(DocumentLine."VAT Bus. Posting Group",DocumentLine."VAT Prod. Posting Group") THEN
        EXIT('01');

      IF VATPostingSetup."CFDI Subject to Tax" <> '' THEN
        EXIT(VATPostingSetup."CFDI Subject to Tax");

      IF VATPostingSetup."CFDI Non-Taxable" OR VATPostingSetup."CFDI VAT Exemption" THEN
        EXIT('01');

      EXIT('02');
    END;

    LOCAL PROCEDURE GetTransferRFCNo@1310041() : Code[13];
    BEGIN
      EXIT('XAXX010101000');
    END;

    LOCAL PROCEDURE GetTaxCategoryExempt@1310109() : Code[10];
    BEGIN
      EXIT('E');
    END;

    [EventSubscriber(Table,1400,OnRegisterServiceConnection)]
    PROCEDURE HandleMXElectronicInvoicingRegisterServiceConnection@1170000002(VAR ServiceConnection@1170000000 : Record 1400);
    VAR
      MXElectronicInvoicingSetup@1170000001 : Record 10004;
      RecRef@1170000002 : RecordRef;
    BEGIN
      CompanyInfo.GET;
      IF CompanyInfo."Country/Region Code" <> 'MX' THEN
        EXIT;
      SetupService;
      MXElectronicInvoicingSetup.FINDFIRST;

      RecRef.GETTABLE(MXElectronicInvoicingSetup);

      IF MXElectronicInvoicingSetup.Enabled THEN
        ServiceConnection.Status := ServiceConnection.Status::Enabled
      ELSE
        ServiceConnection.Status := ServiceConnection.Status::Disabled;

      WITH MXElectronicInvoicingSetup DO
        ServiceConnection.InsertServiceConnection(
          ServiceConnection,RecRef.RECORDID,MXElectronicInvoicingLbl,'',PAGE::"MX Electronic Invoice Setup");
    END;

    PROCEDURE SetupService@1170000003();
    VAR
      MXElectronicInvoicingSetup@1170000000 : Record 10004;
    BEGIN
      IF NOT MXElectronicInvoicingSetup.FINDFIRST THEN
        InitServiceSetup;
    END;

    LOCAL PROCEDURE InitServiceSetup@1170000004();
    VAR
      MXElectronicInvoicingSetup@1170000000 : Record 10004;
    BEGIN
      MXElectronicInvoicingSetup.INIT;
      MXElectronicInvoicingSetup.Enabled := FALSE;
      MXElectronicInvoicingSetup.INSERT(TRUE);
    END;

    [TryFunction]
    LOCAL PROCEDURE SignDataWithCert@1310001(VAR DotNet_ISignatureProvider@1310000 : Codeunit 10149;VAR SignedString@1310002 : Text;OriginalString@1310001 : Text;Certificate@1310003 : Text;DotNet_SecureString@1310004 : Codeunit 3044);
    BEGIN
      SignedString := DotNet_ISignatureProvider.SignDataWithCertificate(OriginalString,Certificate,DotNet_SecureString);
    END;

    PROCEDURE OpenAssistedSetup@1310000(MissingSMTPNotification@1310000 : Notification);
    BEGIN
      PAGE.RUN(PAGE::"Email Setup Wizard");
    END;

    PROCEDURE IsPACEnvironmentEnabled@1310009() : Boolean;
    BEGIN
      GetGLSetupOnce;
      EXIT(GLSetup."PAC Environment" <> GLSetup."PAC Environment"::Disabled);
    END;

    LOCAL PROCEDURE IsHazardousMaterialMandatory@1310054(SATClassificationCode@1310000 : Code[10]) : Boolean;
    VAR
      SATClassification@1310001 : Record 27010;
    BEGIN
      IF NOT SATClassification.GET(SATClassificationCode) THEN
        EXIT(FALSE);

      EXIT(SATClassification."Hazardous Material Mandatory");
    END;

    PROCEDURE InsertSalesInvoiceCFDIRelations@1310008(SalesHeader@1310001 : Record 36;DocumentNo@1310000 : Code[20]);
    BEGIN
      InsertSalesCFDIRelations(SalesHeader,DocumentNo,DATABASE::"Sales Invoice Header");
    END;

    PROCEDURE InsertSalesCreditMemoCFDIRelations@1310015(SalesHeader@1310001 : Record 36;DocumentNo@1310000 : Code[20]);
    BEGIN
      InsertSalesCFDIRelations(SalesHeader,DocumentNo,DATABASE::"Sales Cr.Memo Header");
    END;

    PROCEDURE InsertSalesShipmentCFDITransportOperators@1310066(SalesHeader@1310001 : Record 36;DocumentNo@1310000 : Code[20]);
    BEGIN
      CopyInsertCFDITransportOperators(
        DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",
        DATABASE::"Sales Shipment Header",DocumentNo);
    END;

    PROCEDURE InsertTransferShipmentCFDITransportOperators@1310072(TransferHeader@1310001 : Record 5740;DocumentNo@1310000 : Code[20]);
    BEGIN
      CopyInsertCFDITransportOperators(
        DATABASE::"Transfer Header",0,TransferHeader."No.",
        DATABASE::"Transfer Shipment Header",DocumentNo);
    END;

    LOCAL PROCEDURE InsertSalesCFDIRelations@1310030(SalesHeader@1310001 : Record 36;DocumentNo@1310000 : Code[20];TableID@1310002 : Integer);
    BEGIN
      CopyInsertCFDIRelations(
        DATABASE::"Sales Header",SalesHeader."Document Type",SalesHeader."No.",TableID,DocumentNo,FALSE);
    END;

    PROCEDURE DeleteCFDIRelationsAfterPosting@1310007(SalesHeader@1310000 : Record 36);
    VAR
      CFDIRelationDocument@1310004 : Record 27006;
    BEGIN
      CFDIRelationDocument.SETRANGE("Document Table ID",DATABASE::"Sales Header");
      CFDIRelationDocument.SETRANGE("Document Type",SalesHeader."Document Type");
      CFDIRelationDocument.SETRANGE("Document No.",SalesHeader."No.");
      CFDIRelationDocument.SETRANGE("Customer No.",SalesHeader."Bill-to Customer No.");
      CFDIRelationDocument.DELETEALL;
    END;

    PROCEDURE DeleteCFDITransportOperatorsAfterPosting@1310076(DocumentTableID@1310000 : Integer;DocumentType@1310001 : Integer;DocumentNo@1310002 : Code[20]);
    VAR
      CFDITransportOperator@1310004 : Record 27007;
    BEGIN
      CFDITransportOperator.SETRANGE("Document Table ID",DocumentTableID);
      CFDITransportOperator.SETRANGE("Document Type",DocumentType);
      CFDITransportOperator.SETRANGE("Document No.",DocumentNo);
      CFDITransportOperator.DELETEALL;
    END;

    PROCEDURE InsertServiceInvoiceCFDIRelations@1310006(ServiceHeader@1310000 : Record 5900;DocumentNo@1310002 : Code[20]);
    BEGIN
      InsertServiceCFDIRelations(ServiceHeader,DocumentNo,DATABASE::"Service Invoice Header");
    END;

    PROCEDURE InsertServiceCreditMemoCFDIRelations@1310024(ServiceHeader@1310000 : Record 5900;DocumentNo@1310002 : Code[20]);
    BEGIN
      InsertServiceCFDIRelations(ServiceHeader,DocumentNo,DATABASE::"Service Cr.Memo Header");
    END;

    PROCEDURE InsertServiceCFDIRelations@1310040(ServiceHeader@1310000 : Record 5900;DocumentNo@1310002 : Code[20];TableID@1310001 : Integer);
    BEGIN
      CopyInsertCFDIRelations(
        DATABASE::"Service Header",ServiceHeader."Document Type",ServiceHeader."No.",TableID,DocumentNo,TRUE);
    END;

    LOCAL PROCEDURE InsertTempVATAmountLine@1310138(VAR TempVATAmountLine@1310001 : TEMPORARY Record 290;TempDocumentLine@1310000 : TEMPORARY Record 10003);
    VAR
      VATPostingSetup@1310002 : Record 325;
      VATIdentifier@1310003 : Code[20];
    BEGIN
      IF TempDocumentLine.Type = TempDocumentLine.Type::" " THEN
        EXIT;

      VATPostingSetup.GET(TempDocumentLine."VAT Bus. Posting Group",TempDocumentLine."VAT Prod. Posting Group");
      IF GetSubjectToTaxCode(TempDocumentLine) <> '02' THEN
        EXIT;

      IF TempDocumentLine."Retention Attached to Line No." = 0 THEN
        VATIdentifier := VATPostingSetup."VAT Identifier"
      ELSE
        VATIdentifier := COPYSTR(FORMAT(TempDocumentLine."Retention VAT %"),1,MAXSTRLEN(TempVATAmountLine."VAT Identifier"));
      IF NOT TempVATAmountLine.GET(
           VATIdentifier,VATPostingSetup."VAT Calculation Type",'','',FALSE,TempDocumentLine.Amount > 0)
      THEN BEGIN
        TempVATAmountLine.INIT;
        TempVATAmountLine."VAT Identifier" := VATIdentifier;
        TempVATAmountLine."VAT Calculation Type" := VATPostingSetup."VAT Calculation Type";
        TempVATAmountLine.Positive := TempDocumentLine.Amount > 0;
        TempVATAmountLine.INSERT;
      END;

      IF VATPostingSetup."CFDI VAT Exemption" THEN
        TempVATAmountLine."Tax Category" := GetTaxCategoryExempt;
      IF TempDocumentLine."Retention Attached to Line No." = 0 THEN BEGIN
        TempVATAmountLine."Amount Including VAT" += TempDocumentLine."Amount Including VAT";
        TempVATAmountLine."VAT %" := TempDocumentLine."VAT %";
        TempVATAmountLine."VAT Amount" += TempDocumentLine."Amount Including VAT" - TempDocumentLine.Amount;
        TempVATAmountLine."VAT Base" += TempDocumentLine.Amount;
        TempVATAmountLine.MODIFY;
      END ELSE BEGIN
        TempVATAmountLine."VAT %" := TempDocumentLine."Retention VAT %";
        TempVATAmountLine."VAT Amount" += TempDocumentLine.Amount;
        TempVATAmountLine.MODIFY;
      END;
    END;

    LOCAL PROCEDURE InsertTempVATAmountLinePmt@1310117(VAR TempVATAmountLinePmt@1310001 : TEMPORARY Record 290;VAR TempVATAmountLine@1310000 : TEMPORARY Record 290;CurrencyFactor@1310002 : Decimal);
    BEGIN
      IF NOT TempVATAmountLine.FINDSET THEN
        EXIT;

      REPEAT
        IF NOT TempVATAmountLinePmt.GET(
             TempVATAmountLine."VAT Identifier",TempVATAmountLine."VAT Calculation Type",
             TempVATAmountLine."Tax Group Code",TempVATAmountLine."Tax Group Code",
             TempVATAmountLine."Use Tax",TempVATAmountLine.Positive)
        THEN BEGIN
          TempVATAmountLinePmt := TempVATAmountLine;
          TempVATAmountLinePmt."VAT Base" := 0;
          TempVATAmountLinePmt."VAT Amount" := 0;
          TempVATAmountLinePmt."Amount Including VAT" := 0;
          TempVATAmountLinePmt.INSERT;
        END;
        TempVATAmountLinePmt."VAT Base" += TempVATAmountLine."VAT Base" / CurrencyFactor;
        TempVATAmountLinePmt."VAT Amount" += TempVATAmountLine."VAT Amount" / CurrencyFactor;
        TempVATAmountLinePmt."Amount Including VAT" += TempVATAmountLine."Amount Including VAT" / CurrencyFactor;
        TempVATAmountLinePmt.MODIFY;
      UNTIL TempVATAmountLine.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertTempVATAmountLinePmtTotals@1310125(VAR TempVATAmountLineTotal@1310001 : TEMPORARY Record 290;VAR TempVATAmountLine@1310000 : TEMPORARY Record 290;CurrencyFactor@1310002 : Decimal);
    BEGIN
      IF NOT TempVATAmountLine.FINDSET THEN
        EXIT;

      REPEAT
        IF NOT TempVATAmountLineTotal.GET(
             TempVATAmountLine."VAT Identifier",TempVATAmountLine."VAT Calculation Type",
             TempVATAmountLine."Tax Group Code",TempVATAmountLine."Tax Group Code",
             TempVATAmountLine."Use Tax",TempVATAmountLine.Positive)
        THEN BEGIN
          TempVATAmountLineTotal := TempVATAmountLine;
          TempVATAmountLineTotal."VAT Base" := 0;
          TempVATAmountLineTotal."VAT Amount" := 0;
          TempVATAmountLineTotal."Amount Including VAT" := 0;
          TempVATAmountLineTotal.INSERT;
        END;
        TempVATAmountLineTotal."VAT Base" += ROUND(TempVATAmountLine."VAT Base") / CurrencyFactor;
        TempVATAmountLineTotal."VAT Amount" += ROUND(TempVATAmountLine."VAT Amount") / CurrencyFactor;
        TempVATAmountLineTotal."Amount Including VAT" += ROUND(TempVATAmountLine."Amount Including VAT") / CurrencyFactor;
        TempVATAmountLineTotal.MODIFY;
      UNTIL TempVATAmountLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CopyInsertCFDIRelations@1310025(FromTableID@1310000 : Integer;FromDocumentType@1310001 : Integer;FromDocumentNo@1310002 : Code[20];ToTableID@1310003 : Integer;ToDocumentNo@1310004 : Code[20];DeleteRelations@1310007 : Boolean);
    VAR
      CFDIRelationDocumentFrom@1310005 : Record 27006;
      CFDIRelationDocument@1310006 : Record 27006;
    BEGIN
      IF ToDocumentNo = '' THEN
        EXIT;

      CFDIRelationDocumentFrom.SETRANGE("Document Table ID",FromTableID);
      CFDIRelationDocumentFrom.SETRANGE("Document Type",FromDocumentType);
      CFDIRelationDocumentFrom.SETRANGE("Document No.",FromDocumentNo);
      IF NOT CFDIRelationDocumentFrom.FINDSET THEN
        EXIT;

      REPEAT
        CFDIRelationDocument := CFDIRelationDocumentFrom;
        CFDIRelationDocument."Document Table ID" := ToTableID;
        CFDIRelationDocument."Document Type" := 0;
        CFDIRelationDocument."Document No." := ToDocumentNo;
        CFDIRelationDocument.INSERT;
      UNTIL CFDIRelationDocumentFrom.NEXT = 0;

      IF DeleteRelations THEN
        CFDIRelationDocumentFrom.DELETEALL;
    END;

    LOCAL PROCEDURE CopyInsertCFDITransportOperators@1310051(FromTableID@1310000 : Integer;FromDocumentType@1310001 : Option;FromDocumentNo@1310002 : Code[20];ToTableID@1310003 : Integer;ToDocumentNo@1310004 : Code[20]);
    VAR
      CFDITransportOperatorFrom@1310005 : Record 27007;
      CFDITransportOperator@1310006 : Record 27007;
    BEGIN
      IF ToDocumentNo = '' THEN
        EXIT;

      CFDITransportOperatorFrom.SETRANGE("Document Table ID",FromTableID);
      CFDITransportOperatorFrom.SETRANGE("Document Type",FromDocumentType);
      CFDITransportOperatorFrom.SETRANGE("Document No.",FromDocumentNo);
      IF NOT CFDITransportOperatorFrom.FINDSET THEN
        EXIT;

      REPEAT
        CFDITransportOperator := CFDITransportOperatorFrom;
        CFDITransportOperator."Document Table ID" := ToTableID;
        CFDITransportOperator."Document Type" := 0;
        CFDITransportOperator."Document No." := ToDocumentNo;
        CFDITransportOperator.INSERT;
      UNTIL CFDITransportOperatorFrom.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckSalesDocument@1310034(DocumentVariant@1310002 : Variant;TempDocumentHeader@1310004 : TEMPORARY Record 10002;VAR TempDocumentLine@1310003 : TEMPORARY Record 10003;VAR TempCFDIRelationDocument@1310001 : TEMPORARY Record 27006;SourceCode@1310005 : Code[10]);
    VAR
      TempErrorMessage@1310000 : TEMPORARY Record 700;
    BEGIN
      CLEARLASTERROR;
      CheckGLSetup(TempErrorMessage);
      CheckCompanyInfo(TempErrorMessage,FALSE);
      CheckSATCatalogs(TempErrorMessage);
      CheckCertificates(TempErrorMessage);
      CheckCustomer(TempErrorMessage,TempDocumentHeader."Bill-to/Pay-To No.");
      CheckDocumentHeader(TempErrorMessage,DocumentVariant,TempDocumentHeader,SourceCode);
      CheckDocumentLine(TempErrorMessage,DocumentVariant,TempDocumentLine);
      CheckCFDIRelations(TempErrorMessage,TempCFDIRelationDocument,TempDocumentHeader,DocumentVariant);

      IF TempErrorMessage.HasErrors(FALSE) THEN
        IF TempErrorMessage.ShowErrors THEN
          ERROR('');
    END;

    LOCAL PROCEDURE CheckTransferDocument@1310042(DocumentVariant@1310002 : Variant;TempDocumentHeader@1310004 : TEMPORARY Record 10002;VAR TempDocumentLine@1310003 : TEMPORARY Record 10003);
    VAR
      TempErrorMessage@1310000 : TEMPORARY Record 700;
    BEGIN
      CLEARLASTERROR;

      CheckGLSetup(TempErrorMessage);
      CheckCompanyInfo(TempErrorMessage,TRUE);
      CheckSATCatalogs(TempErrorMessage);
      CheckSATCatalogsCartaPorte(TempErrorMessage);
      CheckCertificates(TempErrorMessage);
      CheckDocumentHeaderCartaPorte(TempErrorMessage,DocumentVariant,TempDocumentHeader);
      CheckDocumentLineCartaPorte(TempErrorMessage,DocumentVariant,TempDocumentLine,TempDocumentHeader."Foreign Trade");

      IF TempErrorMessage.HasErrors(FALSE) THEN
        IF TempErrorMessage.ShowErrors THEN
          ERROR('');
    END;

    LOCAL PROCEDURE CheckGLSetup@1310011(VAR TempErrorMessage@1310000 : TEMPORARY Record 700);
    BEGIN
      GetGLSetupOnce;
      WITH TempErrorMessage DO BEGIN
        LogIfEmpty(GLSetup,GLSetup.FIELDNO("SAT Certificate"),"Message Type"::Error);
        LogIfEmpty(GLSetup,GLSetup.FIELDNO("PAC Code"),"Message Type"::Error);
        LogIfEmpty(GLSetup,GLSetup.FIELDNO("PAC Environment"),"Message Type"::Error);
      END;
    END;

    LOCAL PROCEDURE CheckCompanyInfo@1310022(VAR TempErrorMessage@1310000 : TEMPORARY Record 700;IsCartaPorte@1310002 : Boolean);
    VAR
      CompanyInformation@1310001 : Record 79;
    BEGIN
      CompanyInformation.GET;
      WITH TempErrorMessage DO BEGIN
        LogIfEmpty(CompanyInformation,CompanyInformation.FIELDNO(Name),"Message Type"::Error);
        LogIfEmpty(CompanyInformation,CompanyInformation.FIELDNO(Address),"Message Type"::Error);
        LogIfEmpty(CompanyInformation,CompanyInformation.FIELDNO(City),"Message Type"::Error);
        LogIfEmpty(CompanyInformation,CompanyInformation.FIELDNO("Country/Region Code"),"Message Type"::Error);
        LogIfEmpty(CompanyInformation,CompanyInformation.FIELDNO("Post Code"),"Message Type"::Error);
        LogIfEmpty(CompanyInformation,CompanyInformation.FIELDNO("E-Mail"),"Message Type"::Error);
        LogIfEmpty(CompanyInformation,CompanyInformation.FIELDNO("Tax Scheme"),"Message Type"::Error);
        LogIfEmpty(CompanyInformation,CompanyInformation.FIELDNO("RFC No."),"Message Type"::Error);
        LogIfEmpty(CompanyInformation,CompanyInformation.FIELDNO("SAT Tax Regime Classification"),"Message Type"::Error);
        LogIfEmpty(CompanyInformation,CompanyInformation.FIELDNO("SAT Postal Code"),"Message Type"::Error);
        IF IsCartaPorte THEN BEGIN
          LogIfEmpty(CompanyInformation,CompanyInformation.FIELDNO("SCT Permission Type"),"Message Type"::Error);
          LogIfEmpty(CompanyInformation,CompanyInformation.FIELDNO("SCT Permission Number"),"Message Type"::Error);
        END;
      END;
    END;

    LOCAL PROCEDURE CheckCustomer@1310033(VAR TempErrorMessage@1310000 : TEMPORARY Record 700;CustomerNo@1310001 : Code[20]);
    BEGIN
      Customer.GET(CustomerNo);
      WITH TempErrorMessage DO BEGIN
        LogIfEmpty(Customer,Customer.FIELDNO("RFC No."),"Message Type"::Error);
        LogIfEmpty(Customer,Customer.FIELDNO("Country/Region Code"),"Message Type"::Error);
        LogIfEmpty(Customer,Customer.FIELDNO("SAT Tax Regime Classification"),"Message Type"::Error);
      END;
    END;

    LOCAL PROCEDURE CheckDocumentHeader@1310013(VAR TempErrorMessage@1310001 : TEMPORARY Record 700;DocumentVariant@1310002 : Variant;DocumentHeader@1310000 : Record 10002;SourceCode@1310008 : Code[10]);
    VAR
      PaymentTerms@1310003 : Record 3;
      PaymentMethod@1310004 : Record 289;
      SATPaymentTerm@1310005 : Record 27017;
      SATPaymentMethod@1310006 : Record 27018;
    BEGIN
      WITH TempErrorMessage DO BEGIN
        LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("No."),"Message Type"::Error);
        LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("Document Date"),"Message Type"::Error);

        LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("Payment Terms Code"),"Message Type"::Error);
        IF PaymentTerms.GET(DocumentHeader."Payment Terms Code") THEN
          LogIfEmpty(PaymentTerms,PaymentTerms.FIELDNO("SAT Payment Term"),"Message Type"::Error);
        IF (PaymentTerms."SAT Payment Term" <> '') AND NOT SATPaymentTerm.GET(PaymentTerms."SAT Payment Term") THEN
          LogMessage(
            PaymentTerms,PaymentTerms.FIELDNO("SAT Payment Term"),"Message Type"::Error,
            STRSUBSTNO(
              WrongFieldValueErr,
              PaymentTerms."SAT Payment Term",PaymentTerms.FIELDCAPTION("SAT Payment Term"),PaymentTerms.TABLECAPTION));
        LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("Payment Method Code"),"Message Type"::Error);

        IF PaymentMethod.GET(DocumentHeader."Payment Method Code") THEN
          LogIfEmpty(PaymentMethod,PaymentMethod.FIELDNO("SAT Method of Payment"),"Message Type"::Error);
        IF (PaymentMethod."SAT Method of Payment" <> '') AND NOT SATPaymentMethod.GET(PaymentMethod."SAT Method of Payment") THEN
          LogMessage(
            PaymentMethod,PaymentMethod.FIELDNO("SAT Method of Payment"),"Message Type"::Error,
            STRSUBSTNO(
              WrongFieldValueErr,
              PaymentMethod."SAT Method of Payment",PaymentMethod.FIELDCAPTION("SAT Method of Payment"),PaymentMethod.TABLECAPTION));
        LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("Bill-to/Pay-To Address"),"Message Type"::Error);
        LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("Bill-to/Pay-To Post Code"),"Message Type"::Error);
        LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("CFDI Purpose"),"Message Type"::Error);
        LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("CFDI Relation"),"Message Type"::Error);
        LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("CFDI Export Code"),"Message Type"::Error);
        IF SourceCode = SourceCodeSetup."Deleted Document" THEN
          LogSimpleMessage("Message Type"::Error,Text007);
        IF (DocumentHeader."CFDI Purpose" = 'PPD') AND (DocumentHeader."CFDI Relation" = '03') THEN
          LogMessage(
            DocumentHeader,DocumentHeader.FIELDNO("CFDI Purpose"),"Message Type"::Error,
            STRSUBSTNO(
              CombinationCannotBeUsedErr,DocumentHeader.FIELDCAPTION("CFDI Purpose"),DocumentHeader."CFDI Purpose",
              DocumentHeader.FIELDCAPTION("CFDI Relation"),DocumentHeader."CFDI Relation"));
      END;
    END;

    LOCAL PROCEDURE CheckDocumentHeaderCartaPorte@1310070(VAR TempErrorMessage@1310001 : TEMPORARY Record 700;DocumentVariant@1310002 : Variant;DocumentHeader@1310000 : Record 10002);
    VAR
      CFDITransportOperator@1310003 : Record 27007;
      Employee@1310005 : Record 5200;
    BEGIN
      WITH TempErrorMessage DO BEGIN
        LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("No."),"Message Type"::Error);
        CASE DocumentHeader."Document Table ID" OF
          DATABASE::"Sales Shipment Header":
            LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("Document Date"),"Message Type"::Error);
          DATABASE::"Transfer Shipment Header":
            LogIfEmpty(DocumentVariant,20,"Message Type"::Error);
        END;
        LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("Transit-from Date/Time"),"Message Type"::Error);
        LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("Transit Hours"),"Message Type"::Error);
        LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("Transit Distance"),"Message Type"::Error);
        LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("Insurer Name"),"Message Type"::Error);
        LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("Insurer Policy Number"),"Message Type"::Error);
        LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("Vehicle Code"),"Message Type"::Error);
        LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("SAT Weight Unit Of Measure"),"Message Type"::Error);
        CFDITransportOperator.SETRANGE("Document Table ID",DocumentHeader."Document Table ID");
        CFDITransportOperator.SETRANGE("Document No.",DocumentHeader."No.");
        IF NOT CFDITransportOperator.FINDSET THEN
          LogIfEmpty(DocumentVariant,DocumentHeader.FIELDNO("Transport Operators"),"Message Type"::Error)
        ELSE
          REPEAT
            Employee.GET(CFDITransportOperator."Operator Code");
            LogIfEmpty(Employee,Employee.FIELDNO("RFC No."),"Message Type"::Error);
            LogIfEmpty(Employee,Employee.FIELDNO("License No."),"Message Type"::Error);
          UNTIL CFDITransportOperator.NEXT = 0;
        CheckAutotransport(TempErrorMessage,DocumentHeader."Vehicle Code",FALSE);
        CheckAutotransport(TempErrorMessage,DocumentHeader."Trailer 1",TRUE);
        CheckAutotransport(TempErrorMessage,DocumentHeader."Trailer 2",TRUE);
        CASE DocumentHeader."Document Table ID" OF
          DATABASE::"Sales Shipment Header":
            BEGIN
              CheckLocation(TempErrorMessage,DocumentVariant,DocumentHeader."Transit-from Location",10055);
              CheckLocation(TempErrorMessage,DocumentVariant,DocumentHeader."Transit-to Location",28);
            END;
          DATABASE::"Transfer Shipment Header":
            BEGIN
              CheckLocation(TempErrorMessage,DocumentVariant,DocumentHeader."Transit-from Location",2);
              CheckLocation(TempErrorMessage,DocumentVariant,DocumentHeader."Transit-to Location",11);
            END;
        END;
      END;
    END;

    LOCAL PROCEDURE CheckDocumentLine@1310021(VAR TempErrorMessage@1310002 : TEMPORARY Record 700;DocumentVariant@1310001 : Variant;VAR DocumentLine@1310000 : Record 10003);
    VAR
      Item@1310003 : Record 27;
      UnitOfMeasure@1310007 : Record 204;
      FixedAsset@1310009 : Record 5600;
      ItemCharge@1310010 : Record 5800;
      DataTypeManagement@1310006 : Codeunit 701;
      RecRef@1310004 : RecordRef;
      LineVariant@1310005 : Variant;
      LineTableCaption@1310008 : Text;
    BEGIN
      DataTypeManagement.GetRecordRef(DocumentVariant,RecRef);
      DocumentLine.FINDSET;
      WITH TempErrorMessage DO
        REPEAT
          GetLineVarFromDocumentLine(LineVariant,LineTableCaption,RecRef.NUMBER,DocumentLine);
          LogIfEmpty(LineVariant,DocumentLine.FIELDNO(Description),"Message Type"::Error);
          LogIfEmpty(LineVariant,DocumentLine.FIELDNO("Unit Price/Direct Unit Cost"),"Message Type"::Error);
          LogIfEmpty(LineVariant,DocumentLine.FIELDNO("Amount Including VAT"),"Message Type"::Error);
          IF DocumentLine.Type <> DocumentLine.Type::"Fixed Asset" THEN
            LogIfEmpty(LineVariant,DocumentLine.FIELDNO("Unit of Measure Code"),"Message Type"::Error);

          IF (DocumentLine."Retention Attached to Line No." = 0) AND
             (DocumentLine.Type = DocumentLine.Type::"G/L Account")
          THEN
            LogMessage(
              LineVariant,DocumentLine.FIELDNO(Type),"Message Type"::Error,
              STRSUBSTNO(
                WrongFieldValueErr,
                DocumentLine.Type,DocumentLine.FIELDCAPTION(Type),LineTableCaption))
          ELSE
            LogIfEmpty(LineVariant,DocumentLine.FIELDNO("Unit of Measure Code"),"Message Type"::Error);

          IF (DocumentLine.Type = DocumentLine.Type::Item) AND Item.GET(DocumentLine."No.") THEN
            LogIfEmpty(Item,Item.FIELDNO("SAT Item Classification"),"Message Type"::Error);
          IF (DocumentLine.Type = DocumentLine.Type::"Charge (Item)") AND ItemCharge.GET(DocumentLine."No.") THEN
            LogIfEmpty(ItemCharge,ItemCharge.FIELDNO("SAT Classification Code"),"Message Type"::Error);
          IF (DocumentLine.Type = DocumentLine.Type::"Fixed Asset") AND FixedAsset.GET(DocumentLine."No.") THEN
            LogIfEmpty(FixedAsset,FixedAsset.FIELDNO("SAT Classification Code"),"Message Type"::Error);
          IF UnitOfMeasure.GET(DocumentLine."Unit of Measure Code") THEN
            LogIfEmpty(UnitOfMeasure,UnitOfMeasure.FIELDNO("SAT UofM Classification"),"Message Type"::Error);

          IF (DocumentLine."Retention Attached to Line No." = 0) AND (DocumentLine.Quantity < 0) THEN
            LogIfLessThan(DocumentLine,DocumentLine.FIELDNO(Quantity),"Message Type"::Warning,0);
          IF (DocumentLine."Retention Attached to Line No." <> 0) AND (DocumentLine."Retention VAT %" = 0) THEN
            LogIfEmpty(DocumentLine,DocumentLine.FIELDNO("Retention VAT %"),"Message Type"::Warning);
        UNTIL DocumentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckDocumentLineCartaPorte@1310067(VAR TempErrorMessage@1310002 : TEMPORARY Record 700;DocumentVariant@1310001 : Variant;VAR DocumentLine@1310000 : Record 10003;ForeignTrade@1310009 : Boolean);
    VAR
      Item@1310003 : Record 27;
      UnitOfMeasure@1310007 : Record 204;
      DataTypeManagement@1310006 : Codeunit 701;
      RecRef@1310004 : RecordRef;
      LineVariant@1310005 : Variant;
      LineTableCaption@1310008 : Text;
    BEGIN
      DataTypeManagement.GetRecordRef(DocumentVariant,RecRef);
      DocumentLine.FINDSET;
      WITH TempErrorMessage DO
        REPEAT
          GetLineVarFromDocumentLine(LineVariant,LineTableCaption,RecRef.NUMBER,DocumentLine);
          LogIfEmpty(LineVariant,DocumentLine.FIELDNO(Description),"Message Type"::Error);
          IF RecRef.NUMBER = DATABASE::"Transfer Shipment Header" THEN BEGIN
            LogIfEmpty(LineVariant,15,"Message Type"::Error);
            LogIfEmpty(LineVariant,16,"Message Type"::Error);
          END ELSE BEGIN
            LogIfEmpty(LineVariant,DocumentLine.FIELDNO("Unit of Measure Code"),"Message Type"::Error);
            LogIfEmpty(LineVariant,DocumentLine.FIELDNO("Gross Weight"),"Message Type"::Error);
          END;
          IF DocumentLine.Type <> DocumentLine.Type::Item THEN
            LogMessage(
              LineVariant,DocumentLine.FIELDNO(Type),"Message Type"::Error,
              STRSUBSTNO(WrongFieldValueErr,DocumentLine.Type,DocumentLine.FIELDCAPTION(Type),LineTableCaption));
          IF (DocumentLine.Type = DocumentLine.Type::Item) AND Item.GET(DocumentLine."No.") THEN
            LogIfEmpty(Item,Item.FIELDNO("SAT Item Classification"),"Message Type"::Error);
          IF UnitOfMeasure.GET(DocumentLine."Unit of Measure Code") THEN
            LogIfEmpty(UnitOfMeasure,UnitOfMeasure.FIELDNO("SAT UofM Classification"),"Message Type"::Error);
          IF Item."SAT Hazardous Material" <> '' THEN
            LogIfEmpty(Item,Item.FIELDNO("SAT Packaging Type"),"Message Type"::Error);
          IF ForeignTrade THEN
            LogIfEmpty(LineVariant,DocumentLine.FIELDNO("Custom Transit Number"),"Message Type"::Error);
        UNTIL DocumentLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckCFDIRelations@1310052(VAR TempErrorMessage@1310002 : TEMPORARY Record 700;VAR TempCFDIRelationDocument@1310000 : TEMPORARY Record 27006;DocumentHeader@1310001 : Record 10002;RecVariant@1310003 : Variant);
    BEGIN
      WITH TempErrorMessage DO BEGIN
        IF TempCFDIRelationDocument.FINDSET THEN BEGIN
          LogIfEmpty(RecVariant,DocumentHeader.FIELDNO("CFDI Relation"),"Message Type"::Error);
          REPEAT
            LogIfEmpty(TempCFDIRelationDocument,TempCFDIRelationDocument.FIELDNO("Fiscal Invoice Number PAC"),"Message Type"::Error);
          UNTIL TempCFDIRelationDocument.NEXT = 0;
        END ELSE
          IF DocumentHeader."CFDI Relation" = '04' THEN
            LogMessage(RecVariant,DocumentHeader.FIELDNO("CFDI Relation"),"Message Type"::Error,NoRelationDocumentsExistErr);
      END;
    END;

    LOCAL PROCEDURE CheckSATCatalogs@1310068(VAR TempErrorMessage@1310000 : TEMPORARY Record 700);
    VAR
      SATClassification@1310003 : Record 27010;
      SATRelationshipType@1310004 : Record 27011;
      SATUseCode@1310005 : Record 27012;
      SATUnitOfMeasure@1310006 : Record 27013;
      SATCountryCode@1310007 : Record 27014;
      SATTaxScheme@1310008 : Record 27016;
      SATPaymentTerm@1310001 : Record 27017;
      SATPaymentMethod@1310002 : Record 27018;
    BEGIN
      WITH TempErrorMessage DO BEGIN
        IF SATClassification.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(EmptySATCatalogErr,SATClassification.TABLECAPTION));
        IF SATRelationshipType.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(EmptySATCatalogErr,SATRelationshipType.TABLECAPTION));
        IF SATUseCode.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(EmptySATCatalogErr,SATUseCode.TABLECAPTION));
        IF SATUnitOfMeasure.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(EmptySATCatalogErr,SATUnitOfMeasure.TABLECAPTION));
        IF SATCountryCode.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(EmptySATCatalogErr,SATCountryCode.TABLECAPTION));
        IF SATTaxScheme.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(EmptySATCatalogErr,SATTaxScheme.TABLECAPTION));
        IF SATPaymentTerm.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(EmptySATCatalogErr,SATPaymentTerm.TABLECAPTION));
        IF SATPaymentMethod.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(EmptySATCatalogErr,SATPaymentMethod.TABLECAPTION));

        SATPaymentTerm.SETRANGE(Code,'PIP');
        IF SATPaymentTerm.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(WrongSATCatalogErr,SATPaymentTerm.TABLECAPTION));
        SATPaymentMethod.SETRANGE(Code,'01');
        IF SATPaymentMethod.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(WrongSATCatalogErr,SATPaymentMethod.TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE CheckSATCatalogsCartaPorte@1310063(VAR TempErrorMessage@1310000 : TEMPORARY Record 700);
    VAR
      SATFederalMotorTransport@1310003 : Record 27021;
      SATTrailerType@1310004 : Record 27022;
      SATPermissionType@1310005 : Record 27023;
      SATHazardousMaterial@1310006 : Record 27024;
      SATPackagingType@1310007 : Record 27025;
      SATState@1310008 : Record 27026;
      SATMunicipality@1310001 : Record 27027;
      SATLocality@1310002 : Record 27028;
      SATSuburb@1310009 : Record 27029;
    BEGIN
      WITH TempErrorMessage DO BEGIN
        IF SATFederalMotorTransport.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(EmptySATCatalogErr,SATFederalMotorTransport.TABLECAPTION));
        IF SATTrailerType.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(EmptySATCatalogErr,SATTrailerType.TABLECAPTION));
        IF SATPermissionType.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(EmptySATCatalogErr,SATPermissionType.TABLECAPTION));
        IF SATHazardousMaterial.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(EmptySATCatalogErr,SATHazardousMaterial.TABLECAPTION));
        IF SATPackagingType.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(EmptySATCatalogErr,SATPackagingType.TABLECAPTION));
        IF SATState.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(EmptySATCatalogErr,SATState.TABLECAPTION));
        IF SATMunicipality.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(EmptySATCatalogErr,SATMunicipality.TABLECAPTION));
        IF SATLocality.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(EmptySATCatalogErr,SATLocality.TABLECAPTION));
        IF SATSuburb.ISEMPTY THEN
          LogSimpleMessage("Message Type"::Error,STRSUBSTNO(EmptySATCatalogErr,SATSuburb.TABLECAPTION));
      END;
    END;

    LOCAL PROCEDURE CheckCertificates@1310069(VAR TempErrorMessage@1310000 : TEMPORARY Record 700);
    VAR
      IsolatedCertificate@1310001 : Record 1262;
      PACWebService@1310002 : Record 10000;
      PACWebServiceDetail@1310003 : Record 10001;
    BEGIN
      GetGLSetupOnce;
      WITH TempErrorMessage DO BEGIN
        IF IsolatedCertificate.GET(GLSetup."SAT Certificate") THEN
          LogIfEmpty(IsolatedCertificate,IsolatedCertificate.FIELDNO(ThumbPrint),"Message Type"::Error);
        IF PACWebService.GET(GLSetup."PAC Code") THEN BEGIN
          LogIfEmpty(PACWebService,PACWebService.FIELDNO(Certificate),"Message Type"::Error);
          IF PACWebServiceDetail.GET(PACWebService.Code,GLSetup."PAC Environment",PACWebServiceDetail.Type::"Request Stamp") THEN
            LogIfEmpty(PACWebServiceDetail,PACWebServiceDetail.FIELDNO(Address),"Message Type"::Error)
          ELSE
            LogMessage(
              PACWebServiceDetail,PACWebService.FIELDNO(Code),"Message Type"::Error,
              STRSUBSTNO(
                PACDetailDoesNotExistErr,PACWebServiceDetail.TABLECAPTION,
                PACWebService.Code,GLSetup."PAC Environment",PACWebServiceDetail.Type::"Request Stamp"));
          IF PACWebServiceDetail.GET(PACWebService.Code,GLSetup."PAC Environment",PACWebServiceDetail.Type::Cancel) THEN
            LogIfEmpty(PACWebServiceDetail,PACWebServiceDetail.FIELDNO(Address),"Message Type"::Error)
          ELSE
            LogMessage(
              PACWebServiceDetail,PACWebService.FIELDNO(Code),"Message Type"::Error,
              STRSUBSTNO(
                PACDetailDoesNotExistErr,PACWebServiceDetail.TABLECAPTION,
                PACWebService.Code,GLSetup."PAC Environment",PACWebServiceDetail.Type::Cancel));
        END;
      END;
    END;

    LOCAL PROCEDURE CheckAutotransport@1310050(VAR TempErrorMessage@1310000 : TEMPORARY Record 700;VehicleCode@1310009 : Code[20];IsTrailer@1310010 : Boolean);
    VAR
      FixedAsset@1310001 : Record 5600;
    BEGIN
      IF VehicleCode = '' THEN
        EXIT;

      FixedAsset.GET(VehicleCode);
      WITH TempErrorMessage DO BEGIN
        LogIfEmpty(FixedAsset,FixedAsset.FIELDNO("Vehicle Licence Plate"),"Message Type"::Error);
        IF IsTrailer THEN
          LogIfEmpty(FixedAsset,FixedAsset.FIELDNO("SAT Trailer Type"),"Message Type"::Error)
        ELSE BEGIN
          LogIfEmpty(FixedAsset,FixedAsset.FIELDNO("Vehicle Year"),"Message Type"::Error);
          LogIfEmpty(FixedAsset,FixedAsset.FIELDNO("SAT Federal Autotransport"),"Message Type"::Error);
        END;
      END;
    END;

    LOCAL PROCEDURE CheckLocation@1310074(VAR TempErrorMessage@1310000 : TEMPORARY Record 700;DocumentVariant@1310002 : Variant;LocationCode@1310009 : Code[10];LocationFieldID@1310003 : Integer);
    VAR
      Location@1310001 : Record 14;
    BEGIN
      TempErrorMessage.LogIfEmpty(DocumentVariant,LocationFieldID,TempErrorMessage."Message Type"::Error);
      IF LocationCode = '' THEN
        EXIT;
      Location.GET(LocationCode);
      WITH TempErrorMessage DO BEGIN
        LogIfEmpty(Location,Location.FIELDNO("Country/Region Code"),"Message Type"::Error);
        LogIfEmpty(Location,Location.FIELDNO("SAT State Code"),"Message Type"::Error);
        LogIfEmpty(Location,Location.FIELDNO("SAT Municipality Code"),"Message Type"::Error);
        LogIfEmpty(Location,Location.FIELDNO("SAT Locality Code"),"Message Type"::Error);
        LogIfEmpty(Location,Location.FIELDNO("SAT Suburb ID"),"Message Type"::Error);
        LogIfEmpty(Location,Location.FIELDNO(Address),"Message Type"::Warning);
      END;
    END;

    LOCAL PROCEDURE CancellationReasonRequired@1310087(ReasonCode@1310000 : Code[10]) : Boolean;
    VAR
      CFDICancellationReason@1310001 : Record 27003;
    BEGIN
      IF NOT CFDICancellationReason.GET(ReasonCode) THEN
        EXIT(FALSE);
      EXIT(CFDICancellationReason."Substitution Number Required");
    END;

    LOCAL PROCEDURE GetLineVarFromDocumentLine@1310016(VAR LineVariant@1310000 : Variant;VAR TableCaption@1310007 : Text;TableID@1310002 : Integer;DocumentLine@1310001 : Record 10003);
    VAR
      SalesInvoiceLine@1310006 : Record 113;
      SalesCrMemoLine@1310005 : Record 115;
      ServiceInvoiceLine@1310004 : Record 5993;
      ServiceCrMemoLine@1310003 : Record 5995;
      SalesShipmentLine@1310008 : Record 111;
      TransferShipmentLine@1310009 : Record 5745;
    BEGIN
      CASE TableID OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            SalesInvoiceLine.GET(DocumentLine."Document No.",DocumentLine."Line No.");
            LineVariant := SalesInvoiceLine;
            TableCaption := SalesInvoiceLine.TABLECAPTION;
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            SalesCrMemoLine.GET(DocumentLine."Document No.",DocumentLine."Line No.");
            LineVariant := SalesCrMemoLine;
            TableCaption := SalesCrMemoLine.TABLECAPTION;
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            ServiceInvoiceLine.GET(DocumentLine."Document No.",DocumentLine."Line No.");
            LineVariant := ServiceInvoiceLine;
            TableCaption := ServiceInvoiceLine.TABLECAPTION;
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            ServiceCrMemoLine.GET(DocumentLine."Document No.",DocumentLine."Line No.");
            LineVariant := ServiceCrMemoLine;
            TableCaption := ServiceCrMemoLine.TABLECAPTION;
          END;
        DATABASE::"Sales Shipment Header":
          BEGIN
            SalesShipmentLine.GET(DocumentLine."Document No.",DocumentLine."Line No.");
            LineVariant := SalesShipmentLine;
            TableCaption := SalesShipmentLine.TABLECAPTION;
          END;
        DATABASE::"Transfer Shipment Header":
          BEGIN
            TransferShipmentLine.GET(DocumentLine."Document No.",DocumentLine."Line No.");
            LineVariant := TransferShipmentLine;
            TableCaption := TransferShipmentLine.TABLECAPTION;
          END;
      END;
    END;

    LOCAL PROCEDURE GetNumeroPedimento@1310155(TempDocumentLine@1310000 : TEMPORARY Record 10003) NumeroPedimento : Text;
    VAR
      IsHandled@1310001 : Boolean;
    BEGIN
      IsHandled := FALSE;
      OnBeforeGetNumeroPedimento(TempDocumentLine,NumeroPedimento,IsHandled);
      IF IsHandled THEN
        EXIT(NumeroPedimento);

      EXIT(TempDocumentLine."Custom Transit Number");
    END;

    LOCAL PROCEDURE FormatNumeroPedimento@1310241(TempDocumentLine@1310001 : TEMPORARY Record 10003) : Text;
    VAR
      NumeroPedimento@1310000 : Text;
    BEGIN
      NumeroPedimento := DELCHR(GetNumeroPedimento(TempDocumentLine));
      IF NumeroPedimento = '' THEN
        EXIT('');

      NumeroPedimento :=
        STRSUBSTNO(NumeroPedimentoFormatTxt,
          COPYSTR(NumeroPedimento,1,2),COPYSTR(NumeroPedimento,3,2),COPYSTR(NumeroPedimento,5,4),COPYSTR(NumeroPedimento,9,7));
      EXIT(NumeroPedimento);
    END;

    [EventSubscriber(Codeunit,5704,OnAfterInsertTransShptHeader)]
    LOCAL PROCEDURE TransferShipmentHeaserInsertCFDIOperators@1310085(VAR TransferHeader@1310000 : Record 5740;VAR TransferShipmentHeader@1310001 : Record 5744);
    BEGIN
      InsertTransferShipmentCFDITransportOperators(TransferHeader,TransferShipmentHeader."No.");
    END;

    LOCAL PROCEDURE UpdatePartialPaymentAmounts@1310039(VAR TempDetailedCustLedgEntry@1310000 : TEMPORARY Record 379;VAR CustLedgerEntry@1310001 : Record 21;VAR TempVATAmountLine@1310002 : TEMPORARY Record 290);
    VAR
      PartialPaymentMultiplifier@1310003 : Decimal;
    BEGIN
      CustLedgerEntry.CALCFIELDS("Amount (LCY)");
      IF CustLedgerEntry."Amount (LCY)" <> 0 THEN
        PartialPaymentMultiplifier := ABS(TempDetailedCustLedgEntry."Amount (LCY)" / CustLedgerEntry."Amount (LCY)")
      ELSE
        PartialPaymentMultiplifier := 1;
      IF PartialPaymentMultiplifier <> 1 THEN
        IF TempVATAmountLine.FINDSET THEN
          REPEAT
            TempVATAmountLine."VAT Base" *= PartialPaymentMultiplifier;
            TempVATAmountLine."VAT Amount" *= PartialPaymentMultiplifier;
            TempVATAmountLine."Amount Including VAT" *= PartialPaymentMultiplifier;
            TempVATAmountLine.MODIFY;
          UNTIL TempVATAmountLine.NEXT = 0;
    END;

    [EventSubscriber(Codeunit,103,OnBeforeCustLedgEntryModify)]
    LOCAL PROCEDURE UpdateCustomerLedgerEntry@1310090(VAR CustLedgEntry@1310000 : Record 21;FromCustLedgEntry@1310001 : Record 21);
    BEGIN
      CustLedgEntry.VALIDATE("CFDI Cancellation Reason Code",FromCustLedgEntry."CFDI Cancellation Reason Code");
      CustLedgEntry.VALIDATE("Substitution Entry No.",FromCustLedgEntry."Substitution Entry No.");
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeGetNumeroPedimento@1310160(TempDocumentLine@1310002 : TEMPORARY Record 10003;VAR NumberPedimento@1310000 : Text;VAR IsHandled@1310001 : Boolean);
    BEGIN
    END;

    BEGIN
    END.
  }
}

