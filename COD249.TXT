OBJECT Codeunit 249 VAT Registration Log Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=09/24/21;
    Time=12:00:00 PM;
    Version List=NAVW114.29;
  }
  PROPERTIES
  {
    Permissions=TableData 249=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      ValidPathTxt@1002 : TextConst '@@@={Locked};ENU=descendant::vat:valid';
      NamePathTxt@1001 : TextConst '@@@={Locked};ENU=descendant::vat:traderName';
      AddressPathTxt@1000 : TextConst '@@@={Locked};ENU=descendant::vat:traderAddress';
      RequestIdPathTxt@1003 : TextConst '@@@={Locked};ENU=descendant::vat:requestIdentifier';
      PostcodePathTxt@1004 : TextConst '@@@={Locked};ENU=descendant::vat:traderPostcode';
      StreetPathTxt@1005 : TextConst '@@@={Locked};ENU=descendant::vat:traderStreet';
      CityPathTxt@1006 : TextConst '@@@={Locked};ENU=descendant::vat:traderCity';
      DataTypeManagement@1008 : Codeunit 701;
      ValidVATNoMsg@1011 : TextConst 'ENU=The specified Tax registration number is valid.';
      NameMatchPathTxt@1015 : TextConst '@@@={Locked};ENU=descendant::vat:traderNameMatch';
      StreetMatchPathTxt@1016 : TextConst '@@@={Locked};ENU=descendant::vat:traderStreetMatch';
      PostcodeMatchPathTxt@1017 : TextConst '@@@={Locked};ENU=descendant::vat:traderPostcodeMatch';
      CityMatchPathTxt@1018 : TextConst '@@@={Locked};ENU=descendant::vat:traderCityMatch';
      InvalidVatRegNoMsg@1010 : TextConst 'ENU=We didn''t find a match for this Tax registration number. Please verify that you specified the right number.';
      NotVerifiedVATRegMsg@1009 : TextConst 'ENU=We couldn''t verify the Tax registration number. Please try again later.';
      VATSrvDisclaimerUrlTok@1007 : TextConst '@@@={Locked};ENU="https://go.microsoft.com/fwlink/?linkid=841741"';
      DescriptionLbl@1012 : TextConst 'ENU=EU Tax Reg. No. Validation Service Setup';
      UnexpectedResponseErr@1014 : TextConst '@@@=%1 - Country / Region Code;ENU=The VAT registration number could not be verified because the VIES VAT Registration No. service may be currently unavailable for the selected EU state, %1.';
      DetailsNotVerifiedMsg@1021 : TextConst 'ENU=The specified Tax registration number is valid.\The Tax VIES validation service did not provide additional details.';
      DetailsIgnoredMsg@1013 : TextConst 'ENU=The specified VAT registration number is valid.\The current configuration of the VAT VIES validation service excludes additional details.';

    [External]
    PROCEDURE LogCustomer@1(Customer@1000 : Record 18);
    VAR
      VATRegistrationLog@1001 : Record 249;
      CountryCode@1002 : Code[10];
    BEGIN
      CountryCode := GetCountryCode(Customer."Country/Region Code");
      IF NOT IsEUCountry(CountryCode) THEN
        EXIT;

      InsertVATRegistrationLog(
        Customer."VAT Registration No.",CountryCode,VATRegistrationLog."Account Type"::Customer,Customer."No.");
    END;

    [External]
    PROCEDURE LogVendor@2(Vendor@1002 : Record 23);
    VAR
      VATRegistrationLog@1001 : Record 249;
      CountryCode@1000 : Code[10];
    BEGIN
      CountryCode := GetCountryCode(Vendor."Country/Region Code");
      IF NOT IsEUCountry(CountryCode) THEN
        EXIT;

      InsertVATRegistrationLog(
        Vendor."VAT Registration No.",CountryCode,VATRegistrationLog."Account Type"::Vendor,Vendor."No.");
    END;

    [External]
    PROCEDURE LogContact@8(Contact@1000 : Record 5050);
    VAR
      VATRegistrationLog@1001 : Record 249;
      CountryCode@1002 : Code[10];
    BEGIN
      CountryCode := GetCountryCode(Contact."Country/Region Code");
      IF NOT IsEUCountry(CountryCode) THEN
        EXIT;

      InsertVATRegistrationLog(
        Contact."VAT Registration No.",CountryCode,VATRegistrationLog."Account Type"::Contact,Contact."No.");
    END;

    [Internal]
    PROCEDURE LogVerification@3(VAR VATRegistrationLog@1000 : Record 249;XMLDoc@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Namespace@1003 : Text);
    VAR
      XMLDOMMgt@1002 : Codeunit 6224;
      FoundXmlNode@1004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      ResponsedName@1006 : Text;
      ResponsedPostCode@1007 : Text;
      ResponsedCity@1008 : Text;
      ResponsedStreet@1009 : Text;
      ResponsedAddress@1010 : Text;
      MatchName@1011 : Boolean;
      MatchStreet@1012 : Boolean;
      MatchPostCode@1013 : Boolean;
      MatchCity@1014 : Boolean;
    BEGIN
      IF NOT XMLDOMMgt.FindNodeWithNamespace(XMLDoc.DocumentElement,ValidPathTxt,'vat',Namespace,FoundXmlNode) THEN
        ERROR(UnexpectedResponseErr,VATRegistrationLog."Country/Region Code");

      CASE LOWERCASE(FoundXmlNode.InnerText) OF
        'true':
          BEGIN
            VATRegistrationLog."Entry No." := 0;
            VATRegistrationLog.Status := VATRegistrationLog.Status::Valid;
            VATRegistrationLog."Verified Date" := CURRENTDATETIME;
            VATRegistrationLog."User ID" := USERID;

            VATRegistrationLog."Request Identifier" := COPYSTR(ExtractValue(RequestIdPathTxt,XMLDoc,Namespace),1,
                MAXSTRLEN(VATRegistrationLog."Request Identifier"));

            ResponsedName := ExtractValue(NamePathTxt,XMLDoc,Namespace);
            ResponsedAddress := ExtractValue(AddressPathTxt,XMLDoc,Namespace);
            ResponsedStreet := ExtractValue(StreetPathTxt,XMLDoc,Namespace);
            ResponsedPostCode := ExtractValue(PostcodePathTxt,XMLDoc,Namespace);
            ResponsedCity := ExtractValue(CityPathTxt,XMLDoc,Namespace);
            VATRegistrationLog.SetResponseDetails(
              ResponsedName,ResponsedAddress,ResponsedStreet,ResponsedCity,ResponsedPostCode);

            MatchName := ExtractValue(NameMatchPathTxt,XMLDoc,Namespace) = '1';
            MatchStreet := ExtractValue(StreetMatchPathTxt,XMLDoc,Namespace) = '1';
            MatchPostCode := ExtractValue(PostcodeMatchPathTxt,XMLDoc,Namespace) = '1';
            MatchCity := ExtractValue(CityMatchPathTxt,XMLDoc,Namespace) = '1';
            VATRegistrationLog.SetResponseMatchDetails(MatchName,MatchStreet,MatchCity,MatchPostCode);

            VATRegistrationLog.INSERT(TRUE);

            IF VATRegistrationLog.LogDetails THEN
              VATRegistrationLog.MODIFY;
          END;
        'false':
          BEGIN
            VATRegistrationLog."Entry No." := 0;
            VATRegistrationLog."Verified Date" := CURRENTDATETIME;
            VATRegistrationLog.Status := VATRegistrationLog.Status::Invalid;
            VATRegistrationLog."User ID" := USERID;
            VATRegistrationLog."Verified Name" := '';
            VATRegistrationLog."Verified Address" := '';
            VATRegistrationLog."Request Identifier" := '';
            VATRegistrationLog."Verified Postcode" := '';
            VATRegistrationLog."Verified Street" := '';
            VATRegistrationLog."Verified City" := '';
            VATRegistrationLog.INSERT(TRUE);
          END;
      END;
    END;

    LOCAL PROCEDURE LogUnloggedVATRegistrationNumbers@10();
    VAR
      Customer@1000 : Record 18;
      Vendor@1001 : Record 23;
      Contact@1002 : Record 5050;
      VATRegistrationLog@1003 : Record 249;
    BEGIN
      Customer.SETFILTER("VAT Registration No.",'<>%1','');
      IF Customer.FINDSET THEN
        REPEAT
          VATRegistrationLog.SETRANGE("VAT Registration No.",Customer."VAT Registration No.");
          IF VATRegistrationLog.ISEMPTY THEN
            LogCustomer(Customer);
        UNTIL Customer.NEXT = 0;

      Vendor.SETFILTER("VAT Registration No.",'<>%1','');
      IF Vendor.FINDSET THEN
        REPEAT
          VATRegistrationLog.SETRANGE("VAT Registration No.",Vendor."VAT Registration No.");
          IF VATRegistrationLog.ISEMPTY THEN
            LogVendor(Vendor);
        UNTIL Vendor.NEXT = 0;

      Contact.SETFILTER("VAT Registration No.",'<>%1','');
      IF Contact.FINDSET THEN
        REPEAT
          VATRegistrationLog.SETRANGE("VAT Registration No.",Contact."VAT Registration No.");
          IF VATRegistrationLog.ISEMPTY THEN
            LogContact(Contact);
        UNTIL Contact.NEXT = 0;

      COMMIT;
    END;

    LOCAL PROCEDURE InsertVATRegistrationLog@16(VATRegNo@1002 : Text[20];CountryCode@1000 : Code[10];AccountType@1001 : Option;AccountNo@1003 : Code[20]);
    VAR
      VATRegistrationLog@1004 : Record 249;
    BEGIN
      WITH VATRegistrationLog DO BEGIN
        INIT;
        "VAT Registration No." := VATRegNo;
        "Country/Region Code" := CountryCode;
        "Account Type" := AccountType;
        "Account No." := AccountNo;
        "User ID" := USERID;
        INSERT(TRUE);
      END;
    END;

    [External]
    PROCEDURE DeleteCustomerLog@4(Customer@1000 : Record 18);
    VAR
      VATRegistrationLog@1001 : Record 249;
    BEGIN
      WITH VATRegistrationLog DO BEGIN
        SETRANGE("Account Type","Account Type"::Customer);
        SETRANGE("Account No.",Customer."No.");
        IF NOT ISEMPTY THEN
          DELETEALL;
      END;
    END;

    [External]
    PROCEDURE DeleteVendorLog@5(Vendor@1000 : Record 23);
    VAR
      VATRegistrationLog@1001 : Record 249;
    BEGIN
      WITH VATRegistrationLog DO BEGIN
        SETRANGE("Account Type","Account Type"::Vendor);
        SETRANGE("Account No.",Vendor."No.");
        IF NOT ISEMPTY THEN
          DELETEALL;
      END;
    END;

    [External]
    PROCEDURE DeleteContactLog@9(Contact@1000 : Record 5050);
    VAR
      VATRegistrationLog@1001 : Record 249;
    BEGIN
      WITH VATRegistrationLog DO BEGIN
        SETRANGE("Account Type","Account Type"::Contact);
        SETRANGE("Account No.",Contact."No.");
        IF NOT ISEMPTY THEN
          DELETEALL;
      END;
    END;

    [External]
    PROCEDURE AssistEditCustomerVATReg@7(Customer@1000 : Record 18);
    VAR
      DummyVATRegistrationLog@1001 : Record 249;
    BEGIN
      AssistEditVATReg(DummyVATRegistrationLog."Account Type"::Customer,Customer."No.");
    END;

    [External]
    PROCEDURE AssistEditVendorVATReg@6(Vendor@1001 : Record 23);
    VAR
      DummyVATRegistrationLog@1000 : Record 249;
    BEGIN
      AssistEditVATReg(DummyVATRegistrationLog."Account Type"::Vendor,Vendor."No.");
    END;

    [External]
    PROCEDURE AssistEditContactVATReg@11(Contact@1001 : Record 5050);
    VAR
      DummyVATRegistrationLog@1000 : Record 249;
    BEGIN
      AssistEditVATReg(DummyVATRegistrationLog."Account Type"::Contact,Contact."No.");
    END;

    [External]
    PROCEDURE AssistEditCompanyInfoVATReg@19();
    VAR
      DummyVATRegistrationLog@1000 : Record 249;
    BEGIN
      AssistEditVATReg(DummyVATRegistrationLog."Account Type"::"Company Information",'');
    END;

    LOCAL PROCEDURE AssistEditVATReg@21(AccountType@1001 : Option;AccountNo@1002 : Code[20]);
    VAR
      VATRegistrationLog@1000 : Record 249;
    BEGIN
      WITH VATRegistrationLog DO BEGIN
        SETRANGE("Account Type",AccountType);
        SETRANGE("Account No.",AccountNo);
        IF ISEMPTY THEN
          LogUnloggedVATRegistrationNumbers;
        PAGE.RUNMODAL(PAGE::"VAT Registration Log",VATRegistrationLog);
      END;
    END;

    LOCAL PROCEDURE IsEUCountry@12(CountryCode@1000 : Code[10]) : Boolean;
    VAR
      CountryRegion@1001 : Record 9;
      CompanyInformation@1002 : Record 79;
    BEGIN
      IF (CountryCode = '') AND CompanyInformation.GET THEN
        CountryCode := CompanyInformation."Country/Region Code";

      IF CountryCode <> '' THEN
        IF CountryRegion.GET(CountryCode) THEN
          EXIT(CountryRegion."EU Country/Region Code" <> '');

      EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetCountryCode@13(CountryCode@1000 : Code[10]) : Code[10];
    VAR
      CompanyInformation@1001 : Record 79;
    BEGIN
      IF CountryCode <> '' THEN
        EXIT(CountryCode);

      CompanyInformation.GET;
      EXIT(CompanyInformation."Country/Region Code");
    END;

    LOCAL PROCEDURE ExtractValue@14(Xpath@1000 : Text;XMLDoc@1003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";Namespace@1004 : Text) : Text;
    VAR
      XMLDOMMgt@1002 : Codeunit 6224;
      FoundXmlNode@1001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      IF NOT XMLDOMMgt.FindNodeWithNamespace(XMLDoc.DocumentElement,Xpath,'vat',Namespace,FoundXmlNode) THEN
        EXIT('');
      EXIT(FoundXmlNode.InnerText);
    END;

    [External]
    PROCEDURE CheckVIESForVATNo@550(VAR RecordRef@1004 : RecordRef;VAR VATRegistrationLog@1040 : Record 249;RecordVariant@1001 : Variant;EntryNo@1010 : Code[20];CountryCode@1013 : Code[10];AccountType@1000 : Option);
    VAR
      Customer@1002 : Record 18;
      VATRegNoSrvConfig@1007 : Record 248;
      CountryRegion@1003 : Record 9;
      VatRegNoFieldRef@1009 : FieldRef;
      VATRegNo@1012 : Text[20];
    BEGIN
      RecordRef.GETTABLE(RecordVariant);
      IF NOT CountryRegion.IsEUCountry(CountryCode) THEN
        EXIT; // VAT Reg. check Srv. is only available for EU countries.

      IF VATRegNoSrvConfig.VATRegNoSrvIsEnabled THEN BEGIN
        DataTypeManagement.GetRecordRef(RecordVariant,RecordRef);
        IF NOT DataTypeManagement.FindFieldByName(RecordRef,VatRegNoFieldRef,Customer.FIELDNAME("VAT Registration No.")) THEN
          EXIT;
        VATRegNo := VatRegNoFieldRef.VALUE;

        VATRegistrationLog.InitVATRegLog(VATRegistrationLog,CountryCode,AccountType,EntryNo,VATRegNo);
        CODEUNIT.RUN(CODEUNIT::"VAT Lookup Ext. Data Hndl",VATRegistrationLog);
      END;
    END;

    [External]
    PROCEDURE UpdateRecordFromVATRegLog@370(VAR RecordRef@1004 : RecordRef;RecordVariant@1001 : Variant;VATRegistrationLog@1040 : Record 249);
    BEGIN
      RecordRef.GETTABLE(RecordVariant);
      CASE VATRegistrationLog.Status OF
        VATRegistrationLog.Status::Valid:
          CASE VATRegistrationLog."Details Status" OF
            VATRegistrationLog."Details Status"::"Not Verified":
              MESSAGE(DetailsNotVerifiedMsg);
            VATRegistrationLog."Details Status"::Valid:
              MESSAGE(ValidVATNoMsg);
            VATRegistrationLog."Details Status"::"Partially Valid",
            VATRegistrationLog."Details Status"::"Not Valid":
              BEGIN
                DataTypeManagement.GetRecordRef(RecordVariant,RecordRef);
                VATRegistrationLog.OpenDetailsForRecRef(RecordRef);
              END;
            VATRegistrationLog."Details Status"::Ignored:
              MESSAGE(DetailsIgnoredMsg);
          END;
        VATRegistrationLog.Status::Invalid:
          MESSAGE(InvalidVatRegNoMsg);
        ELSE
          MESSAGE(NotVerifiedVATRegMsg);
      END;
    END;

    [External]
    PROCEDURE InitServiceSetup@22();
    VAR
      VATRegNoSrvConfig@1000 : Record 248;
      VATLookupExtDataHndl@1001 : Codeunit 248;
    BEGIN
      IF NOT VATRegNoSrvConfig.FINDFIRST THEN BEGIN
        VATRegNoSrvConfig.INIT;
        VATRegNoSrvConfig."Service Endpoint" := VATLookupExtDataHndl.GetVATRegNrValidationWebServiceURL;
        VATRegNoSrvConfig.Enabled := FALSE;
        VATRegNoSrvConfig.INSERT;
      END;
    END;

    [External]
    PROCEDURE SetupService@18();
    VAR
      VATRegNoSrvConfig@1000 : Record 248;
    BEGIN
      IF VATRegNoSrvConfig.FINDFIRST THEN
        EXIT;
      InitServiceSetup;
    END;

    [External]
    PROCEDURE EnableService@15();
    VAR
      VATRegNoSrvConfig@1000 : Record 248;
    BEGIN
      IF NOT VATRegNoSrvConfig.FINDFIRST THEN BEGIN
        InitServiceSetup;
        VATRegNoSrvConfig.FINDFIRST;
      END;

      VATRegNoSrvConfig.Enabled := TRUE;
      VATRegNoSrvConfig.MODIFY;
    END;

    [External]
    PROCEDURE ValidateVATRegNoWithVIES@560(VAR RecordRef@1004 : RecordRef;RecordVariant@1001 : Variant;EntryNo@1010 : Code[20];AccountType@1011 : Option;CountryCode@1013 : Code[10]);
    VAR
      VATRegistrationLog@1008 : Record 249;
    BEGIN
      CheckVIESForVATNo(RecordRef,VATRegistrationLog,RecordVariant,EntryNo,CountryCode,AccountType);

      IF VATRegistrationLog.FIND THEN // Only update if the log was created
        UpdateRecordFromVATRegLog(RecordRef,RecordVariant,VATRegistrationLog);
    END;

    [External]
    PROCEDURE GetServiceDisclaimerUR@17() : Text;
    BEGIN
      EXIT(VATSrvDisclaimerUrlTok);
    END;

    [EventSubscriber(Table,1400,OnRegisterServiceConnection)]
    [External]
    PROCEDURE HandleViesRegisterServiceConnection@20(VAR ServiceConnection@1003 : Record 1400);
    VAR
      VATRegNoSrvConfig@1001 : Record 248;
      RecRef@1002 : RecordRef;
    BEGIN
      SetupService;
      VATRegNoSrvConfig.FINDFIRST;

      RecRef.GETTABLE(VATRegNoSrvConfig);

      IF VATRegNoSrvConfig.Enabled THEN
        ServiceConnection.Status := ServiceConnection.Status::Enabled
      ELSE
        ServiceConnection.Status := ServiceConnection.Status::Disabled;
      WITH VATRegNoSrvConfig DO
        ServiceConnection.InsertServiceConnection(
          ServiceConnection,RecRef.RECORDID,DescriptionLbl,"Service Endpoint",PAGE::"VAT Registration Config");
    END;

    BEGIN
    END.
  }
}

