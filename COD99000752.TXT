OBJECT Codeunit 99000752 Check Routing Lines
{
  OBJECT-PROPERTIES
  {
    Date=07/31/20;
    Time=12:00:00 PM;
    Version List=NAVW114.16;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=Circular reference in routing %1 when calculating %2. Counted sequences %3. Max. lines %4.';
      Text001@1001 : TextConst 'ENU=back';
      Text002@1002 : TextConst 'ENU=Actual number of termination processes in route %1 is %2. They should be 1. Check %3.';
      Text003@1003 : TextConst 'ENU=Actual number of start processes in route %1 is %2. They should be 1. Check %3.';
      Text004@1004 : TextConst 'ENU=Not all routing lines are sequenced backwards on routing %1. Check %2.';
      Text005@1005 : TextConst 'ENU=Not all routing lines are sequenced forward on routing %1. Check %2.';
      Text006@1006 : TextConst 'ENU=Previous operations for %1 cannot be found.';
      Text007@1007 : TextConst 'ENU=Next operations for %1 cannot be found.';
      UOMMgt@1010 : Codeunit 5402;
      ErrList@1008 : Text[50];
      Text008@1009 : TextConst 'ENU=Operation %1 does not have a work center or a machine center defined.';
      WorkMachineCenterNotExistErr@1011 : TextConst '@@@="%1 - Routing Line Operation No.; %2 - Work Center or Machine Center table caption; %3 - Work or Machine Center No.";ENU=Operation no. %1 uses %2 no. %3 that no longer exists.';

    LOCAL PROCEDURE ErrorInRouting@1(RoutingCode@1000 : Code[20];Direction@1001 : Text[20];ActualSequence@1002 : Integer;MaxSequences@1003 : Integer);
    BEGIN
      ERROR(
        Text000,
        RoutingCode,
        Direction,
        ActualSequence,
        MaxSequences);
    END;

    LOCAL PROCEDURE InsertInErrList@8(RtngLine@1000 : Record 99000764);
    BEGIN
      IF (STRLEN(ErrList) + STRLEN(RtngLine."Operation No.") + 1) > MAXSTRLEN(ErrList) THEN
        EXIT;

      IF STRLEN(ErrList) > 0 THEN
        ErrList := ErrList + ',' + RtngLine."Operation No."
      ELSE
        ErrList := RtngLine."Operation No.";
    END;

    [External]
    PROCEDURE SetNextOperations@10(RtngHeader@1000 : Record 99000763;VersionCode@1001 : Code[20]);
    VAR
      RtngLine@1002 : Record 99000764;
      RtngLine2@1003 : Record 99000764;
    BEGIN
      RtngLine.SETRANGE("Routing No.",RtngHeader."No.");
      RtngLine.SETRANGE("Version Code",VersionCode);
      RtngLine.MODIFYALL("Next Operation No.",'');

      IF RtngLine.FIND('-') THEN
        REPEAT
          RtngLine2 := RtngLine;
          RtngLine2.SETRANGE("Routing No.",RtngHeader."No.");
          RtngLine2.SETRANGE("Version Code",VersionCode);
          IF RtngLine2.FIND('>') THEN BEGIN
            RtngLine."Next Operation No." := RtngLine2."Operation No.";
            RtngLine.MODIFY;
          END;
        UNTIL RtngLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CalcPreviousOperations@9(RtngHeader@1000 : Record 99000763;VersionCode@1001 : Code[20]);
    VAR
      RtngLine@1002 : Record 99000764;
      RtngLine2@1003 : Record 99000764;
    BEGIN
      RtngLine.SETRANGE("Routing No.",RtngHeader."No.");
      RtngLine.SETRANGE("Version Code",VersionCode);
      RtngLine.MODIFYALL("Previous Operation No.",'');

      IF RtngLine.FIND('-') THEN
        REPEAT
          IF RtngLine."Next Operation No." <> '' THEN BEGIN
            RtngLine2.SETRANGE("Routing No.",RtngHeader."No.");
            RtngLine2.SETRANGE("Version Code",VersionCode);
            RtngLine2.SETFILTER("Operation No.",RtngLine."Next Operation No.");
            IF RtngLine2.FIND('-') THEN
              REPEAT
                IF RtngLine2."Previous Operation No." <> '' THEN
                  RtngLine2."Previous Operation No." :=
                    RtngLine2."Previous Operation No." + '|';
                RtngLine2."Previous Operation No." :=
                  RtngLine2."Previous Operation No." +
                  RtngLine."Operation No.";
                RtngLine2.MODIFY;
              UNTIL RtngLine2.NEXT = 0;
          END;
        UNTIL RtngLine.NEXT = 0;
    END;

    LOCAL PROCEDURE CheckCircularReference@12(ActSequences@1000 : Integer;MaxSequences@1001 : Integer;RoutingNo@1002 : Code[20]);
    BEGIN
      IF ActSequences > MaxSequences THEN
        ErrorInRouting(
          RoutingNo,
          Text001,
          ActSequences,
          MaxSequences);
    END;

    LOCAL PROCEDURE SetRtngLineSequenceBack@6(RoutingType@1000 : 'Serial,Parallel';RoutingNo@1001 : Code[20];VersionCode@1003 : Code[20];Maxsequences@1002 : Integer);
    VAR
      RoutingLine@1004 : Record 99000764;
      RtngLine@1011 : Record 99000764;
      TempNameValueBuffer@1007 : TEMPORARY Record 823;
      SequenceNo@1005 : Integer;
      QueueCount@1006 : Integer;
      i@1009 : Integer;
    BEGIN
      SequenceNo := 1;
      IF RoutingType = RoutingType::Parallel THEN BEGIN
        NameValueBufferEnqueue(TempNameValueBuffer,GetTerminalOperationNo(RoutingNo,VersionCode));

        WHILE NOT TempNameValueBuffer.ISEMPTY DO BEGIN
          CheckCircularReference(SequenceNo,Maxsequences,RoutingNo);
          QueueCount := TempNameValueBuffer.COUNT;
          FOR i := 1 TO QueueCount DO BEGIN
            SetSequenceNoBackwardOnOperation(RoutingLine,RoutingNo,VersionCode,NameValueBufferDequeue(TempNameValueBuffer),SequenceNo);

            IF RoutingLine."Previous Operation No." <> '' THEN BEGIN
              RtngLine.SETRANGE("Version Code",VersionCode);
              RtngLine.SETRANGE("Routing No.",RoutingNo);
              RtngLine.SETFILTER("Operation No.",RoutingLine."Previous Operation No.");
              IF RtngLine.FINDSET THEN
                REPEAT
                  NameValueBufferEnqueue(TempNameValueBuffer,RtngLine."Operation No.");
                UNTIL RtngLine.NEXT = 0;
            END;
          END;
          SequenceNo += 1;
        END;
      END ELSE BEGIN
        RoutingLine.SETRANGE("Routing No.",RoutingNo);
        RoutingLine.SETRANGE("Version Code",VersionCode);
        IF RoutingLine.FIND('+') THEN
          REPEAT
            RoutingLine."Sequence No. (Backward)" := SequenceNo;
            RoutingLine.MODIFY;
            SequenceNo += 1;
          UNTIL RoutingLine.NEXT(-1) = 0;
      END;
    END;

    [External]
    PROCEDURE SetRtngLineSequenceForward@7(RoutingType@1000 : 'Serial,Parallel';RoutingNo@1001 : Code[20];VersionCode@1003 : Code[20];MaxSequences@1002 : Integer);
    VAR
      RoutingLine@1004 : Record 99000764;
      RtngLine@1011 : Record 99000764;
      TempNameValueBuffer@1009 : TEMPORARY Record 823;
      SequenceNo@1007 : Integer;
      QueueCount@1006 : Integer;
      i@1005 : Integer;
    BEGIN
      SequenceNo := 1;
      IF RoutingType = RoutingType::Parallel THEN BEGIN
        NameValueBufferEnqueue(TempNameValueBuffer,GetStartingOperationNo(RoutingNo,VersionCode));

        WHILE NOT TempNameValueBuffer.ISEMPTY DO BEGIN
          CheckCircularReference(SequenceNo,MaxSequences,RoutingNo);
          QueueCount := TempNameValueBuffer.COUNT;
          FOR i := 1 TO QueueCount DO BEGIN
            SetSequenceNoForwardOnOperation(RoutingLine,RoutingNo,VersionCode,NameValueBufferDequeue(TempNameValueBuffer),SequenceNo);

            IF RoutingLine."Next Operation No." <> '' THEN BEGIN
              RtngLine.SETRANGE("Routing No.",RoutingNo);
              RtngLine.SETRANGE("Version Code",VersionCode);
              RtngLine.SETFILTER("Operation No.",RoutingLine."Next Operation No.");
              IF RtngLine.FINDSET THEN
                REPEAT
                  NameValueBufferEnqueue(TempNameValueBuffer,RtngLine."Operation No.");
                UNTIL RtngLine.NEXT = 0;
            END;
          END;
          SequenceNo += 1;
        END;
      END ELSE BEGIN
        RoutingLine.SETRANGE("Routing No.",RoutingNo);
        RoutingLine.SETRANGE("Version Code",VersionCode);
        IF RoutingLine.FIND('-') THEN
          REPEAT
            RoutingLine."Sequence No. (Forward)" := SequenceNo;
            RoutingLine.MODIFY;
            SequenceNo += 1;
          UNTIL RoutingLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE GetStartingOperationNo@25(RoutingNo@1000 : Code[20];VersionCode@1001 : Code[20]) : Code[10];
    VAR
      RoutingLine@1002 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      RoutingLine.SETRANGE("Version Code",VersionCode);
      RoutingLine.SETFILTER("Previous Operation No.",'%1','');
      RoutingLine.FINDFIRST;
      EXIT(RoutingLine."Operation No.");
    END;

    LOCAL PROCEDURE GetTerminalOperationNo@26(RoutingNo@1002 : Code[20];VersionCode@1001 : Code[20]) : Code[10];
    VAR
      RoutingLine@1000 : Record 99000764;
    BEGIN
      RoutingLine.SETRANGE("Routing No.",RoutingNo);
      RoutingLine.SETRANGE("Version Code",VersionCode);
      RoutingLine.SETFILTER("Next Operation No.",'%1','');
      RoutingLine.FINDFIRST;
      EXIT(RoutingLine."Operation No.");
    END;

    LOCAL PROCEDURE SetSequenceNoForwardOnOperation@27(VAR RoutingLine@1005 : Record 99000764;RoutingNo@1001 : Code[20];VersionCode@1002 : Code[20];OperationNo@1003 : Text;SequenceNo@1004 : Integer);
    BEGIN
      RoutingLine.GET(RoutingNo,VersionCode,OperationNo);
      RoutingLine."Sequence No. (Forward)" := SequenceNo;
      RoutingLine.MODIFY;
    END;

    LOCAL PROCEDURE SetSequenceNoBackwardOnOperation@28(VAR RoutingLine@1005 : Record 99000764;RoutingNo@1003 : Code[20];VersionCode@1002 : Code[20];OperationNo@1001 : Text;SequenceNo@1000 : Integer);
    BEGIN
      RoutingLine.GET(RoutingNo,VersionCode,OperationNo);
      RoutingLine."Sequence No. (Backward)" := SequenceNo;
      RoutingLine.MODIFY;
    END;

    LOCAL PROCEDURE NameValueBufferEnqueue@15(VAR TempNameValueBuffer@1000 : TEMPORARY Record 823;Value@1001 : Text[250]);
    BEGIN
      TempNameValueBuffer.AddNewEntry('',Value);
    END;

    LOCAL PROCEDURE NameValueBufferDequeue@16(VAR TempNameValueBuffer@1000 : TEMPORARY Record 823) Value : Text[250];
    BEGIN
      TempNameValueBuffer.FINDFIRST;
      Value := TempNameValueBuffer.Value;
      TempNameValueBuffer.DELETE;
    END;

    LOCAL PROCEDURE CalcSequenceBack@2(RtngHeader@1000 : Record 99000763;VersionCode@1001 : Code[20]);
    VAR
      RtngLine@1002 : Record 99000764;
      MaxSeq@1003 : Integer;
    BEGIN
      RtngLine.SETRANGE("Routing No.",RtngHeader."No.");
      RtngLine.SETRANGE("Version Code",VersionCode);
      IF RtngLine.FIND('-') THEN
        REPEAT
          RtngLine."Sequence No. (Backward)" := 0;
          RtngLine."Fixed Scrap Qty. (Accum.)" := 0;
          RtngLine."Scrap Factor % (Accumulated)" := 0;
          RtngLine.MODIFY;
        UNTIL RtngLine.NEXT = 0;

      MaxSeq := RtngLine.COUNT;

      SetRtngLineSequenceBack(RtngHeader.Type,RtngHeader."No.",VersionCode,MaxSeq);
    END;

    LOCAL PROCEDURE CalcSequenceForward@3(RtngHeader@1000 : Record 99000763;VersionCode@1001 : Code[20]);
    VAR
      RtngLine@1002 : Record 99000764;
      MaxSeq@1003 : Integer;
    BEGIN
      RtngLine.SETRANGE("Routing No.",RtngHeader."No.");
      RtngLine.SETRANGE("Version Code",VersionCode);
      RtngLine.MODIFYALL("Sequence No. (Forward)",0);

      MaxSeq := RtngLine.COUNT;

      SetRtngLineSequenceForward(RtngHeader.Type,RtngHeader."No.",VersionCode,MaxSeq);
    END;

    [External]
    PROCEDURE NeedsCalculation@11(RtngHeader@1000 : Record 99000763;VersionCode@1001 : Code[20]) : Boolean;
    VAR
      RtngLine@1002 : Record 99000764;
    BEGIN
      RtngLine.SETRANGE("Routing No.",RtngHeader."No.");
      RtngLine.SETRANGE("Version Code",VersionCode);
      RtngLine.SETRANGE(Recalculate,TRUE);
      EXIT(RtngLine.FINDFIRST);
    END;

    [External]
    PROCEDURE Calculate@4(RtngHeader@1000 : Record 99000763;VersionCode@1001 : Code[20]);
    VAR
      RtngVersion@1002 : Record 99000786;
      RtngLine@1003 : Record 99000764;
      RtngLine2@1004 : Record 99000764;
      CalcScrapFactor@1005 : Decimal;
      CalcScrapQty@1006 : Decimal;
      ScrapFactorThis@1007 : Decimal;
      ScrapQtyThis@1008 : Decimal;
    BEGIN
      RtngLine.SETCURRENTKEY("Routing No.","Version Code","Sequence No. (Backward)");
      RtngLine.SETRANGE("Routing No.",RtngHeader."No.");
      RtngLine.SETRANGE("Version Code",VersionCode);
      IF RtngLine.ISEMPTY THEN
        EXIT;

      IF VersionCode <> '' THEN BEGIN
        RtngVersion.GET(RtngHeader."No.",VersionCode);
        RtngHeader.Type := RtngVersion.Type;
      END;

      IF RtngHeader.Type = RtngHeader.Type::Serial THEN
        SetNextOperations(RtngHeader,VersionCode);

      CalcPreviousOperations(RtngHeader,VersionCode);
      CalcSequenceBack(RtngHeader,VersionCode);
      CalcSequenceForward(RtngHeader,VersionCode);

      OnBeforeFindRoutingLines(RtngHeader,VersionCode);

      IF RtngLine.FIND('-') THEN
        REPEAT
          IF RtngLine."Next Operation No." <> '' THEN BEGIN
            RtngLine2.SETRANGE("Routing No.",RtngLine."Routing No.");
            RtngLine2.SETRANGE("Version Code",VersionCode);
            RtngLine2.SETFILTER("Operation No.",RtngLine."Next Operation No.");
            CalcScrapFactor := 0;
            CalcScrapQty := 0;
            IF RtngLine2.FIND('-') THEN
              REPEAT
                ScrapFactorThis :=
                  RtngLine2."Scrap Factor % (Accumulated)";
                ScrapQtyThis := ROUND(RtngLine2."Fixed Scrap Qty. (Accum.)",UOMMgt.QtyRndPrecision);
                IF CalcScrapFactor < ScrapFactorThis THEN
                  CalcScrapFactor := ScrapFactorThis;
                IF CalcScrapQty < ScrapQtyThis THEN
                  CalcScrapQty := ScrapQtyThis;
              UNTIL RtngLine2.NEXT = 0;
          END;
          IF CalcScrapFactor <> 0 THEN BEGIN
            IF RtngLine."Scrap Factor %" <> 0 THEN
              CalcScrapFactor :=
                ROUND(
                  (1 + CalcScrapFactor) *
                  (1 + RtngLine."Scrap Factor %" / 100),0.00001) - 1;
          END ELSE
            CalcScrapFactor :=
              ROUND(1 + RtngLine."Scrap Factor %" / 100,0.00001) - 1;
          CalcScrapQty := CalcScrapQty * (1 + RtngLine."Scrap Factor %" / 100) + RtngLine."Fixed Scrap Quantity";
          OnCalculateOnAfterCalcScrapQtyAndFactor(RtngLine,CalcScrapQty,CalcScrapFactor);
          RtngLine."Fixed Scrap Qty. (Accum.)" := CalcScrapQty;
          RtngLine."Scrap Factor % (Accumulated)" := CalcScrapFactor;
          RtngLine.MODIFY;
        UNTIL RtngLine.NEXT = 0;

      RtngLine.MODIFYALL(Recalculate,FALSE);
      Check(RtngHeader,VersionCode);
    END;

    LOCAL PROCEDURE Check@5(RtngHeader@1000 : Record 99000763;VersionCode@1001 : Code[20]);
    VAR
      RtngLine@1002 : Record 99000764;
      RtngLine2@1003 : Record 99000764;
      WorkCenter@1005 : Record 99000754;
      MachineCenter@1006 : Record 99000758;
      NoOfProcesses@1004 : Integer;
    BEGIN
      ErrList := '';

      RtngLine.SETRANGE("Routing No.",RtngHeader."No.");
      RtngLine.SETRANGE("Version Code",VersionCode);
      RtngLine.SETRANGE("No.",'');
      IF RtngLine.FINDFIRST THEN
        ERROR(Text008,RtngLine."Operation No.");
      RtngLine.SETRANGE("No.");

      IF RtngLine.FINDSET THEN
        REPEAT
          IF RtngLine.Type = RtngLine.Type::"Work Center" THEN BEGIN
            IF NOT WorkCenter.GET(RtngLine."No.") THEN
              ERROR(WorkMachineCenterNotExistErr,RtngLine."Operation No.",WorkCenter.TABLECAPTION,RtngLine."No.");
            WorkCenter.TESTFIELD(Blocked,FALSE);
          END;
          IF RtngLine.Type = RtngLine.Type::"Machine Center" THEN BEGIN
            IF NOT MachineCenter.GET(RtngLine."No.") THEN
              ERROR(WorkMachineCenterNotExistErr,RtngLine."Operation No.",MachineCenter.TABLECAPTION,RtngLine."No.");
            MachineCenter.TESTFIELD(Blocked,FALSE);
          END;
        UNTIL RtngLine.NEXT = 0;

      RtngLine.SETFILTER("Next Operation No.",'%1','');

      NoOfProcesses := RtngLine.COUNT;
      IF NoOfProcesses <> 1 THEN BEGIN
        REPEAT
          InsertInErrList(RtngLine);
        UNTIL RtngLine.NEXT = 0;
        ERROR(
          Text002,
          RtngHeader."No.",
          NoOfProcesses,
          ErrList);
      END;

      RtngLine.SETFILTER("Previous Operation No.",'%1','');
      RtngLine.SETRANGE("Next Operation No.");
      NoOfProcesses := RtngLine.COUNT;
      IF NoOfProcesses <> 1 THEN BEGIN
        REPEAT
          InsertInErrList(RtngLine);
        UNTIL RtngLine.NEXT = 0;
        ERROR(
          Text003,
          RtngHeader."No.",
          NoOfProcesses,
          ErrList);
      END;
      RtngLine.SETRANGE("Previous Operation No.");

      RtngLine.SETRANGE("Sequence No. (Backward)",0);
      IF RtngLine.FIND('-') THEN BEGIN
        REPEAT
          InsertInErrList(RtngLine);
        UNTIL RtngLine.NEXT = 0;
        ERROR(
          Text004,
          RtngLine."Routing No.",
          ErrList);
      END;
      RtngLine.SETRANGE("Sequence No. (Backward)");

      RtngLine.SETRANGE("Sequence No. (Forward)",0);
      IF RtngLine.FIND('-') THEN BEGIN
        REPEAT
          InsertInErrList(RtngLine);
        UNTIL RtngLine.NEXT = 0;
        ERROR(
          Text005,
          RtngLine."Routing No.",
          ErrList);
      END;
      RtngLine.SETRANGE("Sequence No. (Forward)");

      RtngLine.SETCURRENTKEY("Routing No.","Version Code","Sequence No. (Backward)");
      RtngLine.SETFILTER("Previous Operation No.",'<>%1','');

      IF RtngLine.FIND('-') THEN
        REPEAT
          RtngLine2.SETRANGE("Routing No.",RtngLine."Routing No.");
          RtngLine2.SETRANGE("Version Code",VersionCode);
          RtngLine2.SETFILTER("Operation No.",RtngLine."Previous Operation No.");
          IF RtngLine2.ISEMPTY THEN
            ERROR(
              Text006,
              RtngLine."Routing No.");
        UNTIL RtngLine.NEXT = 0;

      RtngLine.SETCURRENTKEY("Routing No.","Version Code","Sequence No. (Forward)");
      RtngLine.SETFILTER("Next Operation No.",'<>%1','');
      RtngLine.SETRANGE("Operation No.");

      IF RtngLine.FIND('-') THEN
        REPEAT
          RtngLine2.SETRANGE("Routing No.",RtngLine."Routing No.");
          RtngLine2.SETRANGE("Version Code",VersionCode);
          RtngLine2.SETFILTER("Operation No.",RtngLine."Next Operation No.");
          IF RtngLine2.ISEMPTY THEN
            ERROR(
              Text007,
              RtngLine."Routing No.");
        UNTIL RtngLine.NEXT = 0;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeFindRoutingLines@13(VAR RoutingHeader@1000 : Record 99000763;VersionCode@1001 : Code[20]);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnCalculateOnAfterCalcScrapQtyAndFactor@14(VAR RoutingLine@1000 : Record 99000764;VAR ScrapQty@1001 : Decimal;VAR ScrapFactor@1002 : Decimal);
    BEGIN
    END;

    BEGIN
    END.
  }
}

