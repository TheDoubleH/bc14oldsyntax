OBJECT Table 5878 Phys. Invt. Record Line
{
  OBJECT-PROPERTIES
  {
    Date=12/19/19;
    Time=12:00:00 PM;
    Version List=NAVW114.09;
  }
  PROPERTIES
  {
    OnInsert=BEGIN
               TestStatusOpen;
             END;

    OnModify=BEGIN
               TestStatusOpen;
             END;

    OnDelete=BEGIN
               TestStatusOpen;
             END;

    OnRename=BEGIN
               ERROR(CannotRenameErr,TABLECAPTION);
             END;

    CaptionML=ENU=Phys. Invt. Record Line;
    LookupPageID=Page5882;
    DrillDownPageID=Page5882;
  }
  FIELDS
  {
    { 1   ;   ;Order No.           ;Code20        ;TableRelation="Phys. Invt. Record Header";
                                                   CaptionML=ENU=Order No. }
    { 2   ;   ;Recording No.       ;Integer       ;TableRelation="Phys. Invt. Record Header"."Recording No." WHERE (Order No.=FIELD(Order No.));
                                                   CaptionML=ENU=Recording No. }
    { 3   ;   ;Line No.            ;Integer       ;CaptionML=ENU=Line No. }
    { 16  ;   ;Order Line No.      ;Integer       ;TableRelation="Phys. Invt. Order Line"."Line No." WHERE (Document No.=FIELD(Order No.));
                                                   CaptionML=ENU=Order Line No.;
                                                   Editable=No }
    { 17  ;   ;Recorded Without Order;Boolean     ;CaptionML=ENU=Recorded Without Order;
                                                   Editable=No }
    { 20  ;   ;Item No.            ;Code20        ;TableRelation=Item;
                                                   OnValidate=VAR
                                                                TempPhysInvtRecordLine@1000 : TEMPORARY Record 5878;
                                                              BEGIN
                                                                TestStatusOpen;

                                                                TempPhysInvtRecordLine := Rec;
                                                                INIT;
                                                                "Item No." := TempPhysInvtRecordLine."Item No.";

                                                                OnValidateItemNoOnAfterInitFromTempRecord(Rec,TempPhysInvtRecordLine);

                                                                IF "Item No." <> xRec."Item No." THEN
                                                                  "Variant Code" := '';

                                                                IF "Item No." = '' THEN
                                                                  EXIT;

                                                                GetPhysInvtRecordHeader;
                                                                GetItem;
                                                                Item.TESTFIELD(Blocked,FALSE);

                                                                VALIDATE(Description,Item.Description);
                                                                VALIDATE("Description 2",Item."Description 2");

                                                                VALIDATE("Unit of Measure Code",Item."Base Unit of Measure");
                                                                IF "Unit of Measure Code" <> '' THEN BEGIN
                                                                  UnitOfMeasure.GET("Unit of Measure Code");
                                                                  "Unit of Measure" := UnitOfMeasure.Description;
                                                                END ELSE
                                                                  "Unit of Measure" := '';

                                                                "Date Recorded" := PhysInvtRecordHeader."Date Recorded";
                                                                "Time Recorded" := PhysInvtRecordHeader."Time Recorded";
                                                                "Person Recorded" := PhysInvtRecordHeader."Person Recorded";
                                                                "Location Code" := PhysInvtRecordHeader."Location Code";
                                                                "Bin Code" := PhysInvtRecordHeader."Bin Code";
                                                                "Use Item Tracking" := PhysInvtTrackingMgt.SuggestUseTrackingLines(Item);
                                                                GetShelfNo;
                                                              END;

                                                   CaptionML=ENU=Item No. }
    { 21  ;   ;Variant Code        ;Code10        ;TableRelation="Item Variant".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                TestStatusOpen;
                                                                TESTFIELD("Item No.");

                                                                IF "Variant Code" = '' THEN
                                                                  EXIT;

                                                                ItemVariant.GET("Item No.","Variant Code");
                                                                Description := ItemVariant.Description;
                                                                "Description 2" := ItemVariant."Description 2";
                                                                GetShelfNo;
                                                              END;

                                                   CaptionML=ENU=Variant Code }
    { 22  ;   ;Location Code       ;Code10        ;TableRelation=Location;
                                                   OnValidate=BEGIN
                                                                GetShelfNo;
                                                              END;

                                                   CaptionML=ENU=Location Code }
    { 23  ;   ;Bin Code            ;Code20        ;TableRelation=Bin.Code WHERE (Location Code=FIELD(Location Code));
                                                   OnValidate=BEGIN
                                                                IF "Bin Code" <> '' THEN BEGIN
                                                                  TESTFIELD("Location Code");
                                                                  Location.GET("Location Code");
                                                                  Location.TESTFIELD("Bin Mandatory",TRUE);
                                                                  Location.TESTFIELD("Directed Put-away and Pick",FALSE);
                                                                END;
                                                              END;

                                                   CaptionML=ENU=Bin Code }
    { 30  ;   ;Description         ;Text100       ;CaptionML=ENU=Description }
    { 31  ;   ;Description 2       ;Text50        ;CaptionML=ENU=Description 2 }
    { 32  ;   ;Unit of Measure     ;Text50        ;CaptionML=ENU=Unit of Measure }
    { 40  ;   ;Unit of Measure Code;Code10        ;TableRelation="Item Unit of Measure".Code WHERE (Item No.=FIELD(Item No.));
                                                   OnValidate=BEGIN
                                                                GetItem;
                                                                "Qty. per Unit of Measure" := UOMMgt.GetQtyPerUnitOfMeasure(Item,"Unit of Measure Code");

                                                                VALIDATE(Quantity);
                                                              END;

                                                   CaptionML=ENU=Unit of Measure Code }
    { 41  ;   ;Quantity            ;Decimal       ;OnValidate=BEGIN
                                                                IF Quantity > 1 THEN
                                                                  IF "Serial No." <> '' THEN
                                                                    ERROR(QuantityCannotBeErr);
                                                                GetPhysInvtRecordHeader;

                                                                "Quantity (Base)" := CalcBaseQty(Quantity);

                                                                CheckSerialNo;
                                                                Recorded := TRUE;
                                                                "Date Recorded" := PhysInvtRecordHeader."Date Recorded";
                                                                "Time Recorded" := PhysInvtRecordHeader."Time Recorded";
                                                                "Person Recorded" := PhysInvtRecordHeader."Person Recorded";
                                                              END;

                                                   CaptionML=ENU=Quantity;
                                                   DecimalPlaces=0:5 }
    { 42  ;   ;Quantity (Base)     ;Decimal       ;OnValidate=BEGIN
                                                                TESTFIELD("Qty. per Unit of Measure",1);
                                                                VALIDATE(Quantity,"Quantity (Base)");
                                                              END;

                                                   CaptionML=ENU=Quantity (Base);
                                                   DecimalPlaces=0:5 }
    { 43  ;   ;Qty. per Unit of Measure;Decimal   ;InitValue=1;
                                                   CaptionML=ENU=Qty. per Unit of Measure;
                                                   DecimalPlaces=0:5;
                                                   Editable=No }
    { 45  ;   ;Recorded            ;Boolean       ;CaptionML=ENU=Recorded }
    { 53  ;   ;Use Item Tracking   ;Boolean       ;CaptionML=ENU=Use Item Tracking;
                                                   Editable=No }
    { 99  ;   ;Shelf No.           ;Code10        ;CaptionML=ENU=Shelf No. }
    { 100 ;   ;Date Recorded       ;Date          ;CaptionML=ENU=Date Recorded }
    { 101 ;   ;Time Recorded       ;Time          ;CaptionML=ENU=Time Recorded }
    { 102 ;   ;Person Recorded     ;Code20        ;TableRelation=Employee;
                                                   ValidateTableRelation=No;
                                                   TestTableRelation=No;
                                                   CaptionML=ENU=Person Recorded }
    { 130 ;   ;Serial No.          ;Code50        ;OnValidate=BEGIN
                                                                CheckSerialNo;
                                                                IF "Serial No." <> '' THEN
                                                                  VALIDATE(Quantity,1);
                                                              END;

                                                   OnLookup=BEGIN
                                                              ShowUsedTrackLines;
                                                            END;

                                                   CaptionML=ENU=Serial No. }
    { 131 ;   ;Lot No.             ;Code50        ;OnLookup=BEGIN
                                                              ShowUsedTrackLines;
                                                            END;

                                                   CaptionML=ENU=Lot No. }
  }
  KEYS
  {
    {    ;Order No.,Recording No.,Line No.        ;Clustered=Yes }
    {    ;Order No.,Order Line No.                ;SumIndexFields=Quantity (Base) }
    {    ;Order No.,Item No.,Variant Code,Location Code,Bin Code }
    {    ;Order No.,Recording No.,Location Code,Bin Code }
    {    ;Order No.,Recording No.,Shelf No.        }
  }
  FIELDGROUPS
  {
  }
  CODE
  {
    VAR
      CannotRenameErr@1000 : TextConst '@@@="%1 = Table caption";ENU=You cannot rename a %1.';
      SerialNoAlreadyExistErr@1008 : TextConst '@@@="%1 = serial no. %2 = item no.";ENU=Serial No. %1 for item %2 already exists.';
      QuantityCannotBeErr@1009 : TextConst 'ENU=Quantity cannot be larger than 1 when Serial No. is assigned.';
      PhysInvtRecordHeader@1001 : Record 5877;
      Item@1002 : Record 27;
      ItemVariant@1003 : Record 5401;
      UnitOfMeasure@1004 : Record 204;
      Location@1006 : Record 14;
      UOMMgt@1005 : Codeunit 5402;
      PhysInvtTrackingMgt@1007 : Codeunit 5889;

    LOCAL PROCEDURE GetPhysInvtRecordHeader@1();
    BEGIN
      TESTFIELD("Order No.");
      TESTFIELD("Recording No.");

      IF ("Order No." <> PhysInvtRecordHeader."Order No.") OR
         ("Recording No." <> PhysInvtRecordHeader."Recording No.")
      THEN
        PhysInvtRecordHeader.GET("Order No.","Recording No.");
    END;

    LOCAL PROCEDURE GetItem@2();
    BEGIN
      TESTFIELD("Item No.");
      IF "Item No." <> Item."No." THEN
        Item.GET("Item No.");
    END;

    LOCAL PROCEDURE TestStatusOpen@3();
    BEGIN
      GetPhysInvtRecordHeader;
      PhysInvtRecordHeader.TESTFIELD(Status,PhysInvtRecordHeader.Status::Open);
    END;

    LOCAL PROCEDURE CalcBaseQty@4(Qty@1000 : Decimal) : Decimal;
    BEGIN
      TESTFIELD("Qty. per Unit of Measure");
      EXIT(ROUND(Qty * "Qty. per Unit of Measure",UOMMgt.QtyRndPrecision));
    END;

    [External]
    PROCEDURE EmptyLine@5() : Boolean;
    BEGIN
      EXIT(
        ("Item No." = '') AND
        ("Variant Code" = '') AND
        ("Location Code" = '') AND
        ("Bin Code" = '') );
    END;

    [External]
    PROCEDURE ShowUsedTrackLines@6();
    VAR
      PhysInvtOrderHeader@1000 : Record 5875;
      ItemLedgEntry@1001 : Record 32;
      WhseEntry@1002 : Record 7312;
      TempPhysInvtTracking@1003 : TEMPORARY Record 5885;
      PhysInvtTrackingLines@1004 : Page 5899;
    BEGIN
      GetItem;

      TempPhysInvtTracking.RESET;
      TempPhysInvtTracking.DELETEALL;

      PhysInvtOrderHeader.GET("Order No.");

      IF PhysInvtTrackingMgt.LocationIsBinMandatory("Location Code") AND
         PhysInvtTrackingMgt.GetTrackingNosFromWhse(Item)
      THEN BEGIN
        WhseEntry.RESET;
        WhseEntry.SETCURRENTKEY("Location Code","Bin Code","Item No.","Variant Code");
        WhseEntry.SETRANGE("Location Code","Location Code");
        WhseEntry.SETRANGE("Bin Code","Bin Code");
        WhseEntry.SETRANGE("Item No.","Item No.");
        WhseEntry.SETRANGE("Variant Code","Variant Code");
        WhseEntry.SETRANGE("Registering Date",0D,PhysInvtOrderHeader."Posting Date");
        OnShowUsedTrackLinesSetWhseEntryFilters(WhseEntry,Rec);
        IF WhseEntry.FIND('-') THEN
          REPEAT
            OnBeforeInsertTrackingBufferLocationIsBinMandatory(WhseEntry,Rec);
            InsertTrackingBuffer(
              TempPhysInvtTracking,WhseEntry."Serial No.",WhseEntry."Lot No.",WhseEntry."Qty. (Base)");
            OnShowUsedTrackLinesOnAfterInsertFromWhseEntry(TempPhysInvtTracking,WhseEntry);
          UNTIL WhseEntry.NEXT = 0;
      END ELSE BEGIN
        ItemLedgEntry.SetItemVariantLocationFilters(
          "Item No.","Variant Code","Location Code",PhysInvtOrderHeader."Posting Date");
        OnShowUsedTrackLinesSetItemLedgerEntryFilters(ItemLedgEntry,Rec);
        IF ItemLedgEntry.FIND('-') THEN
          REPEAT
            InsertTrackingBuffer(
              TempPhysInvtTracking,ItemLedgEntry."Serial No.",ItemLedgEntry."Lot No.",ItemLedgEntry.Quantity);
            OnShowUsedTrackLinesOnAfterInsertFromItemLedgEntry(TempPhysInvtTracking,ItemLedgEntry);
          UNTIL ItemLedgEntry.NEXT = 0;
      END;

      IF TempPhysInvtTracking.FINDFIRST THEN BEGIN
        PhysInvtTrackingLines.SETRECORD(TempPhysInvtTracking);
        PhysInvtTrackingLines.SetSources(TempPhysInvtTracking);
        PhysInvtTrackingLines.LOOKUPMODE(TRUE);
        IF PhysInvtTrackingLines.RUNMODAL = ACTION::LookupOK THEN BEGIN
          PhysInvtTrackingLines.GETRECORD(TempPhysInvtTracking);
          VALIDATE("Serial No.",TempPhysInvtTracking."Serial No.");
          VALIDATE("Lot No.",TempPhysInvtTracking."Lot No");
          OnShowUsedTrackLinesOnAfterLookupOK(Rec,TempPhysInvtTracking);
        END;
      END;
    END;

    [External]
    PROCEDURE CheckSerialNo@7();
    VAR
      PhysInvtRecordLine@1000 : Record 5878;
    BEGIN
      PhysInvtRecordLine.RESET;
      PhysInvtRecordLine.SETRANGE("Order No.","Order No.");
      PhysInvtRecordLine.SETRANGE("Item No.","Item No.");
      IF PhysInvtRecordLine.FINDSET THEN
        REPEAT
          IF "Serial No." <> '' THEN
            IF PhysInvtRecordLine."Serial No." = "Serial No." THEN
              IF (PhysInvtRecordLine."Line No." <> "Line No.") OR (PhysInvtRecordLine."Recording No." <> "Recording No.") THEN
                IF ABS(PhysInvtRecordLine."Quantity (Base)") + ABS("Quantity (Base)") > 1 THEN
                  ERROR(SerialNoAlreadyExistErr,"Serial No.","Item No.");
        UNTIL PhysInvtRecordLine.NEXT = 0;
    END;

    LOCAL PROCEDURE InsertTrackingBuffer@9(VAR TempPhysInvtTracking@1003 : TEMPORARY Record 5885;SerialNo@1000 : Code[50];LotNo@1001 : Code[50];QtyBase@1002 : Decimal);
    BEGIN
      IF (SerialNo <> '') OR (LotNo <> '') THEN BEGIN
        IF NOT TempPhysInvtTracking.GET(SerialNo,LotNo) THEN BEGIN
          TempPhysInvtTracking.INIT;
          TempPhysInvtTracking."Lot No" := LotNo;
          TempPhysInvtTracking."Serial No." := SerialNo;
          TempPhysInvtTracking.INSERT;
        END;
        TempPhysInvtTracking."Qty. Expected (Base)" += QtyBase;
        TempPhysInvtTracking.MODIFY;
      END;
    END;

    LOCAL PROCEDURE GetShelfNo@38();
    VAR
      SKU@1000 : Record 5700;
    BEGIN
      GetItem;
      "Shelf No." := Item."Shelf No.";
      IF SKU.GET("Location Code","Item No.","Variant Code") THEN
        "Shelf No." := SKU."Shelf No.";
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeInsertTrackingBufferLocationIsBinMandatory@14(VAR WarehouseEntry@1000 : Record 7312;PhysInvtRecordLine@1001 : Record 5878);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnShowUsedTrackLinesOnAfterInsertFromItemLedgEntry@12(VAR TempPhysInvtTracking@1000 : TEMPORARY Record 5885;ItemLedgerEntry@1001 : Record 32);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnShowUsedTrackLinesOnAfterInsertFromWhseEntry@11(VAR TempPhysInvtTracking@1000 : TEMPORARY Record 5885;WarehouseEntry@1001 : Record 7312);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnShowUsedTrackLinesOnAfterLookupOK@13(VAR PhysInvtRecordLine@1000 : Record 5878;VAR TempPhysInvtTracking@1001 : TEMPORARY Record 5885);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnShowUsedTrackLinesSetItemLedgerEntryFilters@10(VAR ItemLedgerEntry@1000 : Record 32;PhysInvtRecordLine@1001 : Record 5878);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnShowUsedTrackLinesSetWhseEntryFilters@8(VAR WarehouseEntry@1000 : Record 7312;PhysInvtRecordLine@1001 : Record 5878);
    BEGIN
    END;

    [Integration]
    LOCAL PROCEDURE OnValidateItemNoOnAfterInitFromTempRecord@15(VAR PhysInvtRecordLine@1000 : Record 5878;TempPhysInvtRecordLine@1001 : TEMPORARY Record 5878);
    BEGIN
    END;

    BEGIN
    END.
  }
}

