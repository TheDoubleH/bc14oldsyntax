OBJECT Report 7310 Calculate Bins
{
  OBJECT-PROPERTIES
  {
    Date=09/22/19;
    Time=12:00:00 PM;
    Version List=NAVW114.06;
  }
  PROPERTIES
  {
    CaptionML=ENU=Calculate Bins;
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  BinTemplateFilter.TESTFIELD(Code);
                  IF BinTemplateFilter.GET(BinTemplateFilter.Code) THEN;
                  BinCreationWkshLine.SETRANGE("Worksheet Template Name",CurrTemplateName);
                  BinCreationWkshLine.SETRANGE(Name,CurrWorksheetName);
                  BinCreationWkshLine.SETRANGE("Location Code",CurrLocationCode);
                  IF BinCreationWkshLine.FINDLAST THEN
                    LineNo := BinCreationWkshLine."Line No." + 10000
                  ELSE
                    LineNo := 10000;
                  BinCreationWkshLine.INIT;
                  WITH BinCreationWkshLine DO BEGIN
                    "Worksheet Template Name" := CurrTemplateName;
                    Name := CurrWorksheetName;
                    "Location Code" := CurrLocationCode;
                    Dedicated := BinTemplateFilter.Dedicated;
                    "Zone Code" := BinTemplateFilter."Zone Code";
                    Description := BinTemplateFilter."Bin Description";
                    "Bin Type Code" := BinTemplateFilter."Bin Type Code";
                    "Warehouse Class Code" := BinTemplateFilter."Warehouse Class Code";
                    "Block Movement" := BinTemplateFilter."Block Movement";
                    "Special Equipment Code" := BinTemplateFilter."Special Equipment Code";
                    "Bin Ranking" := BinTemplateFilter."Bin Ranking";
                    "Maximum Cubage" := BinTemplateFilter."Maximum Cubage";
                    "Maximum Weight" := BinTemplateFilter."Maximum Weight";
                  END;
                END;

  }
  DATASET
  {
    { 6034;    ;DataItem;Rack2               ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               Rack := FromRack;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF INCSTR(Rack) = Rack THEN
                                    CurrReport.BREAK;
                                  IF Rack > ToRack THEN
                                    CurrReport.BREAK;
                                  IF STRLEN(Rack) > STRLEN(ToRack) THEN
                                    CurrReport.BREAK;

                                  IF (FromSection = '') AND (ToSection = '') THEN
                                    BinCreateWksh;
                                END;
                                 }

    { 6247;1   ;DataItem;Section2            ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               Section := FromSection;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF INCSTR(Section) = Section THEN
                                    CurrReport.BREAK;
                                  IF Section > ToSection THEN
                                    CurrReport.BREAK;
                                  IF STRLEN(Section) > STRLEN(ToSection) THEN
                                    CurrReport.BREAK;

                                  IF (FromLevel = '') AND (ToLevel = '') THEN
                                    BinCreateWksh;
                                END;

               OnPostDataItem=BEGIN
                                Rack := INCSTR(Rack);
                              END;
                               }

    { 6891;2   ;DataItem;Level2              ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               Level := FromLevel;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF INCSTR(Level) = Level THEN
                                    CurrReport.BREAK;
                                  IF Level > ToLevel THEN
                                    CurrReport.BREAK;
                                  IF STRLEN(Level) > STRLEN(ToLevel) THEN
                                    CurrReport.BREAK;

                                  BinCreateWksh;

                                  Level := INCSTR(Level);
                                END;

               OnPostDataItem=BEGIN
                                Section := INCSTR(Section);
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=ENU=Options }

      { 29  ;2   ;Field     ;
                  Name=BinTemplateCode;
                  CaptionML=ENU=Bin Template Code;
                  ToolTipML=ENU="Specifies the code for the bin. ";
                  ApplicationArea=#Warehouse;
                  SourceExpr=BinTemplateFilter.Code;
                  OnValidate=BEGIN
                               IF  BinTemplateFilter.Code <> '' THEN BEGIN
                                 BinTemplateFilter.GET(BinTemplateFilter.Code);
                                 BinTemplateFilter.TESTFIELD("Location Code");
                               END ELSE BEGIN
                                 BinTemplateFilter.Code := '';
                                 BinTemplateFilter.Description := '';
                                 BinTemplateFilter."Location Code" := '';
                                 BinTemplateFilter."Zone Code" := '';
                               END;
                             END;

                  OnLookup=VAR
                             BinTemplates@1001 : Page 7367;
                           BEGIN
                             IF CurrLocationCode <> '' THEN BEGIN
                               BinTemplateFilter.FILTERGROUP := 2;
                               BinTemplateFilter.SETRANGE("Location Code",CurrLocationCode);
                               BinTemplateFilter.FILTERGROUP := 0;
                             END;
                             CLEAR(BinTemplates);
                             BinTemplates.SETTABLEVIEW(BinTemplateFilter);
                             BinTemplates.EDITABLE(FALSE);
                             BinTemplates.LOOKUPMODE(TRUE);
                             IF BinTemplates.RUNMODAL = ACTION::LookupOK THEN BEGIN
                               BinTemplates.GETRECORD(BinTemplateFilter);
                               BinTemplateFilter.VALIDATE(Code);
                               BinTemplateFilter.TESTFIELD("Location Code");
                             END;
                           END;
                            }

      { 31  ;2   ;Field     ;
                  CaptionML=ENU=Description;
                  ToolTipML=ENU=Specifies the description of the bin.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=BinTemplateFilter.Description }

      { 33  ;2   ;Field     ;
                  CaptionML=ENU=Location Code;
                  ToolTipML=ENU="Specifies the location where the warehouse activity takes place. ";
                  ApplicationArea=#Warehouse;
                  SourceExpr=BinTemplateFilter."Location Code";
                  Editable=FALSE }

      { 35  ;2   ;Field     ;
                  CaptionML=ENU=Zone Code;
                  ToolTipML=ENU=Specifies the zone code where the bin on this line is located.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=BinTemplateFilter."Zone Code";
                  Editable=FALSE }

      { 6   ;2   ;Group     ;
                  CaptionML=ENU=Rack }

      { 11  ;3   ;Field     ;
                  Name=RackFromNo;
                  CaptionML=ENU=From No.;
                  ToolTipML=ENU=Specifies the lowest number from which you will calculate the bin.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=FromRack;
                  OnValidate=BEGIN
                               IF (FromRack <> '') AND
                                  (ToRack <> '') AND
                                  (STRLEN(FromRack) <> STRLEN(ToRack))
                               THEN
                                 ERROR(Text004);
                             END;
                              }

      { 13  ;3   ;Field     ;
                  Name=RackToNo;
                  CaptionML=ENU=To No.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=ToRack;
                  OnValidate=BEGIN
                               IF (FromRack <> '') AND
                                  (ToRack <> '') AND
                                  (STRLEN(FromRack) <> STRLEN(ToRack))
                               THEN
                                 ERROR(Text004);
                             END;
                              }

      { 15  ;2   ;Group     ;
                  CaptionML=ENU=Section }

      { 16  ;3   ;Field     ;
                  Name=SelectionFromNo;
                  CaptionML=ENU=From No.;
                  ToolTipML=ENU=Specifies the lowest number from which you will calculate the bin.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=FromSection;
                  OnValidate=BEGIN
                               IF (FromSection <> '') AND
                                  (ToSection <> '') AND
                                  (STRLEN(FromSection) <> STRLEN(ToSection))
                               THEN
                                 ERROR(Text004);
                             END;
                              }

      { 18  ;3   ;Field     ;
                  Name=SelectionToNo;
                  CaptionML=ENU=To No.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=ToSection;
                  OnValidate=BEGIN
                               IF (FromSection <> '') AND
                                  (ToSection <> '') AND
                                  (STRLEN(FromSection) <> STRLEN(ToSection))
                               THEN
                                 ERROR(Text004);
                             END;
                              }

      { 20  ;2   ;Group     ;
                  CaptionML=ENU=Level }

      { 21  ;3   ;Field     ;
                  Name=LevelFromNo;
                  CaptionML=ENU=From No.;
                  ToolTipML=ENU=Specifies the lowest number from which you will calculate the bin.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=FromLevel;
                  OnValidate=BEGIN
                               IF (FromLevel <> '') AND
                                  (ToLevel <> '') AND
                                  (STRLEN(FromLevel) <> STRLEN(ToLevel))
                               THEN
                                 ERROR(Text004);
                             END;
                              }

      { 23  ;3   ;Field     ;
                  Name=LevelToNo;
                  CaptionML=ENU=To No.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=ToLevel;
                  OnValidate=BEGIN
                               IF (FromLevel <> '') AND
                                  (ToLevel <> '') AND
                                  (STRLEN(FromLevel) <> STRLEN(ToLevel))
                               THEN
                                 ERROR(Text004);
                             END;
                              }

      { 25  ;2   ;Field     ;
                  Name=FieldSeparator;
                  CaptionML=ENU=Field Separator;
                  ToolTipML=ENU=Specifies if you want a character, such as a hyphen, to separate the category fields you have defined as part of the bin code. If so, fill in the Field Separator field with this character.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=FieldSeparator }

      { 27  ;2   ;Field     ;
                  CaptionML=ENU=Check on Existing Bin;
                  ToolTipML=ENU=Specifies whether or not to check on an existing bin.;
                  ApplicationArea=#Warehouse;
                  SourceExpr=CheckOnBin }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Bin@1027 : Record 7354;
      BinTemplateFilter@1016 : Record 7335;
      BinCreationWkshLine@1013 : Record 7338;
      CurrTemplateName@1011 : Code[10];
      CurrWorksheetName@1010 : Code[10];
      CurrLocationCode@1000 : Code[10];
      FromRack@1009 : Code[20];
      FromSection@1008 : Code[20];
      FromLevel@1007 : Code[20];
      ToRack@1006 : Code[20];
      ToSection@1005 : Code[20];
      ToLevel@1004 : Code[20];
      FieldSeparator@1003 : Code[1];
      Rack@1017 : Code[20];
      Section@1018 : Code[20];
      Level@1019 : Code[20];
      CheckOnBin@1026 : Boolean;
      Text000@1002 : TextConst 'ENU=The length of From Rack+From Section+From Level is greater than the maximum length of Bin Code (%1).';
      LenFieldSeparator@1001 : Integer;
      LineNo@1014 : Integer;
      Text004@1012 : TextConst 'ENU=The length of the strings inserted in From No. and To No. must be identical.';

    LOCAL PROCEDURE BinCreateWksh@1();
    BEGIN
      OnBeforeBinCreateWksh(BinCreationWkshLine,BinTemplateFilter);

      LenFieldSeparator := 0;
      IF FieldSeparator <> '' THEN
        LenFieldSeparator := 2;

      IF (STRLEN(Rack + Section + Level) + LenFieldSeparator) > MAXSTRLEN(BinCreationWkshLine."Bin Code") THEN
        ERROR(Text000,MAXSTRLEN(BinCreationWkshLine."Bin Code"));

      BinCreationWkshLine."Line No." := LineNo;
      BinCreationWkshLine."Bin Code" :=
        COPYSTR(Rack + FieldSeparator + Section + FieldSeparator + Level,1,MAXSTRLEN(BinCreationWkshLine."Bin Code"));
      IF NOT CheckOnBin THEN
        BinCreationWkshLine.INSERT(TRUE)
      ELSE BEGIN
        IF Bin.GET(BinCreationWkshLine."Location Code",BinCreationWkshLine."Bin Code") THEN
          EXIT;
        BinCreationWkshLine.INSERT(TRUE);
      END;
      LineNo := LineNo + 10000;
    END;

    [External]
    PROCEDURE SetTemplAndWorksheet@2(TemplateName@1001 : Code[10];WorksheetName@1000 : Code[10];LocationCode@1002 : Code[10]);
    BEGIN
      CurrTemplateName := TemplateName;
      CurrWorksheetName := WorksheetName;
      CurrLocationCode := LocationCode;
    END;

    [Integration]
    LOCAL PROCEDURE OnBeforeBinCreateWksh@3(VAR BinCreationWorksheetLine@1000 : Record 7338;BinTemplate@1001 : Record 7335);
    BEGIN
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

