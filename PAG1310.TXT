OBJECT Page 1310 O365 Activities
{
  OBJECT-PROPERTIES
  {
    Date=10/02/20;
    Time=12:00:00 PM;
    Version List=NAVW114.18;
  }
  PROPERTIES
  {
    CaptionML=ENU=Activities;
    SourceTable=Table1313;
    PageType=CardPart;
    RefreshOnActivate=Yes;
    ShowFilter=No;
    OnInit=BEGIN
             IF UserTours.IsAvailable AND O365GettingStartedMgt.AreUserToursEnabled THEN
               O365GettingStartedMgt.UpdateGettingStartedVisible(TileGettingStartedVisible,ReplayGettingStartedVisible);
           END;

    OnOpenPage=VAR
                 CRMConnectionSetup@1004 : Record 5330;
                 IntegrationSynchJobErrors@1005 : Record 5339;
                 OCRServiceMgt@1000 : Codeunit 1294;
                 RoleCenterNotificationMgt@1001 : Codeunit 1430;
                 ConfPersonalizationMgt@1003 : Codeunit 9170;
                 NewRecord@1002 : Boolean;
               BEGIN
                 RESET;
                 IF NOT GET THEN BEGIN
                   INIT;
                   INSERT;
                   COMMIT;
                   NewRecord := TRUE;
                 END;

                 SETRANGE("User ID Filter",USERID);

                 HasCamera := CameraProvider.IsAvailable;
                 IF HasCamera THEN
                   CameraProvider := CameraProvider.Create;

                 PrepareOnLoadDialog;

                 ShowAwaitingIncomingDoc := OCRServiceMgt.OcrServiceIsEnable;
                 ShowIntercompanyActivities := FALSE;
                 ShowDocumentsPendingDocExchService := FALSE;
                 ShowProductVideosActivities := ClientTypeManagement.GetCurrentClientType <> CLIENTTYPE::Phone;
                 ShowIntelligentCloud := NOT PermissionManager.SoftwareAsAService;
                 IntegrationSynchJobErrors.SetDataIntegrationUIElementsVisible(ShowDataIntegrationCues);
                 ShowD365SIntegrationCues := CRMConnectionSetup.IsEnabled;
                 ShowIntegrationErrorsCue := ShowDataIntegrationCues AND (NOT ShowD365SIntegrationCues);
                 RoleCenterNotificationMgt.ShowNotifications;
                 ConfPersonalizationMgt.RaiseOnOpenRoleCenterEvent;

                 IF NewRecord THEN BEGIN
                   CODEUNIT.RUN(CODEUNIT::"Activities Mgt.");
                   EXIT;
                 END;

                 IF ActivitiesMgt.IsCueDataStale THEN
                   IF NOT TASKSCHEDULER.CANCREATETASK THEN
                     CODEUNIT.RUN(CODEUNIT::"Activities Mgt.")
                   ELSE
                     TASKSCHEDULER.CREATETASK(CODEUNIT::"Activities Mgt.",0,TRUE,COMPANYNAME,CURRENTDATETIME);
               END;

    OnAfterGetRecord=BEGIN
                       SetActivityGroupVisibility;
                     END;

    OnAfterGetCurrRecord=VAR
                           RoleCenterNotificationMgt@1000 : Codeunit 1430;
                         BEGIN
                           IF UserTours.IsAvailable AND O365GettingStartedMgt.AreUserToursEnabled THEN
                             O365GettingStartedMgt.UpdateGettingStartedVisible(TileGettingStartedVisible,ReplayGettingStartedVisible);
                           RoleCenterNotificationMgt.HideEvaluationNotificationAfterStartingTrial;
                         END;

    ActionList=ACTIONS
    {
      { 6       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 14      ;1   ;Action    ;
                      Name=RefreshData;
                      CaptionML=ENU=Refresh Data;
                      ToolTipML=ENU=Refreshes the data needed to make complex calculations.;
                      ApplicationArea=#Basic,#Suite;
                      Image=Refresh;
                      OnAction=BEGIN
                                 "Last Date/Time Modified" := 0DT;
                                 MODIFY;

                                 CODEUNIT.RUN(CODEUNIT::"Activities Mgt.");
                                 CurrPage.UPDATE(FALSE);
                               END;
                                }
      { 7       ;1   ;Action    ;
                      Name=Set Up Cues;
                      CaptionML=ENU=Set Up Cues;
                      ToolTipML=ENU=Set up the cues (status tiles) related to the role.;
                      ApplicationArea=#Basic,#Suite;
                      Image=Setup;
                      OnAction=VAR
                                 CueRecordRef@1000 : RecordRef;
                               BEGIN
                                 CueRecordRef.GETTABLE(Rec);
                                 CueSetup.OpenCustomizePageForCurrentUser(CueRecordRef.NUMBER);
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 36  ;1   ;Group     ;
                CaptionML=ENU=Intelligent Cloud;
                Visible=ShowIntelligentCloud;
                GroupType=CueGroup;
                ActionList=ACTIONS
                {
                  { 37      ;    ;Action    ;
                                  Name=Learn More;
                                  CaptionML=ENU=Learn More;
                                  ToolTipML=ENU=" Learn more about the Intelligent Cloud and how it can help your business.";
                                  ApplicationArea=#Basic,#Suite;
                                  Image=TileInfo;
                                  RunPageMode=View;
                                  OnAction=VAR
                                             IntelligentCloudManagement@1000 : Codeunit 4009;
                                           BEGIN
                                             HYPERLINK(IntelligentCloudManagement.GetIntelligentCloudLearnMoreUrl);
                                           END;
                                            }
                  { 38      ;    ;Action    ;
                                  Name=Intelligent Cloud Insights;
                                  CaptionML=ENU=Intelligent Cloud Insights;
                                  ToolTipML=ENU=View your Intelligent Cloud insights.;
                                  ApplicationArea=#Basic,#Suite;
                                  Image=TileCloud;
                                  RunPageMode=View;
                                  OnAction=VAR
                                             IntelligentCloudManagement@1000 : Codeunit 4009;
                                           BEGIN
                                             HYPERLINK(IntelligentCloudManagement.GetIntelligentCloudInsightsUrl);
                                           END;
                                            }
                }
                 }

    { 54  ;1   ;Group     ;
                GroupType=CueGroup;
                Layout=Wide }

    { 88  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the sum of sales in the current month.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Sales This Month";
                DrillDownPageID=Sales Invoice List;
                OnDrillDown=BEGIN
                              ActivitiesMgt.DrillDownSalesThisMonth;
                            END;
                             }

    { 18  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the sum of overdue payments from customers.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Overdue Sales Invoice Amount";
                OnDrillDown=BEGIN
                              ActivitiesMgt.DrillDownCalcOverdueSalesInvoiceAmount;
                            END;
                             }

    { 3   ;2   ;Field     ;
                ToolTipML=ENU=Specifies the sum of your overdue payments to vendors.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Overdue Purch. Invoice Amount";
                OnDrillDown=BEGIN
                              ActivitiesMgt.DrillDownOverduePurchaseInvoiceAmount;
                            END;
                             }

    { 35  ;1   ;Group     ;
                Name=Welcome;
                CaptionML=ENU=Welcome;
                Visible=TileGettingStartedVisible;
                GroupType=CueGroup;
                ActionList=ACTIONS
                {
                  { 4       ;    ;Action    ;
                                  Name=GettingStartedTile;
                                  CaptionML=ENU=Return to Getting Started;
                                  ToolTipML=ENU=Learn how to get started with Dynamics 365.;
                                  ApplicationArea=#Basic,#Suite;
                                  Image=TileVideo;
                                  OnAction=BEGIN
                                             O365GettingStartedMgt.LaunchWizard(TRUE,FALSE);
                                           END;
                                            }
                }
                 }

    { 10  ;1   ;Group     ;
                CaptionML=ENU=Ongoing Sales;
                GroupType=CueGroup }

    { 13  ;2   ;Field     ;
                CaptionML=ENU=Sales Quotes;
                ToolTipML=ENU=Specifies sales quotes that have not yet been converted to invoices or orders.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ongoing Sales Quotes";
                DrillDownPageID=Sales Quotes }

    { 20  ;2   ;Field     ;
                CaptionML=ENU=Sales Orders;
                ToolTipML=ENU=Specifies sales orders that are not yet posted or only partially posted.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ongoing Sales Orders";
                DrillDownPageID=Sales Order List }

    { 2   ;2   ;Field     ;
                CaptionML=ENU=Sales Invoices;
                ToolTipML=ENU=Specifies sales invoices that are not yet posted or only partially posted.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ongoing Sales Invoices";
                DrillDownPageID=Sales Invoice List }

    { 28  ;1   ;Group     ;
                CaptionML=ENU=Document Exchange Service;
                Visible=ShowDocumentsPendingDocExchService;
                GroupType=CueGroup }

    { 27  ;2   ;Field     ;
                ToolTipML=ENU=Specifies sales invoices that await sending to the customer through the document exchange service.;
                ApplicationArea=#Suite;
                SourceExpr="Sales Inv. - Pending Doc.Exch.";
                Visible=ShowDocumentsPendingDocExchService;
                DrillDownPageID=Posted Sales Invoices }

    { 26  ;2   ;Field     ;
                ToolTipML=ENU=Specifies sales credit memos that await sending to the customer through the document exchange service.;
                ApplicationArea=#Suite;
                SourceExpr="Sales CrM. - Pending Doc.Exch.";
                Visible=ShowDocumentsPendingDocExchService;
                DrillDownPageID=Posted Sales Credit Memos }

    { 9   ;1   ;Group     ;
                CaptionML=ENU=Ongoing Purchases;
                GroupType=CueGroup }

    { 42  ;2   ;Field     ;
                ToolTipML=ENU=Specifies purchases orders that are not posted or only partially posted.;
                ApplicationArea=#Suite;
                SourceExpr="Purchase Orders";
                DrillDownPageID=Purchase Order List }

    { 5   ;2   ;Field     ;
                ToolTipML=ENU=Specifies purchases invoices that are not posted or only partially posted.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Ongoing Purchase Invoices";
                DrillDownPageID=Purchase Invoices }

    { 11  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the number of payments to vendors that are due next week.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Purch. Invoices Due Next Week" }

    { 24  ;1   ;Group     ;
                CaptionML=ENU=Approvals;
                GroupType=CueGroup }

    { 25  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the number of approval requests that require your approval.;
                ApplicationArea=#Suite;
                SourceExpr="Requests to Approve";
                DrillDownPageID=Requests to Approve }

    { 47  ;1   ;Group     ;
                CaptionML=ENU=Intercompany;
                Visible=ShowIntercompanyActivities;
                GroupType=CueGroup }

    { 48  ;2   ;Field     ;
                CaptionML=ENU=Pending Inbox Transactions;
                ApplicationArea=#Intercompany;
                SourceExpr="IC Inbox Transactions";
                Visible="IC Inbox Transactions" <> 0;
                DrillDownPageID=IC Inbox Transactions }

    { 49  ;2   ;Field     ;
                CaptionML=ENU=Pending Outbox Transactions;
                ApplicationArea=#Intercompany;
                SourceExpr="IC Outbox Transactions";
                Visible="IC Outbox Transactions" <> 0;
                DrillDownPageID=IC Outbox Transactions }

    { 12  ;1   ;Group     ;
                CaptionML=ENU=Payments;
                GroupType=CueGroup }

    { 29  ;2   ;Field     ;
                CaptionML=ENU=Unprocessed Payments;
                ToolTipML=ENU=Specifies imported bank transactions for payments that are not yet reconciled in the Payment Reconciliation Journal window.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Non-Applied Payments";
                OnDrillDown=BEGIN
                              CODEUNIT.RUN(CODEUNIT::"Pmt. Rec. Journals Launcher");
                            END;

                Image=Cash }

    { 15  ;2   ;Field     ;
                ToolTipML=ENU=Specifies how long customers took to pay invoices in the last three months. This is the average number of days from when invoices are issued to when customers pay the invoices.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Average Collection Days" }

    { 17  ;2   ;Field     ;
                ToolTipML=ENU=Specifies the number of invoices from your vendors that have not been paid yet.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr="Outstanding Vendor Invoices" }

    { 33  ;1   ;Group     ;
                CaptionML=ENU=Camera;
                Visible=HasCamera;
                GroupType=CueGroup;
                ActionList=ACTIONS
                {
                  { 21      ;    ;Action    ;
                                  Name=CreateIncomingDocumentFromCamera;
                                  CaptionML=ENU=Create Incoming Doc. from Camera;
                                  ToolTipML=ENU=Create an incoming document by taking a photo of the document with your mobile device camera. The photo will be attached to the new document.;
                                  ApplicationArea=#Suite;
                                  Image=TileCamera;
                                  OnAction=VAR
                                             CameraOptions@1000 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Capabilities.CameraOptions";
                                           BEGIN
                                             IF NOT HasCamera THEN
                                               EXIT;

                                             CameraOptions := CameraOptions.CameraOptions;
                                             CameraOptions.Quality := 100; // 100%
                                             CameraProvider.RequestPictureAsync(CameraOptions);
                                           END;
                                            }
                }
                 }

    { 34  ;1   ;Group     ;
                CaptionML=ENU=Incoming Documents;
                GroupType=CueGroup }

    { 30  ;2   ;Field     ;
                ToolTipML=ENU=Specifies incoming documents that are assigned to you.;
                ApplicationArea=#Suite;
                SourceExpr="My Incoming Documents" }

    { 32  ;2   ;Field     ;
                Name=Awaiting Verfication;
                DrillDown=Yes;
                ToolTipML=ENU=Specifies incoming documents in OCR processing that require you to log on to the OCR service website to manually verify the OCR values before the documents can be received.;
                ApplicationArea=#Suite;
                SourceExpr="Inc. Doc. Awaiting Verfication";
                Visible=ShowAwaitingIncomingDoc;
                OnDrillDown=VAR
                              OCRServiceSetup@1000 : Record 1270;
                            BEGIN
                              IF OCRServiceSetup.GET THEN
                                IF OCRServiceSetup.Enabled THEN
                                  HYPERLINK(OCRServiceSetup."Sign-in URL");
                            END;
                             }

    { 53  ;1   ;Group     ;
                CaptionML=ENU=Data Integration;
                Visible=ShowDataIntegrationCues;
                GroupType=CueGroup }

    { 40  ;2   ;Field     ;
                CaptionML=ENU=Integration Errors;
                ToolTipML=ENU=Specifies the number of errors related to data integration.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="CDS Integration Errors";
                Visible=ShowIntegrationErrorsCue;
                DrillDownPageID=Integration Synch. Error List }

    { 39  ;2   ;Field     ;
                CaptionML=ENU=Coupled Data Synchronization Errors;
                ToolTipML=ENU=Specifies the number of errors that occurred in the latest synchronization of coupled data between Business Central and Dynamics 365 for Sales.;
                ApplicationArea=#RelationshipMgmt;
                SourceExpr="Coupled Data Synch Errors";
                Visible=ShowD365SIntegrationCues;
                DrillDownPageID=CRM Skipped Records }

    { 50  ;1   ;Group     ;
                CaptionML=ENU=My User Tasks;
                GroupType=CueGroup }

    { 51  ;2   ;Field     ;
                CaptionML=ENU=Pending User Tasks;
                ToolTipML=ENU=Specifies the number of pending tasks that are assigned to you or to a group that you are a member of.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=UserTaskManagement.GetMyPendingUserTasksCount;
                OnDrillDown=VAR
                              UserTaskList@1000 : Page 1170;
                            BEGIN
                              UserTaskList.SetPageToShowMyPendingUserTasks;
                              UserTaskList.RUN;
                            END;

                Image=Checklist }

    { 52  ;1   ;Group     ;
                CaptionML=ENU=Product Videos;
                Visible=ShowProductVideosActivities;
                GroupType=CueGroup;
                ActionList=ACTIONS
                {
                  { 43      ;    ;Action    ;
                                  CaptionML=ENU=Product Videos;
                                  ToolTipML=ENU=Open a list of videos that showcase some of the product capabilities.;
                                  ApplicationArea=#Basic,#Suite;
                                  RunObject=Page 1470;
                                  Image=TileVideo }
                }
                 }

    { 44  ;1   ;Group     ;
                CaptionML=ENU=Get started;
                Visible=ReplayGettingStartedVisible;
                GroupType=CueGroup;
                ActionList=ACTIONS
                {
                  { 23      ;    ;Action    ;
                                  Name=ShowStartInMyCompany;
                                  CaptionML=ENU=Try with my own data;
                                  ToolTipML=ENU=Set up My Company with the settings you choose. We'll show you how, it's easy.;
                                  ApplicationArea=#Basic,#Suite;
                                  Visible=FALSE;
                                  Image=TileSettings;
                                  OnAction=BEGIN
                                             IF UserTours.IsAvailable AND O365GettingStartedMgt.AreUserToursEnabled THEN
                                               UserTours.StartUserTour(O365GettingStartedMgt.GetChangeCompanyTourID);
                                           END;
                                            }
                  { 8       ;    ;Action    ;
                                  Name=ReplayGettingStarted;
                                  CaptionML=ENU=Replay Getting Started;
                                  ToolTipML=ENU=Show the Getting Started guide again.;
                                  ApplicationArea=#Basic,#Suite;
                                  Image=TileVideo;
                                  OnAction=VAR
                                             O365GettingStarted@1000 : Record 1309;
                                           BEGIN
                                             IF O365GettingStarted.GET(USERID,ClientTypeManagement.GetCurrentClientType) THEN BEGIN
                                               O365GettingStarted."Tour in Progress" := FALSE;
                                               O365GettingStarted."Current Page" := 1;
                                               O365GettingStarted.MODIFY;
                                               COMMIT;
                                             END;

                                             O365GettingStartedMgt.LaunchWizard(TRUE,FALSE);
                                           END;
                                            }
                }
                 }

  }
  CODE
  {
    VAR
      ActivitiesMgt@1009 : Codeunit 1311;
      CueSetup@1005 : Codeunit 9701;
      O365GettingStartedMgt@1004 : Codeunit 1309;
      ClientTypeManagement@1023 : Codeunit 4030;
      PermissionManager@1099 : Codeunit 9002;
      UserTaskManagement@1910 : Codeunit 1174;
      CameraProvider@1007 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Capabilities.CameraProvider" WITHEVENTS RUNONCLIENT;
      UserTours@1001 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.Capabilities.UserTours" WITHEVENTS RUNONCLIENT;
      PageNotifier@1002 : DotNet "'Microsoft.Dynamics.Nav.ClientExtensions, Version=14.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.Client.PageNotifier" WITHEVENTS RUNONCLIENT;
      HasCamera@1008 : Boolean;
      ShowDocumentsPendingDocExchService@1006 : Boolean;
      ShowAwaitingIncomingDoc@1015 : Boolean;
      ShowIntercompanyActivities@1021 : Boolean;
      ShowProductVideosActivities@1019 : Boolean;
      ShowIntelligentCloud@1003 : Boolean;
      TileGettingStartedVisible@1000 : Boolean;
      ReplayGettingStartedVisible@1016 : Boolean;
      HideNpsDialog@1017 : Boolean;
      WhatIsNewTourVisible@1018 : Boolean;
      ShowD365SIntegrationCues@1010 : Boolean;
      ShowDataIntegrationCues@1011 : Boolean;
      ShowIntegrationErrorsCue@1012 : Boolean;

    LOCAL PROCEDURE SetActivityGroupVisibility@12();
    VAR
      DocExchServiceSetup@1001 : Record 1275;
      CompanyInformation@1000 : Record 79;
    BEGIN
      IF DocExchServiceSetup.GET THEN
        ShowDocumentsPendingDocExchService := DocExchServiceSetup.Enabled;

      IF CompanyInformation.GET THEN
        ShowIntercompanyActivities :=
          (CompanyInformation."IC Partner Code" <> '') AND (("IC Inbox Transactions" <> 0) OR ("IC Outbox Transactions" <> 0));
    END;

    LOCAL PROCEDURE StartWhatIsNewTour@45(hasTourCompleted@1000 : Boolean);
    VAR
      O365UserTours@1001 : Record 1314;
      TourID@1003 : Integer;
    BEGIN
      TourID := O365GettingStartedMgt.GetWhatIsNewTourID;

      IF O365UserTours.AlreadyCompleted(TourID) THEN
        EXIT;

      IF (NOT hasTourCompleted) AND (NOT PermissionManager.IsPreview) THEN BEGIN
        UserTours.StartUserTour(TourID);
        WhatIsNewTourVisible := TRUE;
        EXIT;
      END;

      IF WhatIsNewTourVisible THEN BEGIN
        O365UserTours.MarkAsCompleted(TourID);
        WhatIsNewTourVisible := FALSE;
      END;
    END;

    LOCAL PROCEDURE PrepareOnLoadDialog@30();
    BEGIN
      IF PrepareUserTours THEN
        EXIT;
      PreparePageNotifier;
    END;

    LOCAL PROCEDURE PreparePageNotifier@8();
    BEGIN
      IF NOT PageNotifier.IsAvailable THEN
        EXIT;
      PageNotifier := PageNotifier.Create;
      PageNotifier.NotifyPageReady;
    END;

    LOCAL PROCEDURE PrepareUserTours@9() : Boolean;
    VAR
      NetPromoterScore@1002 : Record 1433;
    BEGIN
      IF (NOT UserTours.IsAvailable) OR (NOT O365GettingStartedMgt.AreUserToursEnabled) THEN
        EXIT(FALSE);
      UserTours := UserTours.Create;
      UserTours.NotifyShowTourWizard;
      IF O365GettingStartedMgt.IsGettingStartedSupported THEN BEGIN
        HideNpsDialog := O365GettingStartedMgt.WizardHasToBeLaunched(FALSE);
        IF HideNpsDialog THEN
          NetPromoterScore.DisableRequestSending;
      END;
      EXIT(TRUE);
    END;

    EVENT CameraProvider@1007::PictureAvailable@10(PictureName@1001 : Text;PictureFilePath@1000 : Text);
    VAR
      IncomingDocument@1002 : Record 130;
    BEGIN
      IncomingDocument.CreateIncomingDocumentFromServerFile(PictureName,PictureFilePath);
      CurrPage.UPDATE;
    END;

    EVENT UserTours@1001::ShowTourWizard@13(hasTourCompleted@1000 : Boolean);
    VAR
      NetPromoterScoreMgt@1001 : Codeunit 1432;
    BEGIN
      IF O365GettingStartedMgt.IsGettingStartedSupported THEN
        IF O365GettingStartedMgt.LaunchWizard(FALSE,hasTourCompleted) THEN
          EXIT;

      IF (NOT hasTourCompleted) AND (NOT HideNpsDialog) THEN
        IF NetPromoterScoreMgt.ShowNpsDialog THEN BEGIN
          HideNpsDialog := TRUE;
          EXIT;
        END;

      StartWhatIsNewTour(hasTourCompleted);
    END;

    EVENT UserTours@1001::IsTourInProgressResultReady@14(isInProgress@1000 : Boolean);
    BEGIN
    END;

    EVENT PageNotifier@1002::PageReady@9();
    VAR
      NetPromoterScoreMgt@1000 : Codeunit 1432;
    BEGIN
      IF O365GettingStartedMgt.WizardShouldBeOpenedForDevices THEN BEGIN
        COMMIT;
        PAGE.RUNMODAL(PAGE::"O365 Getting Started Device");
        EXIT;
      END;

      IF NOT HideNpsDialog THEN
        IF NetPromoterScoreMgt.ShowNpsDialog THEN
          HideNpsDialog := TRUE;
    END;

    BEGIN
    END.
  }
}

