OBJECT Page 702 Merge Duplicate
{
  OBJECT-PROPERTIES
  {
    Date=03/24/19;
    Time=12:00:00 PM;
    Version List=NAVW114.00;
  }
  PROPERTIES
  {
    CaptionML=ENU=Merge Duplicate;
    SaveValues=No;
    InsertAllowed=No;
    DeleteAllowed=No;
    SourceTable=Table64;
    DataCaptionExpr="Table Name";
    PageType=Card;
    SourceTableTemporary=Yes;
    ShowFilter=No;
    ActionList=ACTIONS
    {
      { 7       ;    ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 8       ;1   ;Action    ;
                      Name=Merge;
                      CaptionML=ENU=Merge;
                      ToolTipML=ENU=Remove the duplicate record and reassign the related records to the current record.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=NOT ShowRecID;
                      PromotedIsBig=Yes;
                      Image=ItemSubstitution;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 IF Merge THEN BEGIN
                                   CurrPage.CLOSE;
                                   MESSAGE(RecordMergedMsg,"Table Name",Duplicate,Current);
                                 END;
                               END;
                                }
      { 11      ;1   ;Action    ;
                      Name=Remove Duplicate;
                      CaptionML=ENU=Remove Duplicate;
                      ToolTipML=ENU=Copy the selected fields from the duplicate record to the current record and then remove the duplicate record.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=ShowRecID;
                      PromotedIsBig=Yes;
                      Image=Delete;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 IF RemoveConflictingRecord THEN BEGIN
                                   ConflictResolved := TRUE;
                                   CurrPage.CLOSE;
                                 END;
                               END;
                                }
      { 16      ;1   ;Action    ;
                      Name=Rename Duplicate;
                      Ellipsis=Yes;
                      CaptionML=ENU=Rename Duplicate;
                      ToolTipML=ENU=Rename the duplicate record to keep it after the merge of the parental records. To enable this action, modify the alternate value of one of the primary fields.;
                      ApplicationArea=#Basic,#Suite;
                      Promoted=Yes;
                      Visible=ShowRecID;
                      PromotedIsBig=Yes;
                      Image=EditLines;
                      PromotedCategory=Process;
                      PromotedOnly=Yes;
                      OnAction=BEGIN
                                 IF RenameConflictingRecord THEN BEGIN
                                   ConflictResolved := TRUE;
                                   CurrPage.CLOSE;
                                 END;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1   ;0   ;Container ;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                CaptionML=ENU=Choose a record to merge with.;
                Visible=NOT ShowRecID;
                GroupType=Group }

    { 15  ;2   ;Group     ;
                GroupType=Group;
                InstructionalTextML=ENU=When merging, two records are combined into one. }

    { 17  ;2   ;Group     ;
                GroupType=Group;
                InstructionalTextML=ENU=Before merging, review which field values you want to keep or override. The merge action cannot be undone. }

    { 5   ;2   ;Field     ;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Current;
                Editable=FALSE }

    { 4   ;2   ;Field     ;
                CaptionML=ENU=Merge with;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=Duplicate;
                OnValidate=BEGIN
                             ShowLines;
                           END;
                            }

    { 12  ;1   ;Group     ;
                CaptionML=ENU=Conflicting Records;
                Visible=ShowRecID;
                GroupType=Group;
                InstructionalTextML=ENU=Before renaming or removing the conflicting record, review which field values you want to keep or override. }

    { 18  ;2   ;Group     ;
                GroupType=Group;
                InstructionalTextML=ENU=This action cannot be undone. }

    { 13  ;2   ;Field     ;
                Name=CurrentRecID;
                CaptionML=ENU=Current;
                ToolTipML=ENU=Specifies the values in the fields of the primary key of the current record.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=GetPK("Current Record ID");
                Editable=FALSE }

    { 14  ;2   ;Field     ;
                Name=DuplicateRecID;
                CaptionML=ENU=Conflicts With;
                ToolTipML=ENU=Specifies the values in the fields of the primary key of the duplicate record.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=GetPK("Duplicate Record ID");
                Editable=FALSE }

    { 9   ;1   ;Group     ;
                CaptionML=ENU=Conflicts to Resolve;
                Visible=Conflicts > 0;
                GroupType=Group;
                Layout=Rows }

    { 10  ;2   ;Field     ;
                Name=Conflicts;
                ToolTipML=ENU=Specifies the number of conflicts that prevent the merge.;
                ApplicationArea=#Basic,#Suite;
                SourceExpr=GetConflictsMsg;
                Editable=FALSE;
                Style=Unfavorable;
                StyleExpr=TRUE;
                OnDrillDown=BEGIN
                              ShowConflicts;
                              CurrPage.UPDATE(FALSE);
                            END;

                ShowCaption=No }

    { 6   ;1   ;Part      ;
                Name=Fields;
                CaptionML=ENU=Choose field values to keep or override.;
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page703;
                PartType=Page;
                ShowFilter=No }

    { 3   ;1   ;Part      ;
                Name=Tables;
                CaptionML=ENU=Related Tables;
                ApplicationArea=#Basic,#Suite;
                PagePartID=Page703;
                Visible=NOT ShowRecID;
                Editable=FALSE;
                PartType=Page;
                ShowFilter=No }

  }
  CODE
  {
    VAR
      RecordMergedMsg@1001 : TextConst '@@@="%1 - table name (Customer/Vendor); %2 - Duplicate value; %3 - new kew value";ENU=%1 %2 has been merged to %1 %3.';
      ShowRecID@1000 : Boolean;
      ConflictResolved@1002 : Boolean;

    PROCEDURE IsConflictResolved@4() : Boolean;
    BEGIN
      EXIT(ConflictResolved);
    END;

    LOCAL PROCEDURE GetPK@5(RecordID@1000 : RecordID) PrimaryKey : Text;
    BEGIN
      PrimaryKey := FORMAT(RecordID);
      PrimaryKey := COPYSTR(PrimaryKey,STRPOS(PrimaryKey,': ') + 2);
    END;

    [External]
    PROCEDURE Set@1(MergeDuplicatesBuffer@1000 : Record 64);
    BEGIN
      Rec := MergeDuplicatesBuffer;
      INSERT;
      ShowRecID := FALSE;
    END;

    [External]
    PROCEDURE SetConflict@2(MergeDuplicatesConflict@1000 : Record 66);
    BEGIN
      InsertFromConflict(MergeDuplicatesConflict);
      ShowRecID := TRUE;
      ShowLines;
    END;

    LOCAL PROCEDURE ShowLines@3();
    VAR
      TempMergeDuplicatesLineBuffer@1001 : TEMPORARY Record 65;
      TempMergeDuplicatesConflict@1000 : TEMPORARY Record 66;
    BEGIN
      GetLines(TempMergeDuplicatesLineBuffer,TempMergeDuplicatesConflict);
      TempMergeDuplicatesLineBuffer.SETCURRENTKEY("In Primary Key");
      TempMergeDuplicatesLineBuffer.SETRANGE(Type,TempMergeDuplicatesLineBuffer.Type::Field);
      CurrPage.Fields.PAGE.Set(TempMergeDuplicatesLineBuffer);
      TempMergeDuplicatesLineBuffer.SETRANGE(Type,TempMergeDuplicatesLineBuffer.Type::Table);
      CurrPage.Tables.PAGE.Set(TempMergeDuplicatesLineBuffer);
      CurrPage.UPDATE(TRUE);
    END;

    BEGIN
    END.
  }
}

